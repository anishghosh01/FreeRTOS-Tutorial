
8_Suspending_a_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005084  08005084  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800508c  0800508c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005090  08005090  00006090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005094  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a18  20000010  080050a4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  080050a4  00007a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b18  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003249  00000000  00000000  0001db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00020da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbf  00000000  00000000  000221e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c20  00000000  00000000  0002319f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001673b  00000000  00000000  00026dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db2ca  00000000  00000000  0003d4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001187c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  00118808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ffc 	.word	0x08004ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004ffc 	.word	0x08004ffc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
void vBlueLedControllerTask(void *pvParameters);
void vRedLedControllerTask(void *pvParameters);
void vGreenLedControllerTask(void *pvParameters);

int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8


  HAL_Init();
 8000542:	f000 fa99 	bl	8000a78 <HAL_Init>
  SystemClock_Config();
 8000546:	f000 f893 	bl	8000670 <SystemClock_Config>
  MX_GPIO_Init();
 800054a:	f000 f91b 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8ef 	bl	8000730 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <main+0x5c>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2264      	movs	r2, #100	@ 0x64
 800055e:	490f      	ldr	r1, [pc, #60]	@ (800059c <main+0x60>)
 8000560:	480f      	ldr	r0, [pc, #60]	@ (80005a0 <main+0x64>)
 8000562:	f002 fe87 	bl	8003274 <xTaskCreate>
		  100,
		  NULL,
		  1,
		  &blue_handle);

  xTaskCreate(vRedLedControllerTask,
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <main+0x68>)
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2264      	movs	r2, #100	@ 0x64
 8000572:	490d      	ldr	r1, [pc, #52]	@ (80005a8 <main+0x6c>)
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <main+0x70>)
 8000576:	f002 fe7d 	bl	8003274 <xTaskCreate>
		  100,
		  NULL,
		  1,
		  &red_handle);

  xTaskCreate(vGreenLedControllerTask,
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <main+0x74>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	2264      	movs	r2, #100	@ 0x64
 8000586:	490b      	ldr	r1, [pc, #44]	@ (80005b4 <main+0x78>)
 8000588:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <main+0x7c>)
 800058a:	f002 fe73 	bl	8003274 <xTaskCreate>
		  NULL,
		  1,
		  &green_handle);


  vTaskStartScheduler();
 800058e:	f003 f82d 	bl	80035ec <vTaskStartScheduler>

  while (1)
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x56>
 8000596:	bf00      	nop
 8000598:	20000080 	.word	0x20000080
 800059c:	08005014 	.word	0x08005014
 80005a0:	080005bd 	.word	0x080005bd
 80005a4:	20000084 	.word	0x20000084
 80005a8:	08005028 	.word	0x08005028
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	20000088 	.word	0x20000088
 80005b4:	0800503c 	.word	0x0800503c
 80005b8:	08000641 	.word	0x08000641

080005bc <vBlueLedControllerTask>:
}



void vBlueLedControllerTask(void *pvParameters)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		BlueTaskProfiler++;
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <vBlueLedControllerTask+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <vBlueLedControllerTask+0x28>)
 80005cc:	6013      	str	r3, [r2, #0]
		for(i=0;i<100000;i++){}
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	e002      	b.n	80005da <vBlueLedControllerTask+0x1e>
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a02      	ldr	r2, [pc, #8]	@ (80005e8 <vBlueLedControllerTask+0x2c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	ddf8      	ble.n	80005d4 <vBlueLedControllerTask+0x18>
		BlueTaskProfiler++;
 80005e2:	e7ef      	b.n	80005c4 <vBlueLedControllerTask+0x8>
 80005e4:	20000074 	.word	0x20000074
 80005e8:	0001869f 	.word	0x0001869f

080005ec <vRedLedControllerTask>:
}

uint32_t suspend_monitor;

void vRedLedControllerTask(void *pvParameters)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		RedTaskProfiler++;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <vRedLedControllerTask+0x44>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <vRedLedControllerTask+0x44>)
 80005fc:	6013      	str	r3, [r2, #0]
		for(i=0;i<100000;i++){}
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e002      	b.n	800060a <vRedLedControllerTask+0x1e>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <vRedLedControllerTask+0x48>)
 800060e:	4293      	cmp	r3, r2
 8000610:	ddf8      	ble.n	8000604 <vRedLedControllerTask+0x18>

		suspend_monitor++;
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <vRedLedControllerTask+0x4c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <vRedLedControllerTask+0x4c>)
 800061a:	6013      	str	r3, [r2, #0]

		if(suspend_monitor >=50)
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <vRedLedControllerTask+0x4c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b31      	cmp	r3, #49	@ 0x31
 8000622:	d9e7      	bls.n	80005f4 <vRedLedControllerTask+0x8>
		{
			vTaskSuspend(blue_handle);
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <vRedLedControllerTask+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f002 ff69 	bl	8003500 <vTaskSuspend>
		RedTaskProfiler++;
 800062e:	e7e1      	b.n	80005f4 <vRedLedControllerTask+0x8>
 8000630:	20000078 	.word	0x20000078
 8000634:	0001869f 	.word	0x0001869f
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000080 	.word	0x20000080

08000640 <vGreenLedControllerTask>:
		}
	};
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		GreenTaskProfiler++;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <vGreenLedControllerTask+0x28>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <vGreenLedControllerTask+0x28>)
 8000650:	6013      	str	r3, [r2, #0]
		for(i=0;i<100000;i++){}
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <vGreenLedControllerTask+0x1e>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4a02      	ldr	r2, [pc, #8]	@ (800066c <vGreenLedControllerTask+0x2c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	ddf8      	ble.n	8000658 <vGreenLedControllerTask+0x18>
		GreenTaskProfiler++;
 8000666:	e7ef      	b.n	8000648 <vGreenLedControllerTask+0x8>
 8000668:	2000007c 	.word	0x2000007c
 800066c:	0001869f 	.word	0x0001869f

08000670 <SystemClock_Config>:
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	@ 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fc82 	bl	8004f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <SystemClock_Config+0xb8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a22      	ldr	r2, [pc, #136]	@ (8000728 <SystemClock_Config+0xb8>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <SystemClock_Config+0xb8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <SystemClock_Config+0xbc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <SystemClock_Config+0xbc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <SystemClock_Config+0xbc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ff75 	bl	80015d4 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006f0:	f000 f874 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fc6a 	bl	8000fe8 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800071a:	f000 f85f 	bl	80007dc <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fc6e 	bl	8002048 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f833 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000002c 	.word	0x2000002c
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_GPIO_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <MX_GPIO_Init+0x30>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_GPIO_Init+0x30>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007ca:	f000 f977 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010000 	.word	0x40010000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <HAL_MspInit+0x54>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_MspInit+0x54>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	@ 0x40
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa1d 	bl	8000c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0x84>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12b      	bne.n	80008ba <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 80008b6:	f000 fa03 	bl	8000cc0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <HAL_InitTick+0xd0>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e8:	4a2d      	ldr	r2, [pc, #180]	@ (80009a0 <HAL_InitTick+0xd0>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f0:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <HAL_InitTick+0xd0>)
 80008f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 020c 	add.w	r2, r7, #12
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fc88 	bl	800121c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800090c:	f000 fc72 	bl	80011f4 <HAL_RCC_GetPCLK2Freq>
 8000910:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000914:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <HAL_InitTick+0xd4>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <HAL_InitTick+0xd8>)
 8000922:	4a22      	ldr	r2, [pc, #136]	@ (80009ac <HAL_InitTick+0xdc>)
 8000924:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <HAL_InitTick+0xd8>)
 8000928:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800092e:	4a1e      	ldr	r2, [pc, #120]	@ (80009a8 <HAL_InitTick+0xd8>)
 8000930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000932:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <HAL_InitTick+0xd8>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <HAL_InitTick+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_InitTick+0xd8>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000946:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <HAL_InitTick+0xd8>)
 8000948:	f001 f8e2 	bl	8001b10 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000956:	2b00      	cmp	r3, #0
 8000958:	d11b      	bne.n	8000992 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800095a:	4813      	ldr	r0, [pc, #76]	@ (80009a8 <HAL_InitTick+0xd8>)
 800095c:	f001 f932 	bl	8001bc4 <HAL_TIM_Base_Start_IT>
 8000960:	4603      	mov	r3, r0
 8000962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096a:	2b00      	cmp	r3, #0
 800096c:	d111      	bne.n	8000992 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800096e:	2019      	movs	r0, #25
 8000970:	f000 f998 	bl	8000ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d808      	bhi.n	800098c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800097a:	2200      	movs	r2, #0
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2019      	movs	r0, #25
 8000980:	f000 f974 	bl	8000c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000984:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0xe0>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e002      	b.n	8000992 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000996:	4618      	mov	r0, r3
 8000998:	3730      	adds	r7, #48	@ 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20000090 	.word	0x20000090
 80009ac:	40010000 	.word	0x40010000
 80009b0:	20000004 	.word	0x20000004

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009f2:	f001 f957 	bl	8001ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000090 	.word	0x20000090

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f004 faa1 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd71 	bl	800053c <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a68:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8000a6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a70:	20004a28 	.word	0x20004a28

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d8 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff ff12 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe9c 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200000d8 	.word	0x200000d8

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000d8 	.word	0x200000d8

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff61 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ffb1 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff80 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff54 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e165      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8154 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80ae 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e56:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4e      	ldr	r2, [pc, #312]	@ (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd4 <HAL_GPIO_Init+0x314>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd8 <HAL_GPIO_Init+0x318>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x20a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fdc <HAL_GPIO_Init+0x31c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	@ (8000fe0 <HAL_GPIO_Init+0x320>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x202>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a31      	ldr	r2, [pc, #196]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae96 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0cc      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ffc:	4b68      	ldr	r3, [pc, #416]	@ (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d90c      	bls.n	8001024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100a:	4b65      	ldr	r3, [pc, #404]	@ (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001012:	4b63      	ldr	r3, [pc, #396]	@ (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d001      	beq.n	8001024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0b8      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800103c:	4b59      	ldr	r3, [pc, #356]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a58      	ldr	r2, [pc, #352]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001046:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001054:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a52      	ldr	r2, [pc, #328]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800105e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001060:	4b50      	ldr	r3, [pc, #320]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	494d      	ldr	r1, [pc, #308]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	4313      	orrs	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d044      	beq.n	8001108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d107      	bne.n	8001096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d119      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e07f      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d003      	beq.n	80010a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a6:	4b3f      	ldr	r3, [pc, #252]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e06f      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b6:	4b3b      	ldr	r3, [pc, #236]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e067      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c6:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f023 0203 	bic.w	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4934      	ldr	r1, [pc, #208]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fd04 	bl	8000ae4 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010de:	e00a      	b.n	80010f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e0:	f7ff fd00 	bl	8000ae4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e04f      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 020c 	and.w	r2, r3, #12
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	429a      	cmp	r2, r3
 8001106:	d1eb      	bne.n	80010e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d20c      	bcs.n	8001130 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d001      	beq.n	8001130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e032      	b.n	8001196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4916      	ldr	r1, [pc, #88]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	490e      	ldr	r1, [pc, #56]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	4313      	orrs	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800116e:	f000 f887 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 8001172:	4602      	mov	r2, r0
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	490a      	ldr	r1, [pc, #40]	@ (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	5ccb      	ldrb	r3, [r1, r3]
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fb9e 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00
 80011a4:	40023800 	.word	0x40023800
 80011a8:	0800506c 	.word	0x0800506c
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000000 	.word	0x20000000

080011cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011d0:	f7ff fff0 	bl	80011b4 <HAL_RCC_GetHCLKFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	0a9b      	lsrs	r3, r3, #10
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	4903      	ldr	r1, [pc, #12]	@ (80011f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	0800507c 	.word	0x0800507c

080011f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011f8:	f7ff ffdc 	bl	80011b4 <HAL_RCC_GetHCLKFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	0b5b      	lsrs	r3, r3, #13
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	4903      	ldr	r1, [pc, #12]	@ (8001218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800120a:	5ccb      	ldrb	r3, [r1, r3]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	0800507c 	.word	0x0800507c

0800121c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	220f      	movs	r2, #15
 800122a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_RCC_GetClockConfig+0x5c>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_RCC_GetClockConfig+0x5c>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_RCC_GetClockConfig+0x5c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_RCC_GetClockConfig+0x5c>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <HAL_RCC_GetClockConfig+0x60>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 020f 	and.w	r2, r3, #15
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b0a6      	sub	sp, #152	@ 0x98
 8001286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a6:	4bc8      	ldr	r3, [pc, #800]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	f200 817e 	bhi.w	80015b0 <HAL_RCC_GetSysClockFreq+0x330>
 80012b4:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012f1 	.word	0x080012f1
 80012c0:	080015b1 	.word	0x080015b1
 80012c4:	080015b1 	.word	0x080015b1
 80012c8:	080015b1 	.word	0x080015b1
 80012cc:	080012f9 	.word	0x080012f9
 80012d0:	080015b1 	.word	0x080015b1
 80012d4:	080015b1 	.word	0x080015b1
 80012d8:	080015b1 	.word	0x080015b1
 80012dc:	08001301 	.word	0x08001301
 80012e0:	080015b1 	.word	0x080015b1
 80012e4:	080015b1 	.word	0x080015b1
 80012e8:	080015b1 	.word	0x080015b1
 80012ec:	0800146b 	.word	0x0800146b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f0:	4bb6      	ldr	r3, [pc, #728]	@ (80015cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80012f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80012f6:	e15f      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012f8:	4bb5      	ldr	r3, [pc, #724]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80012fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80012fe:	e15b      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001300:	4bb1      	ldr	r3, [pc, #708]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800130c:	4bae      	ldr	r3, [pc, #696]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d031      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001318:	4bab      	ldr	r3, [pc, #684]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	2200      	movs	r2, #0
 8001320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800132a:	663b      	str	r3, [r7, #96]	@ 0x60
 800132c:	2300      	movs	r3, #0
 800132e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001330:	4ba7      	ldr	r3, [pc, #668]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001332:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001336:	462a      	mov	r2, r5
 8001338:	fb03 f202 	mul.w	r2, r3, r2
 800133c:	2300      	movs	r3, #0
 800133e:	4621      	mov	r1, r4
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	4413      	add	r3, r2
 8001346:	4aa2      	ldr	r2, [pc, #648]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001348:	4621      	mov	r1, r4
 800134a:	fba1 1202 	umull	r1, r2, r1, r2
 800134e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001350:	460a      	mov	r2, r1
 8001352:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001354:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001356:	4413      	add	r3, r2
 8001358:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800135a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800135e:	2200      	movs	r2, #0
 8001360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001362:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001364:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001368:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800136c:	f7fe ff50 	bl	8000210 <__aeabi_uldivmod>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4613      	mov	r3, r2
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800137a:	e064      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137c:	4b92      	ldr	r3, [pc, #584]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	2200      	movs	r2, #0
 8001384:	653b      	str	r3, [r7, #80]	@ 0x50
 8001386:	657a      	str	r2, [r7, #84]	@ 0x54
 8001388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800138a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800138e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001390:	2300      	movs	r3, #0
 8001392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001394:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001398:	4622      	mov	r2, r4
 800139a:	462b      	mov	r3, r5
 800139c:	f04f 0000 	mov.w	r0, #0
 80013a0:	f04f 0100 	mov.w	r1, #0
 80013a4:	0159      	lsls	r1, r3, #5
 80013a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013aa:	0150      	lsls	r0, r2, #5
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4621      	mov	r1, r4
 80013b2:	1a51      	subs	r1, r2, r1
 80013b4:	6139      	str	r1, [r7, #16]
 80013b6:	4629      	mov	r1, r5
 80013b8:	eb63 0301 	sbc.w	r3, r3, r1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013ca:	4659      	mov	r1, fp
 80013cc:	018b      	lsls	r3, r1, #6
 80013ce:	4651      	mov	r1, sl
 80013d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013d4:	4651      	mov	r1, sl
 80013d6:	018a      	lsls	r2, r1, #6
 80013d8:	4651      	mov	r1, sl
 80013da:	ebb2 0801 	subs.w	r8, r2, r1
 80013de:	4659      	mov	r1, fp
 80013e0:	eb63 0901 	sbc.w	r9, r3, r1
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f8:	4690      	mov	r8, r2
 80013fa:	4699      	mov	r9, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	eb18 0303 	adds.w	r3, r8, r3
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	462b      	mov	r3, r5
 8001406:	eb49 0303 	adc.w	r3, r9, r3
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001418:	4629      	mov	r1, r5
 800141a:	028b      	lsls	r3, r1, #10
 800141c:	4621      	mov	r1, r4
 800141e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001422:	4621      	mov	r1, r4
 8001424:	028a      	lsls	r2, r1, #10
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800142e:	2200      	movs	r2, #0
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
 8001432:	647a      	str	r2, [r7, #68]	@ 0x44
 8001434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001438:	f7fe feea 	bl	8000210 <__aeabi_uldivmod>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4613      	mov	r3, r2
 8001442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001446:	4b60      	ldr	r3, [pc, #384]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0c1b      	lsrs	r3, r3, #16
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	3301      	adds	r3, #1
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001458:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800145c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001468:	e0a6      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146a:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001476:	4b54      	ldr	r3, [pc, #336]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d02a      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001482:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	2200      	movs	r2, #0
 800148a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800148c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800148e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001494:	2100      	movs	r1, #0
 8001496:	4b4e      	ldr	r3, [pc, #312]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001498:	fb03 f201 	mul.w	r2, r3, r1
 800149c:	2300      	movs	r3, #0
 800149e:	fb00 f303 	mul.w	r3, r0, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	4a4a      	ldr	r2, [pc, #296]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80014a6:	fba0 1202 	umull	r1, r2, r0, r2
 80014aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80014ac:	460a      	mov	r2, r1
 80014ae:	673a      	str	r2, [r7, #112]	@ 0x70
 80014b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014b2:	4413      	add	r3, r2
 80014b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80014b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014ba:	2200      	movs	r2, #0
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80014be:	637a      	str	r2, [r7, #52]	@ 0x34
 80014c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80014c8:	f7fe fea2 	bl	8000210 <__aeabi_uldivmod>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4613      	mov	r3, r2
 80014d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014d6:	e05b      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d8:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	2200      	movs	r2, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014f4:	4642      	mov	r2, r8
 80014f6:	464b      	mov	r3, r9
 80014f8:	f04f 0000 	mov.w	r0, #0
 80014fc:	f04f 0100 	mov.w	r1, #0
 8001500:	0159      	lsls	r1, r3, #5
 8001502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001506:	0150      	lsls	r0, r2, #5
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4641      	mov	r1, r8
 800150e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001512:	4649      	mov	r1, r9
 8001514:	eb63 0b01 	sbc.w	fp, r3, r1
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800152c:	ebb2 040a 	subs.w	r4, r2, sl
 8001530:	eb63 050b 	sbc.w	r5, r3, fp
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	00eb      	lsls	r3, r5, #3
 800153e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001542:	00e2      	lsls	r2, r4, #3
 8001544:	4614      	mov	r4, r2
 8001546:	461d      	mov	r5, r3
 8001548:	4643      	mov	r3, r8
 800154a:	18e3      	adds	r3, r4, r3
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	464b      	mov	r3, r9
 8001550:	eb45 0303 	adc.w	r3, r5, r3
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001562:	4629      	mov	r1, r5
 8001564:	028b      	lsls	r3, r1, #10
 8001566:	4621      	mov	r1, r4
 8001568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800156c:	4621      	mov	r1, r4
 800156e:	028a      	lsls	r2, r1, #10
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001578:	2200      	movs	r2, #0
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	61fa      	str	r2, [r7, #28]
 800157e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001582:	f7fe fe45 	bl	8000210 <__aeabi_uldivmod>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4613      	mov	r3, r2
 800158c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	0f1b      	lsrs	r3, r3, #28
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800159e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015ae:	e003      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80015b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3798      	adds	r7, #152	@ 0x98
 80015c0:	46bd      	mov	sp, r7
 80015c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	00f42400 	.word	0x00f42400
 80015d0:	017d7840 	.word	0x017d7840

080015d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e28d      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8083 	beq.w	80016fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015f4:	4b94      	ldr	r3, [pc, #592]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d019      	beq.n	8001634 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001600:	4b91      	ldr	r3, [pc, #580]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
        || \
 8001608:	2b08      	cmp	r3, #8
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800160c:	4b8e      	ldr	r3, [pc, #568]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b8b      	ldr	r3, [pc, #556]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b88      	ldr	r3, [pc, #544]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b84      	ldr	r3, [pc, #528]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x124>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e25a      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x90>
 8001656:	4b7c      	ldr	r3, [pc, #496]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7b      	ldr	r2, [pc, #492]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xcc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0xb4>
 800166e:	4b76      	ldr	r3, [pc, #472]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a75      	ldr	r2, [pc, #468]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b73      	ldr	r3, [pc, #460]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a72      	ldr	r2, [pc, #456]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xcc>
 8001688:	4b6f      	ldr	r3, [pc, #444]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6e      	ldr	r2, [pc, #440]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b6c      	ldr	r3, [pc, #432]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6b      	ldr	r2, [pc, #428]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa1c 	bl	8000ae4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fa18 	bl	8000ae4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e21f      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xdc>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa08 	bl	8000ae4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fa04 	bl	8000ae4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e20b      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b57      	ldr	r3, [pc, #348]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x104>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06f      	beq.n	80017e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001706:	4b50      	ldr	r3, [pc, #320]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d017      	beq.n	8001742 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
        || \
 800171a:	2b08      	cmp	r3, #8
 800171c:	d105      	bne.n	800172a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800171e:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b44      	ldr	r3, [pc, #272]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x186>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1d3      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4937      	ldr	r1, [pc, #220]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e03a      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b34      	ldr	r3, [pc, #208]	@ (800184c <HAL_RCC_OscConfig+0x278>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff f9b1 	bl	8000ae4 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff f9ad 	bl	8000ae4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1b4      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	4b2b      	ldr	r3, [pc, #172]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4925      	ldr	r1, [pc, #148]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x278>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f990 	bl	8000ae4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff f98c 	bl	8000ae4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e193      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d036      	beq.n	8001860 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d016      	beq.n	8001828 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff f970 	bl	8000ae4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff f96c 	bl	8000ae4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e173      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 800181c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x234>
 8001826:	e01b      	b.n	8001860 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_OscConfig+0x27c>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff f959 	bl	8000ae4 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	e00e      	b.n	8001854 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff f955 	bl	8000ae4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d907      	bls.n	8001854 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e15c      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
 8001848:	40023800 	.word	0x40023800
 800184c:	42470000 	.word	0x42470000
 8001850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	4b8a      	ldr	r3, [pc, #552]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ea      	bne.n	8001836 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8097 	beq.w	800199c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b83      	ldr	r3, [pc, #524]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10f      	bne.n	800189e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b7f      	ldr	r3, [pc, #508]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a7e      	ldr	r2, [pc, #504]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
 800188e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189a:	2301      	movs	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b79      	ldr	r3, [pc, #484]	@ (8001a84 <HAL_RCC_OscConfig+0x4b0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	4b76      	ldr	r3, [pc, #472]	@ (8001a84 <HAL_RCC_OscConfig+0x4b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a75      	ldr	r2, [pc, #468]	@ (8001a84 <HAL_RCC_OscConfig+0x4b0>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b6:	f7ff f915 	bl	8000ae4 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7ff f911 	bl	8000ae4 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e118      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a84 <HAL_RCC_OscConfig+0x4b0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x31e>
 80018e4:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e8:	4a65      	ldr	r2, [pc, #404]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f0:	e01c      	b.n	800192c <HAL_RCC_OscConfig+0x358>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x340>
 80018fa:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fe:	4a60      	ldr	r2, [pc, #384]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6713      	str	r3, [r2, #112]	@ 0x70
 8001906:	4b5e      	ldr	r3, [pc, #376]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	4a5d      	ldr	r2, [pc, #372]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0x358>
 8001914:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001918:	4a59      	ldr	r2, [pc, #356]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001920:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	4a56      	ldr	r2, [pc, #344]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001926:	f023 0304 	bic.w	r3, r3, #4
 800192a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d015      	beq.n	8001960 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f8d6 	bl	8000ae4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff f8d2 	bl	8000ae4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0d7      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	4b4b      	ldr	r3, [pc, #300]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0ee      	beq.n	800193c <HAL_RCC_OscConfig+0x368>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff f8c0 	bl	8000ae4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff f8bc 	bl	8000ae4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0c1      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197e:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ee      	bne.n	8001968 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001990:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	4a3a      	ldr	r2, [pc, #232]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80ad 	beq.w	8001b00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a6:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d060      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d145      	bne.n	8001a46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <HAL_RCC_OscConfig+0x4b4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f890 	bl	8000ae4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f88c 	bl	8000ae4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e093      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	071b      	lsls	r3, r3, #28
 8001a12:	491b      	ldr	r1, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_OscConfig+0x4b4>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f861 	bl	8000ae4 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f85d 	bl	8000ae4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e064      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x452>
 8001a44:	e05c      	b.n	8001b00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_RCC_OscConfig+0x4b4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f84a 	bl	8000ae4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f846 	bl	8000ae4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e04d      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x480>
 8001a72:	e045      	b.n	8001b00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e040      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <HAL_RCC_OscConfig+0x538>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d030      	beq.n	8001afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d129      	bne.n	8001afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d122      	bne.n	8001afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d119      	bne.n	8001afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10f      	bne.n	8001afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e041      	b.n	8001ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f839 	bl	8001bae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f000 f9c0 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e04e      	b.n	8001c7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a23      	ldr	r2, [pc, #140]	@ (8001c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d022      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c06:	d01d      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d018      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00e      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d004      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x80>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d111      	bne.n	8001c68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d010      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c66:	e007      	b.n	8001c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40000c00 	.word	0x40000c00
 8001c98:	40010400 	.word	0x40010400
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40001800 	.word	0x40001800

08001ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d020      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01b      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0202 	mvn.w	r2, #2
 8001cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8d2 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8c4 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8d5 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d020      	beq.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01b      	beq.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0204 	mvn.w	r2, #4
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8ac 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f89e 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8af 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d020      	beq.n	8001da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0208 	mvn.w	r2, #8
 8001d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f886 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f878 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f889 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0210 	mvn.w	r2, #16
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f860 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f852 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f863 	bl	8001eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0201 	mvn.w	r2, #1
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fcd4 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f900 	bl	8002034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f834 	bl	8001ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0220 	mvn.w	r2, #32
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8d2 	bl	8002020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a43      	ldr	r2, [pc, #268]	@ (8001ff4 <TIM_Base_SetConfig+0x120>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef2:	d00f      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <TIM_Base_SetConfig+0x124>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00b      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ffc <TIM_Base_SetConfig+0x128>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3e      	ldr	r2, [pc, #248]	@ (8002000 <TIM_Base_SetConfig+0x12c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002004 <TIM_Base_SetConfig+0x130>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d108      	bne.n	8001f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a32      	ldr	r2, [pc, #200]	@ (8001ff4 <TIM_Base_SetConfig+0x120>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f34:	d027      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff8 <TIM_Base_SetConfig+0x124>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d023      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2e      	ldr	r2, [pc, #184]	@ (8001ffc <TIM_Base_SetConfig+0x128>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2d      	ldr	r2, [pc, #180]	@ (8002000 <TIM_Base_SetConfig+0x12c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01b      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2c      	ldr	r2, [pc, #176]	@ (8002004 <TIM_Base_SetConfig+0x130>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d017      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2b      	ldr	r2, [pc, #172]	@ (8002008 <TIM_Base_SetConfig+0x134>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2a      	ldr	r2, [pc, #168]	@ (800200c <TIM_Base_SetConfig+0x138>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a29      	ldr	r2, [pc, #164]	@ (8002010 <TIM_Base_SetConfig+0x13c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a28      	ldr	r2, [pc, #160]	@ (8002014 <TIM_Base_SetConfig+0x140>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a27      	ldr	r2, [pc, #156]	@ (8002018 <TIM_Base_SetConfig+0x144>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a26      	ldr	r2, [pc, #152]	@ (800201c <TIM_Base_SetConfig+0x148>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <TIM_Base_SetConfig+0x120>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0xf2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a10      	ldr	r2, [pc, #64]	@ (8002004 <TIM_Base_SetConfig+0x130>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d103      	bne.n	8001fce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f043 0204 	orr.w	r2, r3, #4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40000c00 	.word	0x40000c00
 8002004:	40010400 	.word	0x40010400
 8002008:	40014000 	.word	0x40014000
 800200c:	40014400 	.word	0x40014400
 8002010:	40014800 	.word	0x40014800
 8002014:	40001800 	.word	0x40001800
 8002018:	40001c00 	.word	0x40001c00
 800201c:	40002000 	.word	0x40002000

08002020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e042      	b.n	80020e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fbe6 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800208a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f82b 	bl	80020e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b0c0      	sub	sp, #256	@ 0x100
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	ea40 0301 	orr.w	r3, r0, r1
 8002110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	431a      	orrs	r2, r3
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	431a      	orrs	r2, r3
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002140:	f021 010c 	bic.w	r1, r1, #12
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800214e:	430b      	orrs	r3, r1
 8002150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002162:	6999      	ldr	r1, [r3, #24]
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	ea40 0301 	orr.w	r3, r0, r1
 800216e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b8f      	ldr	r3, [pc, #572]	@ (80023b4 <UART_SetConfig+0x2cc>)
 8002178:	429a      	cmp	r2, r3
 800217a:	d005      	beq.n	8002188 <UART_SetConfig+0xa0>
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b8d      	ldr	r3, [pc, #564]	@ (80023b8 <UART_SetConfig+0x2d0>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d104      	bne.n	8002192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002188:	f7ff f834 	bl	80011f4 <HAL_RCC_GetPCLK2Freq>
 800218c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002190:	e003      	b.n	800219a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002192:	f7ff f81b 	bl	80011cc <HAL_RCC_GetPCLK1Freq>
 8002196:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a4:	f040 810c 	bne.w	80023c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	1891      	adds	r1, r2, r2
 80021c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021c2:	415b      	adcs	r3, r3
 80021c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021ca:	4621      	mov	r1, r4
 80021cc:	eb12 0801 	adds.w	r8, r2, r1
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb43 0901 	adc.w	r9, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb18 0303 	adds.w	r3, r8, r3
 80021f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021f8:	462b      	mov	r3, r5
 80021fa:	eb49 0303 	adc.w	r3, r9, r3
 80021fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800220e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002216:	460b      	mov	r3, r1
 8002218:	18db      	adds	r3, r3, r3
 800221a:	653b      	str	r3, [r7, #80]	@ 0x50
 800221c:	4613      	mov	r3, r2
 800221e:	eb42 0303 	adc.w	r3, r2, r3
 8002222:	657b      	str	r3, [r7, #84]	@ 0x54
 8002224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800222c:	f7fd fff0 	bl	8000210 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4b61      	ldr	r3, [pc, #388]	@ (80023bc <UART_SetConfig+0x2d4>)
 8002236:	fba3 2302 	umull	r2, r3, r3, r2
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	011c      	lsls	r4, r3, #4
 800223e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002242:	2200      	movs	r2, #0
 8002244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002248:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800224c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	1891      	adds	r1, r2, r2
 8002256:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002258:	415b      	adcs	r3, r3
 800225a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800225c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002260:	4641      	mov	r1, r8
 8002262:	eb12 0a01 	adds.w	sl, r2, r1
 8002266:	4649      	mov	r1, r9
 8002268:	eb43 0b01 	adc.w	fp, r3, r1
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800227c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002280:	4692      	mov	sl, r2
 8002282:	469b      	mov	fp, r3
 8002284:	4643      	mov	r3, r8
 8002286:	eb1a 0303 	adds.w	r3, sl, r3
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800228e:	464b      	mov	r3, r9
 8002290:	eb4b 0303 	adc.w	r3, fp, r3
 8002294:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022ac:	460b      	mov	r3, r1
 80022ae:	18db      	adds	r3, r3, r3
 80022b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80022b2:	4613      	mov	r3, r2
 80022b4:	eb42 0303 	adc.w	r3, r2, r3
 80022b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80022c2:	f7fd ffa5 	bl	8000210 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <UART_SetConfig+0x2d4>)
 80022ce:	fba3 2301 	umull	r2, r3, r3, r1
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2264      	movs	r2, #100	@ 0x64
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	1acb      	subs	r3, r1, r3
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022e2:	4b36      	ldr	r3, [pc, #216]	@ (80023bc <UART_SetConfig+0x2d4>)
 80022e4:	fba3 2302 	umull	r2, r3, r3, r2
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022f0:	441c      	add	r4, r3
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022f6:	2200      	movs	r2, #0
 80022f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002304:	4642      	mov	r2, r8
 8002306:	464b      	mov	r3, r9
 8002308:	1891      	adds	r1, r2, r2
 800230a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800230c:	415b      	adcs	r3, r3
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002314:	4641      	mov	r1, r8
 8002316:	1851      	adds	r1, r2, r1
 8002318:	6339      	str	r1, [r7, #48]	@ 0x30
 800231a:	4649      	mov	r1, r9
 800231c:	414b      	adcs	r3, r1
 800231e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800232c:	4659      	mov	r1, fp
 800232e:	00cb      	lsls	r3, r1, #3
 8002330:	4651      	mov	r1, sl
 8002332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002336:	4651      	mov	r1, sl
 8002338:	00ca      	lsls	r2, r1, #3
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	4603      	mov	r3, r0
 8002340:	4642      	mov	r2, r8
 8002342:	189b      	adds	r3, r3, r2
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002348:	464b      	mov	r3, r9
 800234a:	460a      	mov	r2, r1
 800234c:	eb42 0303 	adc.w	r3, r2, r3
 8002350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002360:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002368:	460b      	mov	r3, r1
 800236a:	18db      	adds	r3, r3, r3
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800236e:	4613      	mov	r3, r2
 8002370:	eb42 0303 	adc.w	r3, r2, r3
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800237a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800237e:	f7fd ff47 	bl	8000210 <__aeabi_uldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <UART_SetConfig+0x2d4>)
 8002388:	fba3 1302 	umull	r1, r3, r3, r2
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	2164      	movs	r1, #100	@ 0x64
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	3332      	adds	r3, #50	@ 0x32
 800239a:	4a08      	ldr	r2, [pc, #32]	@ (80023bc <UART_SetConfig+0x2d4>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	f003 0207 	and.w	r2, r3, #7
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4422      	add	r2, r4
 80023ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023b0:	e106      	b.n	80025c0 <UART_SetConfig+0x4d8>
 80023b2:	bf00      	nop
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80023ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023d2:	4642      	mov	r2, r8
 80023d4:	464b      	mov	r3, r9
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	6239      	str	r1, [r7, #32]
 80023da:	415b      	adcs	r3, r3
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e2:	4641      	mov	r1, r8
 80023e4:	1854      	adds	r4, r2, r1
 80023e6:	4649      	mov	r1, r9
 80023e8:	eb43 0501 	adc.w	r5, r3, r1
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	00eb      	lsls	r3, r5, #3
 80023f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023fa:	00e2      	lsls	r2, r4, #3
 80023fc:	4614      	mov	r4, r2
 80023fe:	461d      	mov	r5, r3
 8002400:	4643      	mov	r3, r8
 8002402:	18e3      	adds	r3, r4, r3
 8002404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002408:	464b      	mov	r3, r9
 800240a:	eb45 0303 	adc.w	r3, r5, r3
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800241e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800242e:	4629      	mov	r1, r5
 8002430:	008b      	lsls	r3, r1, #2
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002438:	4621      	mov	r1, r4
 800243a:	008a      	lsls	r2, r1, #2
 800243c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002440:	f7fd fee6 	bl	8000210 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4b60      	ldr	r3, [pc, #384]	@ (80025cc <UART_SetConfig+0x4e4>)
 800244a:	fba3 2302 	umull	r2, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	011c      	lsls	r4, r3, #4
 8002452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002456:	2200      	movs	r2, #0
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800245c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002464:	4642      	mov	r2, r8
 8002466:	464b      	mov	r3, r9
 8002468:	1891      	adds	r1, r2, r2
 800246a:	61b9      	str	r1, [r7, #24]
 800246c:	415b      	adcs	r3, r3
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002474:	4641      	mov	r1, r8
 8002476:	1851      	adds	r1, r2, r1
 8002478:	6139      	str	r1, [r7, #16]
 800247a:	4649      	mov	r1, r9
 800247c:	414b      	adcs	r3, r1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800248c:	4659      	mov	r1, fp
 800248e:	00cb      	lsls	r3, r1, #3
 8002490:	4651      	mov	r1, sl
 8002492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002496:	4651      	mov	r1, sl
 8002498:	00ca      	lsls	r2, r1, #3
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	4642      	mov	r2, r8
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024a8:	464b      	mov	r3, r9
 80024aa:	460a      	mov	r2, r1
 80024ac:	eb42 0303 	adc.w	r3, r2, r3
 80024b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024cc:	4649      	mov	r1, r9
 80024ce:	008b      	lsls	r3, r1, #2
 80024d0:	4641      	mov	r1, r8
 80024d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d6:	4641      	mov	r1, r8
 80024d8:	008a      	lsls	r2, r1, #2
 80024da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024de:	f7fd fe97 	bl	8000210 <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <UART_SetConfig+0x4e4>)
 80024ea:	fba3 2301 	umull	r2, r3, r3, r1
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2264      	movs	r2, #100	@ 0x64
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	1acb      	subs	r3, r1, r3
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	3332      	adds	r3, #50	@ 0x32
 80024fc:	4a33      	ldr	r2, [pc, #204]	@ (80025cc <UART_SetConfig+0x4e4>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002508:	441c      	add	r4, r3
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	673b      	str	r3, [r7, #112]	@ 0x70
 8002512:	677a      	str	r2, [r7, #116]	@ 0x74
 8002514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002518:	4642      	mov	r2, r8
 800251a:	464b      	mov	r3, r9
 800251c:	1891      	adds	r1, r2, r2
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	415b      	adcs	r3, r3
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002528:	4641      	mov	r1, r8
 800252a:	1851      	adds	r1, r2, r1
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	4649      	mov	r1, r9
 8002530:	414b      	adcs	r3, r1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002540:	4659      	mov	r1, fp
 8002542:	00cb      	lsls	r3, r1, #3
 8002544:	4651      	mov	r1, sl
 8002546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800254a:	4651      	mov	r1, sl
 800254c:	00ca      	lsls	r2, r1, #3
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	4603      	mov	r3, r0
 8002554:	4642      	mov	r2, r8
 8002556:	189b      	adds	r3, r3, r2
 8002558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800255a:	464b      	mov	r3, r9
 800255c:	460a      	mov	r2, r1
 800255e:	eb42 0303 	adc.w	r3, r2, r3
 8002562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	663b      	str	r3, [r7, #96]	@ 0x60
 800256e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800257c:	4649      	mov	r1, r9
 800257e:	008b      	lsls	r3, r1, #2
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002586:	4641      	mov	r1, r8
 8002588:	008a      	lsls	r2, r1, #2
 800258a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800258e:	f7fd fe3f 	bl	8000210 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <UART_SetConfig+0x4e4>)
 8002598:	fba3 1302 	umull	r1, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2164      	movs	r1, #100	@ 0x64
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	3332      	adds	r3, #50	@ 0x32
 80025aa:	4a08      	ldr	r2, [pc, #32]	@ (80025cc <UART_SetConfig+0x4e4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4422      	add	r2, r4
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80025c6:	46bd      	mov	sp, r7
 80025c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025cc:	51eb851f 	.word	0x51eb851f

080025d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <SysTick_Handler+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025d8:	f001 fc56 	bl	8003e88 <xTaskGetSchedulerState>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025e2:	f002 fa51 	bl	8004a88 <xPortSysTickHandler>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a07      	ldr	r2, [pc, #28]	@ (800261c <vApplicationGetIdleTaskMemory+0x2c>)
 8002600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4a06      	ldr	r2, [pc, #24]	@ (8002620 <vApplicationGetIdleTaskMemory+0x30>)
 8002606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2280      	movs	r2, #128	@ 0x80
 800260c:	601a      	str	r2, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200000dc 	.word	0x200000dc
 8002620:	20000138 	.word	0x20000138

08002624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <vApplicationGetTimerTaskMemory+0x2c>)
 8002634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <vApplicationGetTimerTaskMemory+0x30>)
 800263a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	20000338 	.word	0x20000338
 8002654:	20000394 	.word	0x20000394

08002658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0208 	add.w	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f103 0208 	add.w	r2, r3, #8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0208 	add.w	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d103      	bne.n	800271a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e00c      	b.n	8002734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3308      	adds	r3, #8
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e002      	b.n	8002728 <vListInsert+0x2e>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d2f6      	bcs.n	8002722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6852      	ldr	r2, [r2, #4]
 800278c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d103      	bne.n	80027a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027ec:	f002 f8bc 	bl	8004968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	441a      	add	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281c:	3b01      	subs	r3, #1
 800281e:	68f9      	ldr	r1, [r7, #12]
 8002820:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	441a      	add	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	22ff      	movs	r2, #255	@ 0xff
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	22ff      	movs	r2, #255	@ 0xff
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d114      	bne.n	800286c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01a      	beq.n	8002880 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3310      	adds	r3, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f001 f95a 	bl	8003b08 <xTaskRemoveFromEventList>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <xQueueGenericReset+0xd0>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	e009      	b.n	8002880 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3310      	adds	r3, #16
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fef1 	bl	8002658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3324      	adds	r3, #36	@ 0x24
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff feec 	bl	8002658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002880:	f002 f8a4 	bl	80049cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08e      	sub	sp, #56	@ 0x38
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	e7fd      	b.n	80028da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <xQueueGenericCreateStatic+0x56>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <xQueueGenericCreateStatic+0x5a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <xQueueGenericCreateStatic+0x5c>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	623b      	str	r3, [r7, #32]
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <xQueueGenericCreateStatic+0x84>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <xQueueGenericCreateStatic+0x88>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <xQueueGenericCreateStatic+0x8a>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	61fb      	str	r3, [r7, #28]
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800293a:	2350      	movs	r3, #80	@ 0x50
 800293c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b50      	cmp	r3, #80	@ 0x50
 8002942:	d00b      	beq.n	800295c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	61bb      	str	r3, [r7, #24]
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800295c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002970:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f805 	bl	800298e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002986:	4618      	mov	r0, r3
 8002988:	3730      	adds	r7, #48	@ 0x30
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e002      	b.n	80029b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029bc:	2101      	movs	r1, #1
 80029be:	69b8      	ldr	r0, [r7, #24]
 80029c0:	f7ff fefe 	bl	80027c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	@ 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <xQueueGenericSend+0x34>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <xQueueGenericSend+0x42>
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <xQueueGenericSend+0x46>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueGenericSend+0x48>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <xQueueGenericSend+0x64>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d103      	bne.n	8002a46 <xQueueGenericSend+0x72>
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <xQueueGenericSend+0x76>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <xQueueGenericSend+0x78>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <xQueueGenericSend+0x94>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	623b      	str	r3, [r7, #32]
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a68:	f001 fa0e 	bl	8003e88 <xTaskGetSchedulerState>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <xQueueGenericSend+0xa4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <xQueueGenericSend+0xa8>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <xQueueGenericSend+0xaa>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <xQueueGenericSend+0xc6>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	61fb      	str	r3, [r7, #28]
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a9a:	f001 ff65 	bl	8004968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <xQueueGenericSend+0xdc>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d129      	bne.n	8002b04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ab6:	f000 fa0f 	bl	8002ed8 <prvCopyDataToQueue>
 8002aba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d010      	beq.n	8002ae6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	3324      	adds	r3, #36	@ 0x24
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 f81d 	bl	8003b08 <xTaskRemoveFromEventList>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd4 <xQueueGenericSend+0x200>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	e00a      	b.n	8002afc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b39      	ldr	r3, [pc, #228]	@ (8002bd4 <xQueueGenericSend+0x200>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002afc:	f001 ff66 	bl	80049cc <vPortExitCritical>
				return pdPASS;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e063      	b.n	8002bcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b0a:	f001 ff5f 	bl	80049cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e05c      	b.n	8002bcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f857 	bl	8003bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b26:	f001 ff51 	bl	80049cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b2a:	f000 fdc7 	bl	80036bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b2e:	f001 ff1b 	bl	8004968 <vPortEnterCritical>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d103      	bne.n	8002b48 <xQueueGenericSend+0x174>
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d103      	bne.n	8002b5e <xQueueGenericSend+0x18a>
 8002b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b5e:	f001 ff35 	bl	80049cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b62:	1d3a      	adds	r2, r7, #4
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 f846 	bl	8003bfc <xTaskCheckForTimeOut>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d124      	bne.n	8002bc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b78:	f000 faa6 	bl	80030c8 <prvIsQueueFull>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d018      	beq.n	8002bb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	3310      	adds	r3, #16
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 ff6a 	bl	8003a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b92:	f000 fa31 	bl	8002ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b96:	f000 fd9f 	bl	80036d8 <xTaskResumeAll>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f47f af7c 	bne.w	8002a9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <xQueueGenericSend+0x200>)
 8002ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	e772      	b.n	8002a9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bb6:	f000 fa1f 	bl	8002ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bba:	f000 fd8d 	bl	80036d8 <xTaskResumeAll>
 8002bbe:	e76c      	b.n	8002a9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bc2:	f000 fa19 	bl	8002ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bc6:	f000 fd87 	bl	80036d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3738      	adds	r7, #56	@ 0x38
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b090      	sub	sp, #64	@ 0x40
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <xQueueGenericSendFromISR+0x3e>
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <xQueueGenericSendFromISR+0x42>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <xQueueGenericSendFromISR+0x44>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSendFromISR+0x6e>
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <xQueueGenericSendFromISR+0x72>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <xQueueGenericSendFromISR+0x74>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	623b      	str	r3, [r7, #32]
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c68:	f001 ff5e 	bl	8004b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c6c:	f3ef 8211 	mrs	r2, BASEPRI
 8002c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	61fa      	str	r2, [r7, #28]
 8002c82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <xQueueGenericSendFromISR+0xc2>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d12f      	bne.n	8002cfa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002cb0:	f000 f912 	bl	8002ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d112      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc8:	3324      	adds	r3, #36	@ 0x24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 ff1c 	bl	8003b08 <xTaskRemoveFromEventList>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	b25a      	sxtb	r2, r3
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002cf8:	e001      	b.n	8002cfe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3740      	adds	r7, #64	@ 0x40
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	@ 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <xQueueReceive+0x32>
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	623b      	str	r3, [r7, #32]
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <xQueueReceive+0x40>
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xQueueReceive+0x44>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xQueueReceive+0x46>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <xQueueReceive+0x62>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	61fb      	str	r3, [r7, #28]
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d76:	f001 f887 	bl	8003e88 <xTaskGetSchedulerState>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <xQueueReceive+0x72>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueReceive+0x76>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueReceive+0x78>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <xQueueReceive+0x94>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61bb      	str	r3, [r7, #24]
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002da8:	f001 fdde 	bl	8004968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01f      	beq.n	8002df8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dbc:	f000 f8f6 	bl	8002fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	3310      	adds	r3, #16
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fe97 	bl	8003b08 <xTaskRemoveFromEventList>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002de0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <xQueueReceive+0x1c0>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002df0:	f001 fdec 	bl	80049cc <vPortExitCritical>
				return pdPASS;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e069      	b.n	8002ecc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dfe:	f001 fde5 	bl	80049cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e062      	b.n	8002ecc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fedd 	bl	8003bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1a:	f001 fdd7 	bl	80049cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e1e:	f000 fc4d 	bl	80036bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e22:	f001 fda1 	bl	8004968 <vPortEnterCritical>
 8002e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d103      	bne.n	8002e3c <xQueueReceive+0x128>
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e42:	b25b      	sxtb	r3, r3
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d103      	bne.n	8002e52 <xQueueReceive+0x13e>
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e52:	f001 fdbb 	bl	80049cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e56:	1d3a      	adds	r2, r7, #4
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fecc 	bl	8003bfc <xTaskCheckForTimeOut>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d123      	bne.n	8002eb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e6c:	f000 f916 	bl	800309c <prvIsQueueEmpty>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	3324      	adds	r3, #36	@ 0x24
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fdf0 	bl	8003a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e86:	f000 f8b7 	bl	8002ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e8a:	f000 fc25 	bl	80036d8 <xTaskResumeAll>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d189      	bne.n	8002da8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <xQueueReceive+0x1c0>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	e780      	b.n	8002da8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ea8:	f000 f8a6 	bl	8002ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eac:	f000 fc14 	bl	80036d8 <xTaskResumeAll>
 8002eb0:	e77a      	b.n	8002da8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eb4:	f000 f8a0 	bl	8002ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eb8:	f000 fc0e 	bl	80036d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ebe:	f000 f8ed 	bl	800309c <prvIsQueueEmpty>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f43f af6f 	beq.w	8002da8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002eca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3730      	adds	r7, #48	@ 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	e000ed04 	.word	0xe000ed04

08002ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d14d      	bne.n	8002f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 ffde 	bl	8003ec4 <xTaskPriorityDisinherit>
 8002f08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e043      	b.n	8002f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d119      	bne.n	8002f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6858      	ldr	r0, [r3, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	461a      	mov	r2, r3
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	f002 f85c 	bl	8004fe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	441a      	add	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d32b      	bcc.n	8002f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	e026      	b.n	8002f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68d8      	ldr	r0, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	461a      	mov	r2, r3
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	f002 f842 	bl	8004fe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	425b      	negs	r3, r3
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d207      	bcs.n	8002f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	425b      	negs	r3, r3
 8002f82:	441a      	add	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d105      	bne.n	8002f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002fa2:	697b      	ldr	r3, [r7, #20]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	441a      	add	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d303      	bcc.n	8002fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68d9      	ldr	r1, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	f001 fff8 	bl	8004fe0 <memcpy>
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003000:	f001 fcb2 	bl	8004968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800300a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800300c:	e011      	b.n	8003032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3324      	adds	r3, #36	@ 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fd74 	bl	8003b08 <xTaskRemoveFromEventList>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003026:	f000 fe4d 	bl	8003cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3b01      	subs	r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	dce9      	bgt.n	800300e <prvUnlockQueue+0x16>
 800303a:	e000      	b.n	800303e <prvUnlockQueue+0x46>
					break;
 800303c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	22ff      	movs	r2, #255	@ 0xff
 8003042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003046:	f001 fcc1 	bl	80049cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800304a:	f001 fc8d 	bl	8004968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003056:	e011      	b.n	800307c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3310      	adds	r3, #16
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fd4f 	bl	8003b08 <xTaskRemoveFromEventList>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003070:	f000 fe28 	bl	8003cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003074:	7bbb      	ldrb	r3, [r7, #14]
 8003076:	3b01      	subs	r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800307c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003080:	2b00      	cmp	r3, #0
 8003082:	dce9      	bgt.n	8003058 <prvUnlockQueue+0x60>
 8003084:	e000      	b.n	8003088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	22ff      	movs	r2, #255	@ 0xff
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003090:	f001 fc9c 	bl	80049cc <vPortExitCritical>
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030a4:	f001 fc60 	bl	8004968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e001      	b.n	80030ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ba:	f001 fc87 	bl	80049cc <vPortExitCritical>

	return xReturn;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d0:	f001 fc4a 	bl	8004968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d102      	bne.n	80030e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e001      	b.n	80030ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ea:	f001 fc6f 	bl	80049cc <vPortExitCritical>

	return xReturn;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e014      	b.n	8003132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003108:	4a0f      	ldr	r2, [pc, #60]	@ (8003148 <vQueueAddToRegistry+0x50>)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003114:	490c      	ldr	r1, [pc, #48]	@ (8003148 <vQueueAddToRegistry+0x50>)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800311e:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <vQueueAddToRegistry+0x50>)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800312a:	e006      	b.n	800313a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b07      	cmp	r3, #7
 8003136:	d9e7      	bls.n	8003108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000794 	.word	0x20000794

0800314c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800315c:	f001 fc04 	bl	8004968 <vPortEnterCritical>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003166:	b25b      	sxtb	r3, r3
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d103      	bne.n	8003176 <vQueueWaitForMessageRestricted+0x2a>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800317c:	b25b      	sxtb	r3, r3
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d103      	bne.n	800318c <vQueueWaitForMessageRestricted+0x40>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800318c:	f001 fc1e 	bl	80049cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3324      	adds	r3, #36	@ 0x24
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc85 	bl	8003ab0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff26 	bl	8002ff8 <prvUnlockQueue>
	}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	@ 0x38
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	623b      	str	r3, [r7, #32]
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	61fb      	str	r3, [r7, #28]
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031fe:	235c      	movs	r3, #92	@ 0x5c
 8003200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b5c      	cmp	r3, #92	@ 0x5c
 8003206:	d00b      	beq.n	8003220 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	61bb      	str	r3, [r7, #24]
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01e      	beq.n	8003266 <xTaskCreateStatic+0xb2>
 8003228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01b      	beq.n	8003266 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003240:	2300      	movs	r3, #0
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f850 	bl	80032fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800325e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003260:	f000 f8de 	bl	8003420 <prvAddNewTaskToReadyList>
 8003264:	e001      	b.n	800326a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800326a:	697b      	ldr	r3, [r7, #20]
	}
 800326c:	4618      	mov	r0, r3
 800326e:	3728      	adds	r7, #40	@ 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08c      	sub	sp, #48	@ 0x30
 8003278:	af04      	add	r7, sp, #16
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fc8f 	bl	8004bac <pvPortMalloc>
 800328e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00e      	beq.n	80032b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003296:	205c      	movs	r0, #92	@ 0x5c
 8003298:	f001 fc88 	bl	8004bac <pvPortMalloc>
 800329c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032aa:	e005      	b.n	80032b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ac:	6978      	ldr	r0, [r7, #20]
 80032ae:	f001 fd4b 	bl	8004d48 <vPortFree>
 80032b2:	e001      	b.n	80032b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	2300      	movs	r3, #0
 80032ca:	9303      	str	r3, [sp, #12]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	9302      	str	r3, [sp, #8]
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f80e 	bl	80032fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032e2:	69f8      	ldr	r0, [r7, #28]
 80032e4:	f000 f89c 	bl	8003420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032e8:	2301      	movs	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e002      	b.n	80032f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032f4:	69bb      	ldr	r3, [r7, #24]
	}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b088      	sub	sp, #32
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	461a      	mov	r2, r3
 8003316:	21a5      	movs	r1, #165	@ 0xa5
 8003318:	f001 fe36 	bl	8004f88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003326:	3b01      	subs	r3, #1
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f023 0307 	bic.w	r3, r3, #7
 8003334:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	617b      	str	r3, [r7, #20]
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01f      	beq.n	800339e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e012      	b.n	800338a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	7819      	ldrb	r1, [r3, #0]
 800336c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	3334      	adds	r3, #52	@ 0x34
 8003374:	460a      	mov	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b0f      	cmp	r3, #15
 800338e:	d9e9      	bls.n	8003364 <prvInitialiseNewTask+0x66>
 8003390:	e000      	b.n	8003394 <prvInitialiseNewTask+0x96>
			{
				break;
 8003392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800339c:	e003      	b.n	80033a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	2b37      	cmp	r3, #55	@ 0x37
 80033aa:	d901      	bls.n	80033b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033ac:	2337      	movs	r3, #55	@ 0x37
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	2200      	movs	r2, #0
 80033c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	3304      	adds	r3, #4
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f966 	bl	8002698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	3318      	adds	r3, #24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f961 	bl	8002698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	2200      	movs	r2, #0
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68f9      	ldr	r1, [r7, #12]
 80033fe:	69b8      	ldr	r0, [r7, #24]
 8003400:	f001 f97e 	bl	8004700 <pxPortInitialiseStack>
 8003404:	4602      	mov	r2, r0
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003416:	bf00      	nop
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003428:	f001 fa9e 	bl	8004968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800342c:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <prvAddNewTaskToReadyList+0xc4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	4a2c      	ldr	r2, [pc, #176]	@ (80034e4 <prvAddNewTaskToReadyList+0xc4>)
 8003434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003436:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800343e:	4a2a      	ldr	r2, [pc, #168]	@ (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <prvAddNewTaskToReadyList+0xc4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d110      	bne.n	800346e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800344c:	f000 fc5e 	bl	8003d0c <prvInitialiseTaskLists>
 8003450:	e00d      	b.n	800346e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003452:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <prvAddNewTaskToReadyList+0xcc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800345a:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	429a      	cmp	r2, r3
 8003466:	d802      	bhi.n	800346e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003468:	4a1f      	ldr	r2, [pc, #124]	@ (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800346e:	4b20      	ldr	r3, [pc, #128]	@ (80034f0 <prvAddNewTaskToReadyList+0xd0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <prvAddNewTaskToReadyList+0xd0>)
 8003476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003478:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <prvAddNewTaskToReadyList+0xd0>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <prvAddNewTaskToReadyList+0xd4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d903      	bls.n	8003494 <prvAddNewTaskToReadyList+0x74>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <prvAddNewTaskToReadyList+0xd4>)
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4a15      	ldr	r2, [pc, #84]	@ (80034f8 <prvAddNewTaskToReadyList+0xd8>)
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f7ff f901 	bl	80026b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b0:	f001 fa8c 	bl	80049cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034b4:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <prvAddNewTaskToReadyList+0xcc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <prvAddNewTaskToReadyList+0xc8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d207      	bcs.n	80034da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ca:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <prvAddNewTaskToReadyList+0xdc>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000ca8 	.word	0x20000ca8
 80034e8:	200007d4 	.word	0x200007d4
 80034ec:	20000cb4 	.word	0x20000cb4
 80034f0:	20000cc4 	.word	0x20000cc4
 80034f4:	20000cb0 	.word	0x20000cb0
 80034f8:	200007d8 	.word	0x200007d8
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003508:	f001 fa2e 	bl	8004968 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <vTaskSuspend+0x18>
 8003512:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <vTaskSuspend+0xd4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	e000      	b.n	800351a <vTaskSuspend+0x1a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3304      	adds	r3, #4
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff f923 	bl	800276c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3318      	adds	r3, #24
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f91a 	bl	800276c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4826      	ldr	r0, [pc, #152]	@ (80035d8 <vTaskSuspend+0xd8>)
 8003540:	f7ff f8b7 	bl	80026b2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d103      	bne.n	8003558 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003558:	f001 fa38 	bl	80049cc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <vTaskSuspend+0xdc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003564:	f001 fa00 	bl	8004968 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003568:	f000 fc6e 	bl	8003e48 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800356c:	f001 fa2e 	bl	80049cc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003570:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <vTaskSuspend+0xd4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	429a      	cmp	r2, r3
 8003578:	d128      	bne.n	80035cc <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <vTaskSuspend+0xdc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d018      	beq.n	80035b4 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003582:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <vTaskSuspend+0xe0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <vTaskSuspend+0xa2>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60bb      	str	r3, [r7, #8]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <vTaskSuspend+0xe4>)
 80035a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035b2:	e00b      	b.n	80035cc <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80035b4:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <vTaskSuspend+0xd8>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <vTaskSuspend+0xe8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d103      	bne.n	80035c8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <vTaskSuspend+0xd4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
	}
 80035c6:	e001      	b.n	80035cc <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80035c8:	f000 f9ee 	bl	80039a8 <vTaskSwitchContext>
	}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200007d4 	.word	0x200007d4
 80035d8:	20000c94 	.word	0x20000c94
 80035dc:	20000cb4 	.word	0x20000cb4
 80035e0:	20000cd0 	.word	0x20000cd0
 80035e4:	e000ed04 	.word	0xe000ed04
 80035e8:	20000ca8 	.word	0x20000ca8

080035ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035fa:	463a      	mov	r2, r7
 80035fc:	1d39      	adds	r1, r7, #4
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fff4 	bl	80025f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	9202      	str	r2, [sp, #8]
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2300      	movs	r3, #0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	460a      	mov	r2, r1
 800361a:	4922      	ldr	r1, [pc, #136]	@ (80036a4 <vTaskStartScheduler+0xb8>)
 800361c:	4822      	ldr	r0, [pc, #136]	@ (80036a8 <vTaskStartScheduler+0xbc>)
 800361e:	f7ff fdc9 	bl	80031b4 <xTaskCreateStatic>
 8003622:	4603      	mov	r3, r0
 8003624:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <vTaskStartScheduler+0xc0>)
 8003626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003628:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <vTaskStartScheduler+0xc0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e001      	b.n	800363a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d102      	bne.n	8003646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003640:	f000 fd04 	bl	800404c <xTimerCreateTimerTask>
 8003644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d116      	bne.n	800367a <vTaskStartScheduler+0x8e>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	613b      	str	r3, [r7, #16]
}
 800365e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003660:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <vTaskStartScheduler+0xc4>)
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <vTaskStartScheduler+0xc8>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800366e:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <vTaskStartScheduler+0xcc>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003674:	f001 f8d4 	bl	8004820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003678:	e00f      	b.n	800369a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d10b      	bne.n	800369a <vTaskStartScheduler+0xae>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60fb      	str	r3, [r7, #12]
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <vTaskStartScheduler+0xaa>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08005054 	.word	0x08005054
 80036a8:	08003cdd 	.word	0x08003cdd
 80036ac:	20000ccc 	.word	0x20000ccc
 80036b0:	20000cc8 	.word	0x20000cc8
 80036b4:	20000cb4 	.word	0x20000cb4
 80036b8:	20000cac 	.word	0x20000cac

080036bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036c0:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <vTaskSuspendAll+0x18>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a03      	ldr	r2, [pc, #12]	@ (80036d4 <vTaskSuspendAll+0x18>)
 80036c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	20000cd0 	.word	0x20000cd0

080036d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036e6:	4b42      	ldr	r3, [pc, #264]	@ (80037f0 <xTaskResumeAll+0x118>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10b      	bne.n	8003706 <xTaskResumeAll+0x2e>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	603b      	str	r3, [r7, #0]
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	e7fd      	b.n	8003702 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003706:	f001 f92f 	bl	8004968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800370a:	4b39      	ldr	r3, [pc, #228]	@ (80037f0 <xTaskResumeAll+0x118>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3b01      	subs	r3, #1
 8003710:	4a37      	ldr	r2, [pc, #220]	@ (80037f0 <xTaskResumeAll+0x118>)
 8003712:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003714:	4b36      	ldr	r3, [pc, #216]	@ (80037f0 <xTaskResumeAll+0x118>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d162      	bne.n	80037e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800371c:	4b35      	ldr	r3, [pc, #212]	@ (80037f4 <xTaskResumeAll+0x11c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05e      	beq.n	80037e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003724:	e02f      	b.n	8003786 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003726:	4b34      	ldr	r3, [pc, #208]	@ (80037f8 <xTaskResumeAll+0x120>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3318      	adds	r3, #24
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f81a 	bl	800276c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f815 	bl	800276c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003746:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <xTaskResumeAll+0x124>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d903      	bls.n	8003756 <xTaskResumeAll+0x7e>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	4a2a      	ldr	r2, [pc, #168]	@ (80037fc <xTaskResumeAll+0x124>)
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <xTaskResumeAll+0x128>)
 8003764:	441a      	add	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7fe ffa0 	bl	80026b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003776:	4b23      	ldr	r3, [pc, #140]	@ (8003804 <xTaskResumeAll+0x12c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <xTaskResumeAll+0x130>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003786:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <xTaskResumeAll+0x120>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1cb      	bne.n	8003726 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003794:	f000 fb58 	bl	8003e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003798:	4b1c      	ldr	r3, [pc, #112]	@ (800380c <xTaskResumeAll+0x134>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037a4:	f000 f846 	bl	8003834 <xTaskIncrementTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80037ae:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <xTaskResumeAll+0x130>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f1      	bne.n	80037a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80037c0:	4b12      	ldr	r3, [pc, #72]	@ (800380c <xTaskResumeAll+0x134>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <xTaskResumeAll+0x130>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037ce:	2301      	movs	r3, #1
 80037d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003810 <xTaskResumeAll+0x138>)
 80037d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037e2:	f001 f8f3 	bl	80049cc <vPortExitCritical>

	return xAlreadyYielded;
 80037e6:	68bb      	ldr	r3, [r7, #8]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000cd0 	.word	0x20000cd0
 80037f4:	20000ca8 	.word	0x20000ca8
 80037f8:	20000c68 	.word	0x20000c68
 80037fc:	20000cb0 	.word	0x20000cb0
 8003800:	200007d8 	.word	0x200007d8
 8003804:	200007d4 	.word	0x200007d4
 8003808:	20000cbc 	.word	0x20000cbc
 800380c:	20000cb8 	.word	0x20000cb8
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800381a:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <xTaskGetTickCount+0x1c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003820:	687b      	ldr	r3, [r7, #4]
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000cac 	.word	0x20000cac

08003834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383e:	4b4f      	ldr	r3, [pc, #316]	@ (800397c <xTaskIncrementTick+0x148>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 8090 	bne.w	8003968 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003848:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <xTaskIncrementTick+0x14c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003850:	4a4b      	ldr	r2, [pc, #300]	@ (8003980 <xTaskIncrementTick+0x14c>)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d121      	bne.n	80038a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800385c:	4b49      	ldr	r3, [pc, #292]	@ (8003984 <xTaskIncrementTick+0x150>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	603b      	str	r3, [r7, #0]
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <xTaskIncrementTick+0x46>
 800387e:	4b41      	ldr	r3, [pc, #260]	@ (8003984 <xTaskIncrementTick+0x150>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <xTaskIncrementTick+0x154>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3e      	ldr	r2, [pc, #248]	@ (8003984 <xTaskIncrementTick+0x150>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4a3e      	ldr	r2, [pc, #248]	@ (8003988 <xTaskIncrementTick+0x154>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b3e      	ldr	r3, [pc, #248]	@ (800398c <xTaskIncrementTick+0x158>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a3c      	ldr	r2, [pc, #240]	@ (800398c <xTaskIncrementTick+0x158>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	f000 fad4 	bl	8003e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <xTaskIncrementTick+0x15c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d349      	bcc.n	800393e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038aa:	4b36      	ldr	r3, [pc, #216]	@ (8003984 <xTaskIncrementTick+0x150>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b4:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <xTaskIncrementTick+0x15c>)
 80038b6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ba:	601a      	str	r2, [r3, #0]
					break;
 80038bc:	e03f      	b.n	800393e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038be:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <xTaskIncrementTick+0x150>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d203      	bcs.n	80038de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003990 <xTaskIncrementTick+0x15c>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038dc:	e02f      	b.n	800393e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe ff42 	bl	800276c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe ff39 	bl	800276c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fe:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <xTaskIncrementTick+0x160>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d903      	bls.n	800390e <xTaskIncrementTick+0xda>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	4a22      	ldr	r2, [pc, #136]	@ (8003994 <xTaskIncrementTick+0x160>)
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <xTaskIncrementTick+0x164>)
 800391c:	441a      	add	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3304      	adds	r3, #4
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fe fec4 	bl	80026b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392e:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <xTaskIncrementTick+0x168>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	429a      	cmp	r2, r3
 8003936:	d3b8      	bcc.n	80038aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800393c:	e7b5      	b.n	80038aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800393e:	4b17      	ldr	r3, [pc, #92]	@ (800399c <xTaskIncrementTick+0x168>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003944:	4914      	ldr	r1, [pc, #80]	@ (8003998 <xTaskIncrementTick+0x164>)
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d901      	bls.n	800395a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003956:	2301      	movs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800395a:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <xTaskIncrementTick+0x16c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e004      	b.n	8003972 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003968:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <xTaskIncrementTick+0x170>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <xTaskIncrementTick+0x170>)
 8003970:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003972:	697b      	ldr	r3, [r7, #20]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000cd0 	.word	0x20000cd0
 8003980:	20000cac 	.word	0x20000cac
 8003984:	20000c60 	.word	0x20000c60
 8003988:	20000c64 	.word	0x20000c64
 800398c:	20000cc0 	.word	0x20000cc0
 8003990:	20000cc8 	.word	0x20000cc8
 8003994:	20000cb0 	.word	0x20000cb0
 8003998:	200007d8 	.word	0x200007d8
 800399c:	200007d4 	.word	0x200007d4
 80039a0:	20000cbc 	.word	0x20000cbc
 80039a4:	20000cb8 	.word	0x20000cb8

080039a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ae:	4b28      	ldr	r3, [pc, #160]	@ (8003a50 <vTaskSwitchContext+0xa8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039b6:	4b27      	ldr	r3, [pc, #156]	@ (8003a54 <vTaskSwitchContext+0xac>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039bc:	e042      	b.n	8003a44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80039be:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <vTaskSwitchContext+0xac>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c4:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <vTaskSwitchContext+0xb0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e011      	b.n	80039f0 <vTaskSwitchContext+0x48>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <vTaskSwitchContext+0x42>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	607b      	str	r3, [r7, #4]
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	e7fd      	b.n	80039e6 <vTaskSwitchContext+0x3e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	491a      	ldr	r1, [pc, #104]	@ (8003a5c <vTaskSwitchContext+0xb4>)
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0e3      	beq.n	80039cc <vTaskSwitchContext+0x24>
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <vTaskSwitchContext+0xb4>)
 8003a10:	4413      	add	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3308      	adds	r3, #8
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d104      	bne.n	8003a34 <vTaskSwitchContext+0x8c>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <vTaskSwitchContext+0xb8>)
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4a06      	ldr	r2, [pc, #24]	@ (8003a58 <vTaskSwitchContext+0xb0>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000cd0 	.word	0x20000cd0
 8003a54:	20000cbc 	.word	0x20000cbc
 8003a58:	20000cb0 	.word	0x20000cb0
 8003a5c:	200007d8 	.word	0x200007d8
 8003a60:	200007d4 	.word	0x200007d4

08003a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60fb      	str	r3, [r7, #12]
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a8c:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <vTaskPlaceOnEventList+0x48>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fe fe30 	bl	80026fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	6838      	ldr	r0, [r7, #0]
 8003a9e:	f000 fa81 	bl	8003fa4 <prvAddCurrentTaskToDelayedList>
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200007d4 	.word	0x200007d4

08003ab0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	617b      	str	r3, [r7, #20]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <vTaskPlaceOnEventListRestricted+0x54>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3318      	adds	r3, #24
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7fe fde5 	bl	80026b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	68b8      	ldr	r0, [r7, #8]
 8003af8:	f000 fa54 	bl	8003fa4 <prvAddCurrentTaskToDelayedList>
	}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200007d4 	.word	0x200007d4

08003b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	60fb      	str	r3, [r7, #12]
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fe16 	bl	800276c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b40:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <xTaskRemoveFromEventList+0xb0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11d      	bne.n	8003b84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fe0d 	bl	800276c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b56:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <xTaskRemoveFromEventList+0xb4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d903      	bls.n	8003b66 <xTaskRemoveFromEventList+0x5e>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <xTaskRemoveFromEventList+0xb4>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a13      	ldr	r2, [pc, #76]	@ (8003bc0 <xTaskRemoveFromEventList+0xb8>)
 8003b74:	441a      	add	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fe fd98 	bl	80026b2 <vListInsertEnd>
 8003b82:	e005      	b.n	8003b90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	3318      	adds	r3, #24
 8003b88:	4619      	mov	r1, r3
 8003b8a:	480e      	ldr	r0, [pc, #56]	@ (8003bc4 <xTaskRemoveFromEventList+0xbc>)
 8003b8c:	f7fe fd91 	bl	80026b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <xTaskRemoveFromEventList+0xc0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d905      	bls.n	8003baa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <xTaskRemoveFromEventList+0xc4>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e001      	b.n	8003bae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bae:	697b      	ldr	r3, [r7, #20]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000cd0 	.word	0x20000cd0
 8003bbc:	20000cb0 	.word	0x20000cb0
 8003bc0:	200007d8 	.word	0x200007d8
 8003bc4:	20000c68 	.word	0x20000c68
 8003bc8:	200007d4 	.word	0x200007d4
 8003bcc:	20000cbc 	.word	0x20000cbc

08003bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <vTaskInternalSetTimeOutState+0x24>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003be0:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <vTaskInternalSetTimeOutState+0x28>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	605a      	str	r2, [r3, #4]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20000cc0 	.word	0x20000cc0
 8003bf8:	20000cac 	.word	0x20000cac

08003bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	613b      	str	r3, [r7, #16]
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fb      	str	r3, [r7, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c42:	f000 fe91 	bl	8004968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c46:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <xTaskCheckForTimeOut+0xc0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d102      	bne.n	8003c66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e023      	b.n	8003cae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b15      	ldr	r3, [pc, #84]	@ (8003cc0 <xTaskCheckForTimeOut+0xc4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d007      	beq.n	8003c82 <xTaskCheckForTimeOut+0x86>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e015      	b.n	8003cae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d20b      	bcs.n	8003ca4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff99 	bl	8003bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	e004      	b.n	8003cae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cae:	f000 fe8d 	bl	80049cc <vPortExitCritical>

	return xReturn;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000cac 	.word	0x20000cac
 8003cc0:	20000cc0 	.word	0x20000cc0

08003cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <vTaskMissedYield+0x14>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	20000cbc 	.word	0x20000cbc

08003cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ce4:	f000 f852 	bl	8003d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <prvIdleTask+0x28>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d9f9      	bls.n	8003ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cf0:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <prvIdleTask+0x2c>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d00:	e7f0      	b.n	8003ce4 <prvIdleTask+0x8>
 8003d02:	bf00      	nop
 8003d04:	200007d8 	.word	0x200007d8
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	e00c      	b.n	8003d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a12      	ldr	r2, [pc, #72]	@ (8003d6c <prvInitialiseTaskLists+0x60>)
 8003d24:	4413      	add	r3, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fc96 	bl	8002658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b37      	cmp	r3, #55	@ 0x37
 8003d36:	d9ef      	bls.n	8003d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d38:	480d      	ldr	r0, [pc, #52]	@ (8003d70 <prvInitialiseTaskLists+0x64>)
 8003d3a:	f7fe fc8d 	bl	8002658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d3e:	480d      	ldr	r0, [pc, #52]	@ (8003d74 <prvInitialiseTaskLists+0x68>)
 8003d40:	f7fe fc8a 	bl	8002658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d44:	480c      	ldr	r0, [pc, #48]	@ (8003d78 <prvInitialiseTaskLists+0x6c>)
 8003d46:	f7fe fc87 	bl	8002658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d4a:	480c      	ldr	r0, [pc, #48]	@ (8003d7c <prvInitialiseTaskLists+0x70>)
 8003d4c:	f7fe fc84 	bl	8002658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d50:	480b      	ldr	r0, [pc, #44]	@ (8003d80 <prvInitialiseTaskLists+0x74>)
 8003d52:	f7fe fc81 	bl	8002658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <prvInitialiseTaskLists+0x78>)
 8003d58:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <prvInitialiseTaskLists+0x64>)
 8003d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <prvInitialiseTaskLists+0x7c>)
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <prvInitialiseTaskLists+0x68>)
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200007d8 	.word	0x200007d8
 8003d70:	20000c38 	.word	0x20000c38
 8003d74:	20000c4c 	.word	0x20000c4c
 8003d78:	20000c68 	.word	0x20000c68
 8003d7c:	20000c7c 	.word	0x20000c7c
 8003d80:	20000c94 	.word	0x20000c94
 8003d84:	20000c60 	.word	0x20000c60
 8003d88:	20000c64 	.word	0x20000c64

08003d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d92:	e019      	b.n	8003dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d94:	f000 fde8 	bl	8004968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d98:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <prvCheckTasksWaitingTermination+0x50>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fce1 	bl	800276c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <prvCheckTasksWaitingTermination+0x54>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	4a0b      	ldr	r2, [pc, #44]	@ (8003de0 <prvCheckTasksWaitingTermination+0x54>)
 8003db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <prvCheckTasksWaitingTermination+0x58>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <prvCheckTasksWaitingTermination+0x58>)
 8003dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dbe:	f000 fe05 	bl	80049cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f810 	bl	8003de8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <prvCheckTasksWaitingTermination+0x58>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e1      	bne.n	8003d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000c7c 	.word	0x20000c7c
 8003de0:	20000ca8 	.word	0x20000ca8
 8003de4:	20000c90 	.word	0x20000c90

08003de8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 ffa2 	bl	8004d48 <vPortFree>
				vPortFree( pxTCB );
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 ff9f 	bl	8004d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e0a:	e019      	b.n	8003e40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d103      	bne.n	8003e1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 ff96 	bl	8004d48 <vPortFree>
	}
 8003e1c:	e010      	b.n	8003e40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d00b      	beq.n	8003e40 <prvDeleteTCB+0x58>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <prvDeleteTCB+0x54>
	}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <prvResetNextTaskUnblockTime+0x38>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <prvResetNextTaskUnblockTime+0x3c>)
 8003e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e60:	e008      	b.n	8003e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <prvResetNextTaskUnblockTime+0x38>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <prvResetNextTaskUnblockTime+0x3c>)
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000c60 	.word	0x20000c60
 8003e84:	20000cc8 	.word	0x20000cc8

08003e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <xTaskGetSchedulerState+0x34>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e96:	2301      	movs	r3, #1
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	e008      	b.n	8003eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <xTaskGetSchedulerState+0x38>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	e001      	b.n	8003eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eae:	687b      	ldr	r3, [r7, #4]
	}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000cb4 	.word	0x20000cb4
 8003ec0:	20000cd0 	.word	0x20000cd0

08003ec4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d058      	beq.n	8003f8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eda:	4b2f      	ldr	r3, [pc, #188]	@ (8003f98 <xTaskPriorityDisinherit+0xd4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d00b      	beq.n	8003efc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60fb      	str	r3, [r7, #12]
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	60bb      	str	r3, [r7, #8]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d02c      	beq.n	8003f8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d128      	bne.n	8003f8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fc14 	bl	800276c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <xTaskPriorityDisinherit+0xd8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d903      	bls.n	8003f6c <xTaskPriorityDisinherit+0xa8>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <xTaskPriorityDisinherit+0xd8>)
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <xTaskPriorityDisinherit+0xdc>)
 8003f7a:	441a      	add	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe fb95 	bl	80026b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f8c:	697b      	ldr	r3, [r7, #20]
	}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200007d4 	.word	0x200007d4
 8003f9c:	20000cb0 	.word	0x20000cb0
 8003fa0:	200007d8 	.word	0x200007d8

08003fa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fae:	4b21      	ldr	r3, [pc, #132]	@ (8004034 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fb4:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fbd6 	bl	800276c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d10a      	bne.n	8003fde <prvAddCurrentTaskToDelayedList+0x3a>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4819      	ldr	r0, [pc, #100]	@ (800403c <prvAddCurrentTaskToDelayedList+0x98>)
 8003fd8:	f7fe fb6b 	bl	80026b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fdc:	e026      	b.n	800402c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fe6:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d209      	bcs.n	800400a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fb79 	bl	80026fa <vListInsert>
}
 8004008:	e010      	b.n	800402c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800400a:	4b0e      	ldr	r3, [pc, #56]	@ (8004044 <prvAddCurrentTaskToDelayedList+0xa0>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <prvAddCurrentTaskToDelayedList+0x94>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fe fb6f 	bl	80026fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800401c:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <prvAddCurrentTaskToDelayedList+0xa4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	d202      	bcs.n	800402c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004026:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6013      	str	r3, [r2, #0]
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000cac 	.word	0x20000cac
 8004038:	200007d4 	.word	0x200007d4
 800403c:	20000c94 	.word	0x20000c94
 8004040:	20000c64 	.word	0x20000c64
 8004044:	20000c60 	.word	0x20000c60
 8004048:	20000cc8 	.word	0x20000cc8

0800404c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004056:	f000 fb13 	bl	8004680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <xTimerCreateTimerTask+0x84>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d021      	beq.n	80040a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800406a:	1d3a      	adds	r2, r7, #4
 800406c:	f107 0108 	add.w	r1, r7, #8
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fad5 	bl	8002624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	9202      	str	r2, [sp, #8]
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	2302      	movs	r3, #2
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	460a      	mov	r2, r1
 800408c:	4911      	ldr	r1, [pc, #68]	@ (80040d4 <xTimerCreateTimerTask+0x88>)
 800408e:	4812      	ldr	r0, [pc, #72]	@ (80040d8 <xTimerCreateTimerTask+0x8c>)
 8004090:	f7ff f890 	bl	80031b4 <xTaskCreateStatic>
 8004094:	4603      	mov	r3, r0
 8004096:	4a11      	ldr	r2, [pc, #68]	@ (80040dc <xTimerCreateTimerTask+0x90>)
 8004098:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800409a:	4b10      	ldr	r3, [pc, #64]	@ (80040dc <xTimerCreateTimerTask+0x90>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040a2:	2301      	movs	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	613b      	str	r3, [r7, #16]
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040c4:	697b      	ldr	r3, [r7, #20]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000d04 	.word	0x20000d04
 80040d4:	0800505c 	.word	0x0800505c
 80040d8:	08004219 	.word	0x08004219
 80040dc:	20000d08 	.word	0x20000d08

080040e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <xTimerGenericCommand+0x30>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004110:	4b19      	ldr	r3, [pc, #100]	@ (8004178 <xTimerGenericCommand+0x98>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02a      	beq.n	800416e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b05      	cmp	r3, #5
 8004128:	dc18      	bgt.n	800415c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800412a:	f7ff fead 	bl	8003e88 <xTaskGetSchedulerState>
 800412e:	4603      	mov	r3, r0
 8004130:	2b02      	cmp	r3, #2
 8004132:	d109      	bne.n	8004148 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004134:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <xTimerGenericCommand+0x98>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	f107 0110 	add.w	r1, r7, #16
 800413c:	2300      	movs	r3, #0
 800413e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004140:	f7fe fc48 	bl	80029d4 <xQueueGenericSend>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24
 8004146:	e012      	b.n	800416e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <xTimerGenericCommand+0x98>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	f107 0110 	add.w	r1, r7, #16
 8004150:	2300      	movs	r3, #0
 8004152:	2200      	movs	r2, #0
 8004154:	f7fe fc3e 	bl	80029d4 <xQueueGenericSend>
 8004158:	6278      	str	r0, [r7, #36]	@ 0x24
 800415a:	e008      	b.n	800416e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <xTimerGenericCommand+0x98>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	f107 0110 	add.w	r1, r7, #16
 8004164:	2300      	movs	r3, #0
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	f7fe fd36 	bl	8002bd8 <xQueueGenericSendFromISR>
 800416c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004170:	4618      	mov	r0, r3
 8004172:	3728      	adds	r7, #40	@ 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000d04 	.word	0x20000d04

0800417c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004186:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <prvProcessExpiredTimer+0x98>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3304      	adds	r3, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fae9 	bl	800276c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d023      	beq.n	80041f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	18d1      	adds	r1, r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	f000 f8d5 	bl	8004364 <prvInsertTimerInActiveList>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	2100      	movs	r1, #0
 80041ca:	6978      	ldr	r0, [r7, #20]
 80041cc:	f7ff ff88 	bl	80040e0 <xTimerGenericCommand>
 80041d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d114      	bne.n	8004202 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	60fb      	str	r3, [r7, #12]
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	6978      	ldr	r0, [r7, #20]
 8004208:	4798      	blx	r3
}
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000cfc 	.word	0x20000cfc

08004218 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f859 	bl	80042dc <prvGetNextExpireTime>
 800422a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4619      	mov	r1, r3
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f805 	bl	8004240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004236:	f000 f8d7 	bl	80043e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800423a:	bf00      	nop
 800423c:	e7f0      	b.n	8004220 <prvTimerTask+0x8>
	...

08004240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800424a:	f7ff fa37 	bl	80036bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f866 	bl	8004324 <prvSampleTimeNow>
 8004258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d130      	bne.n	80042c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <prvProcessTimerOrBlockTask+0x3c>
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	429a      	cmp	r2, r3
 800426c:	d806      	bhi.n	800427c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800426e:	f7ff fa33 	bl	80036d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ff81 	bl	800417c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800427a:	e024      	b.n	80042c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004282:	4b13      	ldr	r3, [pc, #76]	@ (80042d0 <prvProcessTimerOrBlockTask+0x90>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <prvProcessTimerOrBlockTask+0x50>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <prvProcessTimerOrBlockTask+0x52>
 8004290:	2300      	movs	r3, #0
 8004292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004294:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <prvProcessTimerOrBlockTask+0x94>)
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7fe ff53 	bl	800314c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042a6:	f7ff fa17 	bl	80036d8 <xTaskResumeAll>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042b0:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <prvProcessTimerOrBlockTask+0x98>)
 80042b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
}
 80042c0:	e001      	b.n	80042c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042c2:	f7ff fa09 	bl	80036d8 <xTaskResumeAll>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000d00 	.word	0x20000d00
 80042d4:	20000d04 	.word	0x20000d04
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <prvGetNextExpireTime+0x44>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <prvGetNextExpireTime+0x16>
 80042ee:	2201      	movs	r2, #1
 80042f0:	e000      	b.n	80042f4 <prvGetNextExpireTime+0x18>
 80042f2:	2200      	movs	r2, #0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <prvGetNextExpireTime+0x44>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e001      	b.n	8004310 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004310:	68fb      	ldr	r3, [r7, #12]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000cfc 	.word	0x20000cfc

08004324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800432c:	f7ff fa72 	bl	8003814 <xTaskGetTickCount>
 8004330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004332:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <prvSampleTimeNow+0x3c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	429a      	cmp	r2, r3
 800433a:	d205      	bcs.n	8004348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800433c:	f000 f93a 	bl	80045b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e002      	b.n	800434e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800434e:	4a04      	ldr	r2, [pc, #16]	@ (8004360 <prvSampleTimeNow+0x3c>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004354:	68fb      	ldr	r3, [r7, #12]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000d0c 	.word	0x20000d0c

08004364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d812      	bhi.n	80043b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e01b      	b.n	80043d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <prvInsertTimerInActiveList+0x7c>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe f9a6 	bl	80026fa <vListInsert>
 80043ae:	e012      	b.n	80043d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d206      	bcs.n	80043c6 <prvInsertTimerInActiveList+0x62>
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e007      	b.n	80043d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043c6:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <prvInsertTimerInActiveList+0x80>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7fe f992 	bl	80026fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043d6:	697b      	ldr	r3, [r7, #20]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000d00 	.word	0x20000d00
 80043e4:	20000cfc 	.word	0x20000cfc

080043e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08e      	sub	sp, #56	@ 0x38
 80043ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ee:	e0ce      	b.n	800458e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da19      	bge.n	800442a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	3304      	adds	r3, #4
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10b      	bne.n	800441a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	61fb      	str	r3, [r7, #28]
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	e7fd      	b.n	8004416 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800441a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004420:	6850      	ldr	r0, [r2, #4]
 8004422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	4611      	mov	r1, r2
 8004428:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f2c0 80ae 	blt.w	800458e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f992 	bl	800276c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004448:	463b      	mov	r3, r7
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff6a 	bl	8004324 <prvSampleTimeNow>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b09      	cmp	r3, #9
 8004456:	f200 8097 	bhi.w	8004588 <prvProcessReceivedCommands+0x1a0>
 800445a:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <prvProcessReceivedCommands+0x78>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004489 	.word	0x08004489
 8004464:	08004489 	.word	0x08004489
 8004468:	08004489 	.word	0x08004489
 800446c:	080044ff 	.word	0x080044ff
 8004470:	08004513 	.word	0x08004513
 8004474:	0800455f 	.word	0x0800455f
 8004478:	08004489 	.word	0x08004489
 800447c:	08004489 	.word	0x08004489
 8004480:	080044ff 	.word	0x080044ff
 8004484:	08004513 	.word	0x08004513
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	18d1      	adds	r1, r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a8:	f7ff ff5c 	bl	8004364 <prvInsertTimerInActiveList>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d06c      	beq.n	800458c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d061      	beq.n	800458c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	441a      	add	r2, r3
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044da:	f7ff fe01 	bl	80040e0 <xTimerGenericCommand>
 80044de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d152      	bne.n	800458c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	61bb      	str	r3, [r7, #24]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	b2da      	uxtb	r2, r3
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004510:	e03d      	b.n	800458e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	b2da      	uxtb	r2, r3
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	617b      	str	r3, [r7, #20]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	18d1      	adds	r1, r2, r3
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004558:	f7ff ff04 	bl	8004364 <prvInsertTimerInActiveList>
					break;
 800455c:	e017      	b.n	800458e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800456c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800456e:	f000 fbeb 	bl	8004d48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004572:	e00c      	b.n	800458e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004586:	e002      	b.n	800458e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004588:	bf00      	nop
 800458a:	e000      	b.n	800458e <prvProcessReceivedCommands+0x1a6>
					break;
 800458c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800458e:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <prvProcessReceivedCommands+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	1d39      	adds	r1, r7, #4
 8004594:	2200      	movs	r2, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe fbbc 	bl	8002d14 <xQueueReceive>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f47f af26 	bne.w	80043f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3730      	adds	r7, #48	@ 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000d04 	.word	0x20000d04

080045b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ba:	e049      	b.n	8004650 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004678 <prvSwitchTimerLists+0xc4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <prvSwitchTimerLists+0xc4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f8c9 	bl	800276c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02f      	beq.n	8004650 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d90e      	bls.n	8004620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800460e:	4b1a      	ldr	r3, [pc, #104]	@ (8004678 <prvSwitchTimerLists+0xc4>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe f86e 	bl	80026fa <vListInsert>
 800461e:	e017      	b.n	8004650 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004620:	2300      	movs	r3, #0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	2100      	movs	r1, #0
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7ff fd58 	bl	80040e0 <xTimerGenericCommand>
 8004630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	603b      	str	r3, [r7, #0]
}
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004650:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <prvSwitchTimerLists+0xc4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1b0      	bne.n	80045bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800465a:	4b07      	ldr	r3, [pc, #28]	@ (8004678 <prvSwitchTimerLists+0xc4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <prvSwitchTimerLists+0xc8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <prvSwitchTimerLists+0xc4>)
 8004666:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004668:	4a04      	ldr	r2, [pc, #16]	@ (800467c <prvSwitchTimerLists+0xc8>)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6013      	str	r3, [r2, #0]
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000cfc 	.word	0x20000cfc
 800467c:	20000d00 	.word	0x20000d00

08004680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004686:	f000 f96f 	bl	8004968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800468a:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <prvCheckForValidListAndQueue+0x60>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d120      	bne.n	80046d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004692:	4814      	ldr	r0, [pc, #80]	@ (80046e4 <prvCheckForValidListAndQueue+0x64>)
 8004694:	f7fd ffe0 	bl	8002658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004698:	4813      	ldr	r0, [pc, #76]	@ (80046e8 <prvCheckForValidListAndQueue+0x68>)
 800469a:	f7fd ffdd 	bl	8002658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800469e:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <prvCheckForValidListAndQueue+0x6c>)
 80046a0:	4a10      	ldr	r2, [pc, #64]	@ (80046e4 <prvCheckForValidListAndQueue+0x64>)
 80046a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046a4:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <prvCheckForValidListAndQueue+0x70>)
 80046a6:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <prvCheckForValidListAndQueue+0x68>)
 80046a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <prvCheckForValidListAndQueue+0x74>)
 80046b0:	4a11      	ldr	r2, [pc, #68]	@ (80046f8 <prvCheckForValidListAndQueue+0x78>)
 80046b2:	2110      	movs	r1, #16
 80046b4:	200a      	movs	r0, #10
 80046b6:	f7fe f8ed 	bl	8002894 <xQueueGenericCreateStatic>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <prvCheckForValidListAndQueue+0x60>)
 80046be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <prvCheckForValidListAndQueue+0x60>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <prvCheckForValidListAndQueue+0x60>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	490b      	ldr	r1, [pc, #44]	@ (80046fc <prvCheckForValidListAndQueue+0x7c>)
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fd12 	bl	80030f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046d4:	f000 f97a 	bl	80049cc <vPortExitCritical>
}
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000d04 	.word	0x20000d04
 80046e4:	20000cd4 	.word	0x20000cd4
 80046e8:	20000ce8 	.word	0x20000ce8
 80046ec:	20000cfc 	.word	0x20000cfc
 80046f0:	20000d00 	.word	0x20000d00
 80046f4:	20000db0 	.word	0x20000db0
 80046f8:	20000d10 	.word	0x20000d10
 80046fc:	08005064 	.word	0x08005064

08004700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3b04      	subs	r3, #4
 8004710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3b04      	subs	r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3b04      	subs	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004730:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <pxPortInitialiseStack+0x64>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3b14      	subs	r3, #20
 800473a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b04      	subs	r3, #4
 8004746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f06f 0202 	mvn.w	r2, #2
 800474e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b20      	subs	r3, #32
 8004754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	08004769 	.word	0x08004769

08004768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004772:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <prvTaskExitError+0x58>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d00b      	beq.n	8004794 <prvTaskExitError+0x2c>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60fb      	str	r3, [r7, #12]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <prvTaskExitError+0x28>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60bb      	str	r3, [r7, #8]
}
 80047a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047a8:	bf00      	nop
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0fc      	beq.n	80047aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000000c 	.word	0x2000000c
	...

080047d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047d0:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <pxCurrentTCBConst2>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	f380 8809 	msr	PSP, r0
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8811 	msr	BASEPRI, r0
 80047ea:	4770      	bx	lr
 80047ec:	f3af 8000 	nop.w

080047f0 <pxCurrentTCBConst2>:
 80047f0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop

080047f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047f8:	4808      	ldr	r0, [pc, #32]	@ (800481c <prvPortStartFirstTask+0x24>)
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	6800      	ldr	r0, [r0, #0]
 80047fe:	f380 8808 	msr	MSP, r0
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8814 	msr	CONTROL, r0
 800480a:	b662      	cpsie	i
 800480c:	b661      	cpsie	f
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	df00      	svc	0
 8004818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800481a:	bf00      	nop
 800481c:	e000ed08 	.word	0xe000ed08

08004820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004826:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <xPortStartScheduler+0x124>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a47      	ldr	r2, [pc, #284]	@ (8004948 <xPortStartScheduler+0x128>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10b      	bne.n	8004848 <xPortStartScheduler+0x28>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60fb      	str	r3, [r7, #12]
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004848:	4b3e      	ldr	r3, [pc, #248]	@ (8004944 <xPortStartScheduler+0x124>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a3f      	ldr	r2, [pc, #252]	@ (800494c <xPortStartScheduler+0x12c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10b      	bne.n	800486a <xPortStartScheduler+0x4a>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	613b      	str	r3, [r7, #16]
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800486a:	4b39      	ldr	r3, [pc, #228]	@ (8004950 <xPortStartScheduler+0x130>)
 800486c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	22ff      	movs	r2, #255	@ 0xff
 800487a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4b31      	ldr	r3, [pc, #196]	@ (8004954 <xPortStartScheduler+0x134>)
 8004890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <xPortStartScheduler+0x138>)
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004898:	e009      	b.n	80048ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800489a:	4b2f      	ldr	r3, [pc, #188]	@ (8004958 <xPortStartScheduler+0x138>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004958 <xPortStartScheduler+0x138>)
 80048a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b6:	2b80      	cmp	r3, #128	@ 0x80
 80048b8:	d0ef      	beq.n	800489a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ba:	4b27      	ldr	r3, [pc, #156]	@ (8004958 <xPortStartScheduler+0x138>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1c3 0307 	rsb	r3, r3, #7
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00b      	beq.n	80048de <xPortStartScheduler+0xbe>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60bb      	str	r3, [r7, #8]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048de:	4b1e      	ldr	r3, [pc, #120]	@ (8004958 <xPortStartScheduler+0x138>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004958 <xPortStartScheduler+0x138>)
 80048e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <xPortStartScheduler+0x138>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048f0:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <xPortStartScheduler+0x138>)
 80048f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048fc:	4b17      	ldr	r3, [pc, #92]	@ (800495c <xPortStartScheduler+0x13c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a16      	ldr	r2, [pc, #88]	@ (800495c <xPortStartScheduler+0x13c>)
 8004902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004908:	4b14      	ldr	r3, [pc, #80]	@ (800495c <xPortStartScheduler+0x13c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a13      	ldr	r2, [pc, #76]	@ (800495c <xPortStartScheduler+0x13c>)
 800490e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004914:	f000 f8da 	bl	8004acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <xPortStartScheduler+0x140>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800491e:	f000 f8f9 	bl	8004b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004922:	4b10      	ldr	r3, [pc, #64]	@ (8004964 <xPortStartScheduler+0x144>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0f      	ldr	r2, [pc, #60]	@ (8004964 <xPortStartScheduler+0x144>)
 8004928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800492c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800492e:	f7ff ff63 	bl	80047f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004932:	f7ff f839 	bl	80039a8 <vTaskSwitchContext>
	prvTaskExitError();
 8004936:	f7ff ff17 	bl	8004768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	e000ed00 	.word	0xe000ed00
 8004948:	410fc271 	.word	0x410fc271
 800494c:	410fc270 	.word	0x410fc270
 8004950:	e000e400 	.word	0xe000e400
 8004954:	20000e00 	.word	0x20000e00
 8004958:	20000e04 	.word	0x20000e04
 800495c:	e000ed20 	.word	0xe000ed20
 8004960:	2000000c 	.word	0x2000000c
 8004964:	e000ef34 	.word	0xe000ef34

08004968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004982:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <vPortEnterCritical+0x5c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	4a0e      	ldr	r2, [pc, #56]	@ (80049c4 <vPortEnterCritical+0x5c>)
 800498a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800498c:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <vPortEnterCritical+0x5c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d110      	bne.n	80049b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004994:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <vPortEnterCritical+0x60>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	603b      	str	r3, [r7, #0]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <vPortEnterCritical+0x4a>
	}
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049d2:	4b12      	ldr	r3, [pc, #72]	@ (8004a1c <vPortExitCritical+0x50>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <vPortExitCritical+0x26>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	607b      	str	r3, [r7, #4]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049f2:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <vPortExitCritical+0x50>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <vPortExitCritical+0x50>)
 80049fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <vPortExitCritical+0x50>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <vPortExitCritical+0x44>
 8004a04:	2300      	movs	r3, #0
 8004a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f383 8811 	msr	BASEPRI, r3
}
 8004a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a20:	f3ef 8009 	mrs	r0, PSP
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <pxCurrentTCBConst>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f01e 0f10 	tst.w	lr, #16
 8004a30:	bf08      	it	eq
 8004a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a44:	f380 8811 	msr	BASEPRI, r0
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f7fe ffaa 	bl	80039a8 <vTaskSwitchContext>
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f380 8811 	msr	BASEPRI, r0
 8004a5c:	bc09      	pop	{r0, r3}
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	f01e 0f10 	tst.w	lr, #16
 8004a6a:	bf08      	it	eq
 8004a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a70:	f380 8809 	msr	PSP, r0
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	f3af 8000 	nop.w

08004a80 <pxCurrentTCBConst>:
 8004a80:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop

08004a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004aa2:	f7fe fec7 	bl	8003834 <xTaskIncrementTick>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aac:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <xPortSysTickHandler+0x40>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f383 8811 	msr	BASEPRI, r3
}
 8004abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <vPortSetupTimerInterrupt+0x34>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <vPortSetupTimerInterrupt+0x38>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <vPortSetupTimerInterrupt+0x3c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <vPortSetupTimerInterrupt+0x40>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	4a09      	ldr	r2, [pc, #36]	@ (8004b10 <vPortSetupTimerInterrupt+0x44>)
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004aee:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <vPortSetupTimerInterrupt+0x34>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010
 8004b04:	e000e018 	.word	0xe000e018
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	10624dd3 	.word	0x10624dd3
 8004b10:	e000e014 	.word	0xe000e014

08004b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b24 <vPortEnableVFP+0x10>
 8004b18:	6801      	ldr	r1, [r0, #0]
 8004b1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b1e:	6001      	str	r1, [r0, #0]
 8004b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b22:	bf00      	nop
 8004b24:	e000ed88 	.word	0xe000ed88

08004b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b2e:	f3ef 8305 	mrs	r3, IPSR
 8004b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d915      	bls.n	8004b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b3a:	4a18      	ldr	r2, [pc, #96]	@ (8004b9c <vPortValidateInterruptPriority+0x74>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b44:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <vPortValidateInterruptPriority+0x78>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	7afa      	ldrb	r2, [r7, #11]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d20b      	bcs.n	8004b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <vPortValidateInterruptPriority+0x7c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <vPortValidateInterruptPriority+0x80>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d90b      	bls.n	8004b8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	603b      	str	r3, [r7, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <vPortValidateInterruptPriority+0x62>
	}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000e3f0 	.word	0xe000e3f0
 8004ba0:	20000e00 	.word	0x20000e00
 8004ba4:	e000ed0c 	.word	0xe000ed0c
 8004ba8:	20000e04 	.word	0x20000e04

08004bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb8:	f7fe fd80 	bl	80036bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8004d30 <pvPortMalloc+0x184>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bc4:	f000 f924 	bl	8004e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d34 <pvPortMalloc+0x188>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 8095 	bne.w	8004d00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01e      	beq.n	8004c1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004bdc:	2208      	movs	r2, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d015      	beq.n	8004c1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f023 0307 	bic.w	r3, r3, #7
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <pvPortMalloc+0x6e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	617b      	str	r3, [r7, #20]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d06f      	beq.n	8004d00 <pvPortMalloc+0x154>
 8004c20:	4b45      	ldr	r3, [pc, #276]	@ (8004d38 <pvPortMalloc+0x18c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d86a      	bhi.n	8004d00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c2a:	4b44      	ldr	r3, [pc, #272]	@ (8004d3c <pvPortMalloc+0x190>)
 8004c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c2e:	4b43      	ldr	r3, [pc, #268]	@ (8004d3c <pvPortMalloc+0x190>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c34:	e004      	b.n	8004c40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d903      	bls.n	8004c52 <pvPortMalloc+0xa6>
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f1      	bne.n	8004c36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c52:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <pvPortMalloc+0x184>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d051      	beq.n	8004d00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4413      	add	r3, r2
 8004c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	2308      	movs	r3, #8
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d920      	bls.n	8004cc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <pvPortMalloc+0xfc>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	e7fd      	b.n	8004ca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cba:	69b8      	ldr	r0, [r7, #24]
 8004cbc:	f000 f90a 	bl	8004ed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d38 <pvPortMalloc+0x18c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <pvPortMalloc+0x18c>)
 8004ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cce:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <pvPortMalloc+0x18c>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <pvPortMalloc+0x194>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d203      	bcs.n	8004ce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cda:	4b17      	ldr	r3, [pc, #92]	@ (8004d38 <pvPortMalloc+0x18c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <pvPortMalloc+0x194>)
 8004ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4b13      	ldr	r3, [pc, #76]	@ (8004d34 <pvPortMalloc+0x188>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cf6:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <pvPortMalloc+0x198>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	4a11      	ldr	r2, [pc, #68]	@ (8004d44 <pvPortMalloc+0x198>)
 8004cfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d00:	f7fe fcea 	bl	80036d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <pvPortMalloc+0x17a>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <pvPortMalloc+0x176>
	return pvReturn;
 8004d26:	69fb      	ldr	r3, [r7, #28]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3728      	adds	r7, #40	@ 0x28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20004a10 	.word	0x20004a10
 8004d34:	20004a24 	.word	0x20004a24
 8004d38:	20004a14 	.word	0x20004a14
 8004d3c:	20004a08 	.word	0x20004a08
 8004d40:	20004a18 	.word	0x20004a18
 8004d44:	20004a1c 	.word	0x20004a1c

08004d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d04f      	beq.n	8004dfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	425b      	negs	r3, r3
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <vPortFree+0xbc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <vPortFree+0x46>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60fb      	str	r3, [r7, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <vPortFree+0x66>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60bb      	str	r3, [r7, #8]
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	4b14      	ldr	r3, [pc, #80]	@ (8004e04 <vPortFree+0xbc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01e      	beq.n	8004dfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d11a      	bne.n	8004dfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <vPortFree+0xbc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dd4:	f7fe fc72 	bl	80036bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <vPortFree+0xc0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4413      	add	r3, r2
 8004de2:	4a09      	ldr	r2, [pc, #36]	@ (8004e08 <vPortFree+0xc0>)
 8004de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004de6:	6938      	ldr	r0, [r7, #16]
 8004de8:	f000 f874 	bl	8004ed4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <vPortFree+0xc4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	4a06      	ldr	r2, [pc, #24]	@ (8004e0c <vPortFree+0xc4>)
 8004df4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004df6:	f7fe fc6f 	bl	80036d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dfa:	bf00      	nop
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20004a24 	.word	0x20004a24
 8004e08:	20004a14 	.word	0x20004a14
 8004e0c:	20004a20 	.word	0x20004a20

08004e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e1c:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <prvHeapInit+0xac>)
 8004e1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3307      	adds	r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <prvHeapInit+0xac>)
 8004e40:	4413      	add	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <prvHeapInit+0xb0>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <prvHeapInit+0xb0>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4413      	add	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0307 	bic.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a15      	ldr	r2, [pc, #84]	@ (8004ec4 <prvHeapInit+0xb4>)
 8004e70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e72:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <prvHeapInit+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <prvHeapInit+0xb4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <prvHeapInit+0xb4>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <prvHeapInit+0xb8>)
 8004e9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <prvHeapInit+0xbc>)
 8004ea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ea8:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <prvHeapInit+0xc0>)
 8004eaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004eae:	601a      	str	r2, [r3, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000e08 	.word	0x20000e08
 8004ec0:	20004a08 	.word	0x20004a08
 8004ec4:	20004a10 	.word	0x20004a10
 8004ec8:	20004a18 	.word	0x20004a18
 8004ecc:	20004a14 	.word	0x20004a14
 8004ed0:	20004a24 	.word	0x20004a24

08004ed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004edc:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <prvInsertBlockIntoFreeList+0xac>)
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e002      	b.n	8004ee8 <prvInsertBlockIntoFreeList+0x14>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d8f7      	bhi.n	8004ee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4413      	add	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d108      	bne.n	8004f16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	441a      	add	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d118      	bne.n	8004f5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <prvInsertBlockIntoFreeList+0xb0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d00d      	beq.n	8004f52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	441a      	add	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e008      	b.n	8004f64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f52:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <prvInsertBlockIntoFreeList+0xb0>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e003      	b.n	8004f64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d002      	beq.n	8004f72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20004a08 	.word	0x20004a08
 8004f84:	20004a10 	.word	0x20004a10

08004f88 <memset>:
 8004f88:	4402      	add	r2, r0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d100      	bne.n	8004f92 <memset+0xa>
 8004f90:	4770      	bx	lr
 8004f92:	f803 1b01 	strb.w	r1, [r3], #1
 8004f96:	e7f9      	b.n	8004f8c <memset+0x4>

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	@ (8004fdc <__libc_init_array+0x44>)
 8004fac:	f000 f826 	bl	8004ffc <_init>
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	0800508c 	.word	0x0800508c
 8004fd4:	0800508c 	.word	0x0800508c
 8004fd8:	0800508c 	.word	0x0800508c
 8004fdc:	08005090 	.word	0x08005090

08004fe0 <memcpy>:
 8004fe0:	440a      	add	r2, r1
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fe8:	d100      	bne.n	8004fec <memcpy+0xc>
 8004fea:	4770      	bx	lr
 8004fec:	b510      	push	{r4, lr}
 8004fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	d1f9      	bne.n	8004fee <memcpy+0xe>
 8004ffa:	bd10      	pop	{r4, pc}

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
