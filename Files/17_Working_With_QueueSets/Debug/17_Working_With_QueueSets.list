
17_Working_With_QueueSets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006078  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006248  08006248  00007248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006334  08006334  00007334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006338  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b5c  2000006c  080063a4  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc8  080063a4  00008bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017686  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f6  00000000  00000000  0001f722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00022c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001076  00000000  00000000  00024150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b34  00000000  00000000  000251c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017756  00000000  00000000  00029cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd218  00000000  00000000  00041450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  0011e6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001247ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006230 	.word	0x08006230

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006230 	.word	0x08006230

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:




int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8


  HAL_Init();
 80005e2:	f000 fb83 	bl	8000cec <HAL_Init>
  SystemClock_Config();
 80005e6:	f000 f8d9 	bl	800079c <SystemClock_Config>
  MX_GPIO_Init();
 80005ea:	f000 f961 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f935 	bl	800085c <MX_USART2_UART_Init>

  printf("System Initializing.....\n\r"); // To check if our UART is fine or not
 80005f2:	4825      	ldr	r0, [pc, #148]	@ (8000688 <main+0xac>)
 80005f4:	f004 ffa2 	bl	800553c <iprintf>

  //Create two queues, each sends a character pointer

  xQueue1 = xQueueCreate(1, sizeof(char *));
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	2001      	movs	r0, #1
 80005fe:	f002 fb00 	bl	8002c02 <xQueueGenericCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <main+0xb0>)
 8000606:	6013      	str	r3, [r2, #0]
  xQueue2 = xQueueCreate(1, sizeof(char *));
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	2001      	movs	r0, #1
 800060e:	f002 faf8 	bl	8002c02 <xQueueGenericCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <main+0xb4>)
 8000616:	6013      	str	r3, [r2, #0]

  //Create a Queue Set to hold 2 queues
  //Each queue hold 1 element
  xQueueSet = xQueueCreateSet(1 * 2);
 8000618:	2002      	movs	r0, #2
 800061a:	f002 ff85 	bl	8003528 <xQueueCreateSet>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <main+0xb8>)
 8000622:	6013      	str	r3, [r2, #0]

  //Add the two queues to the queue set
  xQueueAddToSet(xQueue1, xQueueSet);
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <main+0xb0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1a      	ldr	r2, [pc, #104]	@ (8000694 <main+0xb8>)
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f002 ff89 	bl	8003546 <xQueueAddToSet>
  xQueueAddToSet(xQueue2, xQueueSet);
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <main+0xb4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <main+0xb8>)
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 ff81 	bl	8003546 <xQueueAddToSet>

  //Create two sender task , with the same priority of 1
  xTaskCreate( vSenderTask1, "Sender 1", 100, NULL, 1, NULL);
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	2264      	movs	r2, #100	@ 0x64
 8000650:	4911      	ldr	r1, [pc, #68]	@ (8000698 <main+0xbc>)
 8000652:	4812      	ldr	r0, [pc, #72]	@ (800069c <main+0xc0>)
 8000654:	f003 f866 	bl	8003724 <xTaskCreate>
  xTaskCreate( vSenderTask2, "Sender 2", 100, NULL, 1, NULL);
 8000658:	2300      	movs	r3, #0
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2301      	movs	r3, #1
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	2264      	movs	r2, #100	@ 0x64
 8000664:	490e      	ldr	r1, [pc, #56]	@ (80006a0 <main+0xc4>)
 8000666:	480f      	ldr	r0, [pc, #60]	@ (80006a4 <main+0xc8>)
 8000668:	f003 f85c 	bl	8003724 <xTaskCreate>

  //Create a Receiving task, with a higher priority of 2
  xTaskCreate(vReceiverTask, "Receiver", 100, NULL, 2, NULL);
 800066c:	2300      	movs	r3, #0
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2302      	movs	r3, #2
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2264      	movs	r2, #100	@ 0x64
 8000678:	490b      	ldr	r1, [pc, #44]	@ (80006a8 <main+0xcc>)
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <main+0xd0>)
 800067c:	f003 f852 	bl	8003724 <xTaskCreate>

  vTaskStartScheduler();
 8000680:	f003 f9cc 	bl	8003a1c <vTaskStartScheduler>

  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <main+0xa8>
 8000688:	08006248 	.word	0x08006248
 800068c:	200000d0 	.word	0x200000d0
 8000690:	200000d4 	.word	0x200000d4
 8000694:	200000d8 	.word	0x200000d8
 8000698:	08006264 	.word	0x08006264
 800069c:	080006b1 	.word	0x080006b1
 80006a0:	08006270 	.word	0x08006270
 80006a4:	080006e5 	.word	0x080006e5
 80006a8:	0800627c 	.word	0x0800627c
 80006ac:	08000719 	.word	0x08000719

080006b0 <vSenderTask1>:
  }

}

void vSenderTask1( void *pvParameters)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	const TickType_t xBlockTime = pdMS_TO_TICKS(100);
 80006b8:	2364      	movs	r3, #100	@ 0x64
 80006ba:	60fb      	str	r3, [r7, #12]
	char * const msg = "Message from vSenderTask1\r\n";
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <vSenderTask1+0x2c>)
 80006be:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//Block for 100ms
		vTaskDelay( xBlockTime );
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f003 f975 	bl	80039b0 <vTaskDelay>

		//Send the string "msg" to xQueue1
		xQueueSend( xQueue1, &msg, 0);
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <vSenderTask1+0x30>)
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	f107 0108 	add.w	r1, r7, #8
 80006ce:	2300      	movs	r3, #0
 80006d0:	2200      	movs	r2, #0
 80006d2:	f002 faf7 	bl	8002cc4 <xQueueGenericSend>
		vTaskDelay( xBlockTime );
 80006d6:	bf00      	nop
 80006d8:	e7f2      	b.n	80006c0 <vSenderTask1+0x10>
 80006da:	bf00      	nop
 80006dc:	08006288 	.word	0x08006288
 80006e0:	200000d0 	.word	0x200000d0

080006e4 <vSenderTask2>:

	}
}

void vSenderTask2( void *pvParameters)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	const TickType_t xBlockTime = pdMS_TO_TICKS(200);
 80006ec:	23c8      	movs	r3, #200	@ 0xc8
 80006ee:	60fb      	str	r3, [r7, #12]
	char * const msg = "Message from vSenderTask2\r\n";
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <vSenderTask2+0x2c>)
 80006f2:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//Block for 100ms
		vTaskDelay( xBlockTime );
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f003 f95b 	bl	80039b0 <vTaskDelay>

		//Send the string "msg" to xQueue1
		xQueueSend( xQueue2, &msg, 0);
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <vSenderTask2+0x30>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	f107 0108 	add.w	r1, r7, #8
 8000702:	2300      	movs	r3, #0
 8000704:	2200      	movs	r2, #0
 8000706:	f002 fadd 	bl	8002cc4 <xQueueGenericSend>
		vTaskDelay( xBlockTime );
 800070a:	bf00      	nop
 800070c:	e7f2      	b.n	80006f4 <vSenderTask2+0x10>
 800070e:	bf00      	nop
 8000710:	080062a4 	.word	0x080062a4
 8000714:	200000d4 	.word	0x200000d4

08000718 <vReceiverTask>:

	}
}

void vReceiverTask(void *pvParameters )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	QueueHandle_t xQueueThatContainsData;
	char *pcReceivedString;

	while(1)
	{
		xQueueThatContainsData = (QueueHandle_t ) xQueueSelectFromSet( xQueueSet, portMAX_DELAY);
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <vReceiverTask+0x34>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	4618      	mov	r0, r3
 800072a:	f002 ff2d 	bl	8003588 <xQueueSelectFromSet>
 800072e:	60f8      	str	r0, [r7, #12]
		// Receive data from the queue whose handle was returned
		xQueueReceive(xQueueThatContainsData, &pcReceivedString, 0);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f002 fc97 	bl	800306c <xQueueReceive>

		printf("%s",pcReceivedString);
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	4619      	mov	r1, r3
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <vReceiverTask+0x38>)
 8000744:	f004 fefa 	bl	800553c <iprintf>
		xQueueThatContainsData = (QueueHandle_t ) xQueueSelectFromSet( xQueueSet, portMAX_DELAY);
 8000748:	bf00      	nop
 800074a:	e7e9      	b.n	8000720 <vReceiverTask+0x8>
 800074c:	200000d8 	.word	0x200000d8
 8000750:	080062c0 	.word	0x080062c0

08000754 <uart2_write>:
}



int uart2_write(int ch)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 800075c:	bf00      	nop
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <uart2_write+0x2c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f9      	beq.n	800075e <uart2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <uart2_write+0x2c>)
 800076e:	b2db      	uxtb	r3, r3
 8000770:	6053      	str	r3, [r2, #4]

	return ch;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40004400 	.word	0x40004400

08000784 <__io_putchar>:


int __io_putchar(int ch)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffe1 	bl	8000754 <uart2_write>
	return ch;
 8000792:	687b      	ldr	r3, [r7, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2234      	movs	r2, #52	@ 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 ff1b 	bl	80055e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <SystemClock_Config+0xb8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <SystemClock_Config+0xb8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <SystemClock_Config+0xb8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <SystemClock_Config+0xbc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <SystemClock_Config+0xbc>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <SystemClock_Config+0xbc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4618      	mov	r0, r3
 8000812:	f001 f819 	bl	8001848 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800081c:	f000 f874 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fd0e 	bl	800125c <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000846:	f000 f85f 	bl	8000908 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	@ 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f001 fd12 	bl	80022bc <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f833 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000088 	.word	0x20000088
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_GPIO_Init+0x30>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <MX_GPIO_Init+0x30>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_GPIO_Init+0x30>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008f6:	f000 fa1b 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010000 	.word	0x40010000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a11      	ldr	r2, [pc, #68]	@ (8000968 <HAL_MspInit+0x54>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x54>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_MspInit+0x54>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_MspInit+0x54>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	f06f 0001 	mvn.w	r0, #1
 800095a:	f000 fac1 	bl	8000ee0 <HAL_NVIC_SetPriority>
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 faa7 	bl	8000f34 <HAL_GPIO_Init>
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <HAL_InitTick>:
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	@ 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <HAL_InitTick+0xd0>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a14:	4a2d      	ldr	r2, [pc, #180]	@ (8000acc <HAL_InitTick+0xd0>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <HAL_InitTick+0xd0>)
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	f107 020c 	add.w	r2, r7, #12
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fd2c 	bl	8001490 <HAL_RCC_GetClockConfig>
 8000a38:	f000 fd16 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 8000a3c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8000a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a40:	4a23      	ldr	r2, [pc, #140]	@ (8000ad0 <HAL_InitTick+0xd4>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0c9b      	lsrs	r3, r3, #18
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <HAL_InitTick+0xdc>)
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5e:	6053      	str	r3, [r2, #4]
 8000a60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
 8000a66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
 8000a72:	4818      	ldr	r0, [pc, #96]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a74:	f001 f986 	bl	8001d84 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d11b      	bne.n	8000abe <HAL_InitTick+0xc2>
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <HAL_InitTick+0xd8>)
 8000a88:	f001 f9d6 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d111      	bne.n	8000abe <HAL_InitTick+0xc2>
 8000a9a:	2019      	movs	r0, #25
 8000a9c:	f000 fa3c 	bl	8000f18 <HAL_NVIC_EnableIRQ>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	d808      	bhi.n	8000ab8 <HAL_InitTick+0xbc>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	2019      	movs	r0, #25
 8000aac:	f000 fa18 	bl	8000ee0 <HAL_NVIC_SetPriority>
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_InitTick+0xe0>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e002      	b.n	8000abe <HAL_InitTick+0xc2>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3730      	adds	r7, #48	@ 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	20000004 	.word	0x20000004

08000ae0 <NMI_Handler>:
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <DebugMon_Handler>:
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <TIM1_UP_TIM10_IRQHandler>:
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b1e:	f001 f9fb 	bl	8001f18 <HAL_TIM_IRQHandler>
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000dc 	.word	0x200000dc

08000b2c <_read>:
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fdff 	bl	8000784 <__io_putchar>
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	2301      	movs	r3, #1
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
 8000c38:	f004 fd24 	bl	8005684 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	20000124 	.word	0x20000124
 8000c70:	20004bc8 	.word	0x20004bc8

08000c74 <SystemInit>:
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd0 <LoopFillZerobss+0xe>
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopFillZerobss+0x12>)
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x16>)
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x1a>)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:
 8000caa:	58d4      	ldr	r4, [r2, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:
 8000cb0:	18c4      	adds	r4, r0, r3
 8000cb2:	428c      	cmp	r4, r1
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x1e>)
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x22>)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:
 8000cc2:	42a2      	cmp	r2, r4
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>
 8000cc6:	f004 fce3 	bl	8005690 <__libc_init_array>
 8000cca:	f7ff fc87 	bl	80005dc <main>
 8000cce:	4770      	bx	lr
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	2000006c 	.word	0x2000006c
 8000cdc:	08006338 	.word	0x08006338
 8000ce0:	2000006c 	.word	0x2000006c
 8000ce4:	20004bc8 	.word	0x20004bc8

08000ce8 <ADC_IRQHandler>:
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	@ (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f8d8 	bl	8000eca <HAL_NVIC_SetPriorityGrouping>
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f7ff fe6e 	bl	80009fc <HAL_InitTick>
 8000d20:	f7ff fdf8 	bl	8000914 <HAL_MspInit>
 8000d24:	2300      	movs	r3, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_IncTick>:
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000128 	.word	0x20000128

08000d58 <HAL_GetTick>:
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000128 	.word	0x20000128

08000d70 <__NVIC_SetPriorityGrouping>:
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_NVIC_SetPriorityGrouping>:
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff4c 	bl	8000d70 <__NVIC_SetPriorityGrouping>
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_SetPriority>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	f7ff ff61 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000ef6:	6178      	str	r0, [r7, #20]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff ffb1 	bl	8000e64 <NVIC_EncodePriority>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <__NVIC_SetPriority>
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_EnableIRQ>:
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff54 	bl	8000dd4 <__NVIC_EnableIRQ>
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_GPIO_Init>:
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e165      	b.n	800121c <HAL_GPIO_Init+0x2e8>
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8154 	bne.w	8001216 <HAL_GPIO_Init+0x2e2>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80ae 	beq.w	8001216 <HAL_GPIO_Init+0x2e2>
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b5d      	ldr	r3, [pc, #372]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4a58      	ldr	r2, [pc, #352]	@ (8001238 <HAL_GPIO_Init+0x304>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x308>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d025      	beq.n	800114e <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	@ (8001240 <HAL_GPIO_Init+0x30c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d01f      	beq.n	800114a <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x310>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x20a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4a      	ldr	r2, [pc, #296]	@ (8001250 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x206>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	@ (8001254 <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x202>
 8001132:	2306      	movs	r3, #6
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001136:	2307      	movs	r3, #7
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	4935      	ldr	r1, [pc, #212]	@ (8001238 <HAL_GPIO_Init+0x304>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800116e:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <HAL_GPIO_Init+0x324>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x25e>
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	4a31      	ldr	r2, [pc, #196]	@ (8001258 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <HAL_GPIO_Init+0x324>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x288>
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	4a26      	ldr	r2, [pc, #152]	@ (8001258 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <HAL_GPIO_Init+0x324>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2b2>
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <HAL_GPIO_Init+0x324>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_GPIO_Init+0x324>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2dc>
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	4a11      	ldr	r2, [pc, #68]	@ (8001258 <HAL_GPIO_Init+0x324>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae96 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40021800 	.word	0x40021800
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_RCC_ClockConfig>:
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
 800126c:	2301      	movs	r3, #1
 800126e:	e0cc      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 8001270:	4b68      	ldr	r3, [pc, #416]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0x3c>
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x3c>
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x8a>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x60>
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012ba:	6093      	str	r3, [r2, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x78>
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a52      	ldr	r2, [pc, #328]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012d2:	6093      	str	r3, [r2, #8]
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d044      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xae>
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_RCC_ClockConfig+0xbe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
 8001326:	2301      	movs	r3, #1
 8001328:	e06f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
 8001336:	2301      	movs	r3, #1
 8001338:	e067      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 800133a:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4934      	ldr	r1, [pc, #208]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]
 800134c:	f7ff fd04 	bl	8000d58 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
 8001354:	f7ff fd00 	bl	8000d58 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
 8001366:	2303      	movs	r3, #3
 8001368:	e04f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 800136a:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20c      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x148>
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x148>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x166>
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x186>
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
 80013e2:	f000 f887 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fafa 	bl	80009fc <HAL_InitTick>
 8001408:	2300      	movs	r3, #0
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00
 8001418:	40023800 	.word	0x40023800
 800141c:	080062dc 	.word	0x080062dc
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetHCLKFreq>:
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_RCC_GetHCLKFreq+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <HAL_RCC_GetPCLK1Freq>:
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
 8001444:	f7ff fff0 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0a9b      	lsrs	r3, r3, #10
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	@ (8001464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	080062ec 	.word	0x080062ec

08001468 <HAL_RCC_GetPCLK2Freq>:
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
 800146c:	f7ff ffdc 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0b5b      	lsrs	r3, r3, #13
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK2Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	080062ec 	.word	0x080062ec

08001490 <HAL_RCC_GetClockConfig>:
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220f      	movs	r2, #15
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_RCC_GetClockConfig+0x60>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_RCC_GetSysClockFreq>:
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0a6      	sub	sp, #152	@ 0x98
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800151a:	4bc8      	ldr	r3, [pc, #800]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b0c      	cmp	r3, #12
 8001524:	f200 817e 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x330>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001565 	.word	0x08001565
 8001534:	08001825 	.word	0x08001825
 8001538:	08001825 	.word	0x08001825
 800153c:	08001825 	.word	0x08001825
 8001540:	0800156d 	.word	0x0800156d
 8001544:	08001825 	.word	0x08001825
 8001548:	08001825 	.word	0x08001825
 800154c:	08001825 	.word	0x08001825
 8001550:	08001575 	.word	0x08001575
 8001554:	08001825 	.word	0x08001825
 8001558:	08001825 	.word	0x08001825
 800155c:	08001825 	.word	0x08001825
 8001560:	080016df 	.word	0x080016df
 8001564:	4bb6      	ldr	r3, [pc, #728]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800156a:	e15f      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x338>
 800156c:	4bb5      	ldr	r3, [pc, #724]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x350>)
 800156e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001572:	e15b      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x338>
 8001574:	4bb1      	ldr	r3, [pc, #708]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800157c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001580:	4bae      	ldr	r3, [pc, #696]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d031      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0xfc>
 800158c:	4bab      	ldr	r3, [pc, #684]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	2200      	movs	r2, #0
 8001594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001596:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800159a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800159e:	663b      	str	r3, [r7, #96]	@ 0x60
 80015a0:	2300      	movs	r3, #0
 80015a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80015a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x350>)
 80015a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015aa:	462a      	mov	r2, r5
 80015ac:	fb03 f202 	mul.w	r2, r3, r2
 80015b0:	2300      	movs	r3, #0
 80015b2:	4621      	mov	r1, r4
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	4aa2      	ldr	r2, [pc, #648]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x350>)
 80015bc:	4621      	mov	r1, r4
 80015be:	fba1 1202 	umull	r1, r2, r1, r2
 80015c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80015c4:	460a      	mov	r2, r1
 80015c6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80015c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80015ca:	4413      	add	r3, r2
 80015cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d2:	2200      	movs	r2, #0
 80015d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80015e0:	f7fe fe66 	bl	80002b0 <__aeabi_uldivmod>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4613      	mov	r3, r2
 80015ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ee:	e064      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x1c6>
 80015f0:	4b92      	ldr	r3, [pc, #584]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	2200      	movs	r2, #0
 80015f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80015fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80015fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001604:	2300      	movs	r3, #0
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001608:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800160c:	4622      	mov	r2, r4
 800160e:	462b      	mov	r3, r5
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	0159      	lsls	r1, r3, #5
 800161a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800161e:	0150      	lsls	r0, r2, #5
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4621      	mov	r1, r4
 8001626:	1a51      	subs	r1, r2, r1
 8001628:	6139      	str	r1, [r7, #16]
 800162a:	4629      	mov	r1, r5
 800162c:	eb63 0301 	sbc.w	r3, r3, r1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800163e:	4659      	mov	r1, fp
 8001640:	018b      	lsls	r3, r1, #6
 8001642:	4651      	mov	r1, sl
 8001644:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001648:	4651      	mov	r1, sl
 800164a:	018a      	lsls	r2, r1, #6
 800164c:	4651      	mov	r1, sl
 800164e:	ebb2 0801 	subs.w	r8, r2, r1
 8001652:	4659      	mov	r1, fp
 8001654:	eb63 0901 	sbc.w	r9, r3, r1
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001664:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001668:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800166c:	4690      	mov	r8, r2
 800166e:	4699      	mov	r9, r3
 8001670:	4623      	mov	r3, r4
 8001672:	eb18 0303 	adds.w	r3, r8, r3
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	462b      	mov	r3, r5
 800167a:	eb49 0303 	adc.w	r3, r9, r3
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800168c:	4629      	mov	r1, r5
 800168e:	028b      	lsls	r3, r1, #10
 8001690:	4621      	mov	r1, r4
 8001692:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001696:	4621      	mov	r1, r4
 8001698:	028a      	lsls	r2, r1, #10
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016a2:	2200      	movs	r2, #0
 80016a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80016a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80016a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016ac:	f7fe fe00 	bl	80002b0 <__aeabi_uldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4613      	mov	r3, r2
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	3301      	adds	r3, #1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80016d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016dc:	e0a6      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x338>
 80016de:	4b57      	ldr	r3, [pc, #348]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80016ea:	4b54      	ldr	r3, [pc, #336]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d02a      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x258>
 80016f6:	4b51      	ldr	r3, [pc, #324]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	099b      	lsrs	r3, r3, #6
 80016fc:	2200      	movs	r2, #0
 80016fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001700:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001704:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001708:	2100      	movs	r1, #0
 800170a:	4b4e      	ldr	r3, [pc, #312]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x350>)
 800170c:	fb03 f201 	mul.w	r2, r3, r1
 8001710:	2300      	movs	r3, #0
 8001712:	fb00 f303 	mul.w	r3, r0, r3
 8001716:	4413      	add	r3, r2
 8001718:	4a4a      	ldr	r2, [pc, #296]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x350>)
 800171a:	fba0 1202 	umull	r1, r2, r0, r2
 800171e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001720:	460a      	mov	r2, r1
 8001722:	673a      	str	r2, [r7, #112]	@ 0x70
 8001724:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001726:	4413      	add	r3, r2
 8001728:	677b      	str	r3, [r7, #116]	@ 0x74
 800172a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800172e:	2200      	movs	r2, #0
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
 8001732:	637a      	str	r2, [r7, #52]	@ 0x34
 8001734:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001738:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800173c:	f7fe fdb8 	bl	80002b0 <__aeabi_uldivmod>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4613      	mov	r3, r2
 8001746:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800174a:	e05b      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x310>
 800174c:	4b3b      	ldr	r3, [pc, #236]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	2200      	movs	r2, #0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175e:	623b      	str	r3, [r7, #32]
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
 8001764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001768:	4642      	mov	r2, r8
 800176a:	464b      	mov	r3, r9
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	0159      	lsls	r1, r3, #5
 8001776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177a:	0150      	lsls	r0, r2, #5
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4641      	mov	r1, r8
 8001782:	ebb2 0a01 	subs.w	sl, r2, r1
 8001786:	4649      	mov	r1, r9
 8001788:	eb63 0b01 	sbc.w	fp, r3, r1
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800179c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017a0:	ebb2 040a 	subs.w	r4, r2, sl
 80017a4:	eb63 050b 	sbc.w	r5, r3, fp
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	00eb      	lsls	r3, r5, #3
 80017b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b6:	00e2      	lsls	r2, r4, #3
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	18e3      	adds	r3, r4, r3
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	464b      	mov	r3, r9
 80017c4:	eb45 0303 	adc.w	r3, r5, r3
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d6:	4629      	mov	r1, r5
 80017d8:	028b      	lsls	r3, r1, #10
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e0:	4621      	mov	r1, r4
 80017e2:	028a      	lsls	r2, r1, #10
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ec:	2200      	movs	r2, #0
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	61fa      	str	r2, [r7, #28]
 80017f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f6:	f7fe fd5b 	bl	80002b0 <__aeabi_uldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4613      	mov	r3, r2
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001804:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_RCC_GetSysClockFreq+0x348>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0f1b      	lsrs	r3, r3, #28
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001812:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001816:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001822:	e003      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x338>
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800182a:	bf00      	nop
 800182c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001830:	4618      	mov	r0, r3
 8001832:	3798      	adds	r7, #152	@ 0x98
 8001834:	46bd      	mov	sp, r7
 8001836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	00f42400 	.word	0x00f42400
 8001844:	017d7840 	.word	0x017d7840

08001848 <HAL_RCC_OscConfig>:
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
 8001856:	2301      	movs	r3, #1
 8001858:	e28d      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8083 	beq.w	800196e <HAL_RCC_OscConfig+0x126>
 8001868:	4b94      	ldr	r3, [pc, #592]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d019      	beq.n	80018a8 <HAL_RCC_OscConfig+0x60>
 8001874:	4b91      	ldr	r3, [pc, #580]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x46>
 8001880:	4b8e      	ldr	r3, [pc, #568]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800188c:	d00c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x60>
 800188e:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d112      	bne.n	80018c0 <HAL_RCC_OscConfig+0x78>
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x78>
 80018a8:	4b84      	ldr	r3, [pc, #528]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d05b      	beq.n	800196c <HAL_RCC_OscConfig+0x124>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d157      	bne.n	800196c <HAL_RCC_OscConfig+0x124>
 80018bc:	2301      	movs	r3, #1
 80018be:	e25a      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x90>
 80018ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7b      	ldr	r2, [pc, #492]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xcc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xb4>
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a72      	ldr	r2, [pc, #456]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xcc>
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6e      	ldr	r2, [pc, #440]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b6c      	ldr	r3, [pc, #432]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6b      	ldr	r2, [pc, #428]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0xfc>
 800191c:	f7ff fa1c 	bl	8000d58 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xee>
 8001924:	f7ff fa18 	bl	8000d58 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xee>
 8001932:	2303      	movs	r3, #3
 8001934:	e21f      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001936:	4b61      	ldr	r3, [pc, #388]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xdc>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x126>
 8001944:	f7ff fa08 	bl	8000d58 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x116>
 800194c:	f7ff fa04 	bl	8000d58 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x116>
 800195a:	2303      	movs	r3, #3
 800195c:	e20b      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 800195e:	4b57      	ldr	r3, [pc, #348]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x104>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x126>
 800196c:	bf00      	nop
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06f      	beq.n	8001a5a <HAL_RCC_OscConfig+0x212>
 800197a:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d017      	beq.n	80019b6 <HAL_RCC_OscConfig+0x16e>
 8001986:	4b4d      	ldr	r3, [pc, #308]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x156>
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x16e>
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x19c>
 80019aa:	4b44      	ldr	r3, [pc, #272]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x19c>
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x186>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x186>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1d3      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4937      	ldr	r1, [pc, #220]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1e6>
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x278>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f7ff f9b1 	bl	8000d58 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1c4>
 80019fa:	f7ff f9ad 	bl	8000d58 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1c4>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1b4      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1b2>
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4925      	ldr	r1, [pc, #148]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x278>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f7ff f990 	bl	8000d58 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x206>
 8001a3c:	f7ff f98c 	bl	8000d58 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x206>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e193      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1f4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x28c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x254>
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f7ff f970 	bl	8000d58 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x246>
 8001a7c:	f7ff f96c 	bl	8000d58 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x246>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e173      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x234>
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x28c>
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f7ff f959 	bl	8000d58 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]
 8001aa8:	e00e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x280>
 8001aaa:	f7ff f955 	bl	8000d58 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x280>
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e15c      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
 8001ac8:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ea      	bne.n	8001aaa <HAL_RCC_OscConfig+0x262>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8097 	beq.w	8001c10 <HAL_RCC_OscConfig+0x3c8>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
 8001ae6:	4b83      	ldr	r3, [pc, #524]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2ca>
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
 8001b12:	4b79      	ldr	r3, [pc, #484]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x308>
 8001b1e:	4b76      	ldr	r3, [pc, #472]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a75      	ldr	r2, [pc, #468]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	f7ff f915 	bl	8000d58 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
 8001b32:	f7ff f911 	bl	8000d58 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e118      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001b44:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2ea>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x31e>
 8001b58:	4b66      	ldr	r3, [pc, #408]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a65      	ldr	r2, [pc, #404]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x358>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x340>
 8001b6e:	4b61      	ldr	r3, [pc, #388]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	4a60      	ldr	r2, [pc, #384]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x358>
 8001b88:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b94:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x38c>
 8001ba8:	f7ff f8d6 	bl	8000d58 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
 8001bb0:	f7ff f8d2 	bl	8000d58 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0d7      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x368>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x3b6>
 8001bd4:	f7ff f8c0 	bl	8000d58 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
 8001bdc:	f7ff f8bc 	bl	8000d58 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0c1      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x394>
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3c8>
 8001c04:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80ad 	beq.w	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d060      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4a0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d145      	bne.n	8001cba <HAL_RCC_OscConfig+0x472>
 8001c2e:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f7ff f890 	bl	8000d58 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x406>
 8001c3c:	f7ff f88c 	bl	8000d58 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x406>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e093      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001c4e:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3f4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	071b      	lsls	r3, r3, #28
 8001c86:	491b      	ldr	r1, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f7ff f861 	bl	8000d58 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x464>
 8001c9a:	f7ff f85d 	bl	8000d58 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x464>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e064      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x452>
 8001cb8:	e05c      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f7ff f84a 	bl	8000d58 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x492>
 8001cc8:	f7ff f846 	bl	8000d58 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x492>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e04d      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x480>
 8001ce6:	e045      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4b8>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e040      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42470060 	.word	0x42470060
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_RCC_OscConfig+0x538>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d030      	beq.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d129      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d122      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d36:	0192      	lsls	r2, r2, #6
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d119      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	061b      	lsls	r3, r3, #24
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	071b      	lsls	r3, r3, #28
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001d74:	2300      	movs	r3, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_TIM_Base_Init>:
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9c0 	bl	8002148 <TIM_Base_SetConfig>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xb6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	@ (8001f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0xa4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	2300      	movs	r3, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800

08001f18 <HAL_TIM_IRQHandler>:
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x52>
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8d2 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x5e>
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8d5 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ac 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89e 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8af 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xea>
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f886 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xf6>
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f878 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f889 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d020      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x136>
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f860 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x142>
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f852 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f863 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fc30 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f900 	bl	80022a8 <HAL_TIMEx_BreakCallback>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f834 	bl	8002134 <HAL_TIM_TriggerCallback>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8d2 	bl	8002294 <HAL_TIMEx_CommutCallback>
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a43      	ldr	r2, [pc, #268]	@ (8002268 <TIM_Base_SetConfig+0x120>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	@ (800226c <TIM_Base_SetConfig+0x124>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3f      	ldr	r2, [pc, #252]	@ (8002270 <TIM_Base_SetConfig+0x128>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3e      	ldr	r2, [pc, #248]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a32      	ldr	r2, [pc, #200]	@ (8002268 <TIM_Base_SetConfig+0x120>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <TIM_Base_SetConfig+0x124>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002270 <TIM_Base_SetConfig+0x128>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <TIM_Base_SetConfig+0x134>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002280 <TIM_Base_SetConfig+0x138>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a29      	ldr	r2, [pc, #164]	@ (8002284 <TIM_Base_SetConfig+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a28      	ldr	r2, [pc, #160]	@ (8002288 <TIM_Base_SetConfig+0x140>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a27      	ldr	r2, [pc, #156]	@ (800228c <TIM_Base_SetConfig+0x144>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <TIM_Base_SetConfig+0x148>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	@ 0x28
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <TIM_Base_SetConfig+0x120>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0xf2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d103      	bne.n	8002242 <TIM_Base_SetConfig+0xfa>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40010400 	.word	0x40010400
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800
 8002288:	40001800 	.word	0x40001800
 800228c:	40001c00 	.word	0x40001c00
 8002290:	40002000 	.word	0x40002000

08002294 <HAL_TIMEx_CommutCallback>:
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIMEx_BreakCallback>:
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_UART_Init>:
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Init+0x12>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e042      	b.n	8002354 <HAL_UART_Init+0x98>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_UART_Init+0x2c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fb42 	bl	800096c <HAL_UART_MspInit>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f82b 	bl	800235c <UART_SetConfig>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002314:	611a      	str	r2, [r3, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	@ 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	635a      	str	r2, [r3, #52]	@ 0x34
 8002352:	2300      	movs	r3, #0
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <UART_SetConfig>:
 800235c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002360:	b0c0      	sub	sp, #256	@ 0x100
 8002362:	af00      	add	r7, sp, #0
 8002364:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	ea40 0301 	orr.w	r3, r0, r1
 8002384:	6113      	str	r3, [r2, #16]
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	431a      	orrs	r2, r3
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023b4:	f021 010c 	bic.w	r1, r1, #12
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023c2:	430b      	orrs	r3, r1
 80023c4:	60d3      	str	r3, [r2, #12]
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d6:	6999      	ldr	r1, [r3, #24]
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	ea40 0301 	orr.w	r3, r0, r1
 80023e2:	6153      	str	r3, [r2, #20]
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002628 <UART_SetConfig+0x2cc>)
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d005      	beq.n	80023fc <UART_SetConfig+0xa0>
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b8d      	ldr	r3, [pc, #564]	@ (800262c <UART_SetConfig+0x2d0>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d104      	bne.n	8002406 <UART_SetConfig+0xaa>
 80023fc:	f7ff f834 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 8002400:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002404:	e003      	b.n	800240e <UART_SetConfig+0xb2>
 8002406:	f7ff f81b 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 800240a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002418:	f040 810c 	bne.w	8002634 <UART_SetConfig+0x2d8>
 800241c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002426:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800242a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	1891      	adds	r1, r2, r2
 8002434:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002436:	415b      	adcs	r3, r3
 8002438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800243a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800243e:	4621      	mov	r1, r4
 8002440:	eb12 0801 	adds.w	r8, r2, r1
 8002444:	4629      	mov	r1, r5
 8002446:	eb43 0901 	adc.w	r9, r3, r1
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800245a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800245e:	4690      	mov	r8, r2
 8002460:	4699      	mov	r9, r3
 8002462:	4623      	mov	r3, r4
 8002464:	eb18 0303 	adds.w	r3, r8, r3
 8002468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800246c:	462b      	mov	r3, r5
 800246e:	eb49 0303 	adc.w	r3, r9, r3
 8002472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002482:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800248a:	460b      	mov	r3, r1
 800248c:	18db      	adds	r3, r3, r3
 800248e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002490:	4613      	mov	r3, r2
 8002492:	eb42 0303 	adc.w	r3, r2, r3
 8002496:	657b      	str	r3, [r7, #84]	@ 0x54
 8002498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800249c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024a0:	f7fd ff06 	bl	80002b0 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4b61      	ldr	r3, [pc, #388]	@ (8002630 <UART_SetConfig+0x2d4>)
 80024aa:	fba3 2302 	umull	r2, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	011c      	lsls	r4, r3, #4
 80024b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024c4:	4642      	mov	r2, r8
 80024c6:	464b      	mov	r3, r9
 80024c8:	1891      	adds	r1, r2, r2
 80024ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024cc:	415b      	adcs	r3, r3
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024d4:	4641      	mov	r1, r8
 80024d6:	eb12 0a01 	adds.w	sl, r2, r1
 80024da:	4649      	mov	r1, r9
 80024dc:	eb43 0b01 	adc.w	fp, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f4:	4692      	mov	sl, r2
 80024f6:	469b      	mov	fp, r3
 80024f8:	4643      	mov	r3, r8
 80024fa:	eb1a 0303 	adds.w	r3, sl, r3
 80024fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002502:	464b      	mov	r3, r9
 8002504:	eb4b 0303 	adc.w	r3, fp, r3
 8002508:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002518:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800251c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002520:	460b      	mov	r3, r1
 8002522:	18db      	adds	r3, r3, r3
 8002524:	643b      	str	r3, [r7, #64]	@ 0x40
 8002526:	4613      	mov	r3, r2
 8002528:	eb42 0303 	adc.w	r3, r2, r3
 800252c:	647b      	str	r3, [r7, #68]	@ 0x44
 800252e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002536:	f7fd febb 	bl	80002b0 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4611      	mov	r1, r2
 8002540:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <UART_SetConfig+0x2d4>)
 8002542:	fba3 2301 	umull	r2, r3, r3, r1
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2264      	movs	r2, #100	@ 0x64
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	1acb      	subs	r3, r1, r3
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002556:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <UART_SetConfig+0x2d4>)
 8002558:	fba3 2302 	umull	r2, r3, r3, r2
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002564:	441c      	add	r4, r3
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002570:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	1891      	adds	r1, r2, r2
 800257e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002580:	415b      	adcs	r3, r3
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002588:	4641      	mov	r1, r8
 800258a:	1851      	adds	r1, r2, r1
 800258c:	6339      	str	r1, [r7, #48]	@ 0x30
 800258e:	4649      	mov	r1, r9
 8002590:	414b      	adcs	r3, r1
 8002592:	637b      	str	r3, [r7, #52]	@ 0x34
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025a0:	4659      	mov	r1, fp
 80025a2:	00cb      	lsls	r3, r1, #3
 80025a4:	4651      	mov	r1, sl
 80025a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025aa:	4651      	mov	r1, sl
 80025ac:	00ca      	lsls	r2, r1, #3
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	4642      	mov	r2, r8
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025bc:	464b      	mov	r3, r9
 80025be:	460a      	mov	r2, r1
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025dc:	460b      	mov	r3, r1
 80025de:	18db      	adds	r3, r3, r3
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025e2:	4613      	mov	r3, r2
 80025e4:	eb42 0303 	adc.w	r3, r2, r3
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025f2:	f7fd fe5d 	bl	80002b0 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <UART_SetConfig+0x2d4>)
 80025fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	2164      	movs	r1, #100	@ 0x64
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3332      	adds	r3, #50	@ 0x32
 800260e:	4a08      	ldr	r2, [pc, #32]	@ (8002630 <UART_SetConfig+0x2d4>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	f003 0207 	and.w	r2, r3, #7
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4422      	add	r2, r4
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	e106      	b.n	8002834 <UART_SetConfig+0x4d8>
 8002626:	bf00      	nop
 8002628:	40011000 	.word	0x40011000
 800262c:	40011400 	.word	0x40011400
 8002630:	51eb851f 	.word	0x51eb851f
 8002634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002638:	2200      	movs	r2, #0
 800263a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800263e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002646:	4642      	mov	r2, r8
 8002648:	464b      	mov	r3, r9
 800264a:	1891      	adds	r1, r2, r2
 800264c:	6239      	str	r1, [r7, #32]
 800264e:	415b      	adcs	r3, r3
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
 8002652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002656:	4641      	mov	r1, r8
 8002658:	1854      	adds	r4, r2, r1
 800265a:	4649      	mov	r1, r9
 800265c:	eb43 0501 	adc.w	r5, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	00eb      	lsls	r3, r5, #3
 800266a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800266e:	00e2      	lsls	r2, r4, #3
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4643      	mov	r3, r8
 8002676:	18e3      	adds	r3, r4, r3
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800267c:	464b      	mov	r3, r9
 800267e:	eb45 0303 	adc.w	r3, r5, r3
 8002682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002692:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026a2:	4629      	mov	r1, r5
 80026a4:	008b      	lsls	r3, r1, #2
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ac:	4621      	mov	r1, r4
 80026ae:	008a      	lsls	r2, r1, #2
 80026b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026b4:	f7fd fdfc 	bl	80002b0 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4b60      	ldr	r3, [pc, #384]	@ (8002840 <UART_SetConfig+0x4e4>)
 80026be:	fba3 2302 	umull	r2, r3, r3, r2
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	011c      	lsls	r4, r3, #4
 80026c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026d8:	4642      	mov	r2, r8
 80026da:	464b      	mov	r3, r9
 80026dc:	1891      	adds	r1, r2, r2
 80026de:	61b9      	str	r1, [r7, #24]
 80026e0:	415b      	adcs	r3, r3
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e8:	4641      	mov	r1, r8
 80026ea:	1851      	adds	r1, r2, r1
 80026ec:	6139      	str	r1, [r7, #16]
 80026ee:	4649      	mov	r1, r9
 80026f0:	414b      	adcs	r3, r1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002700:	4659      	mov	r1, fp
 8002702:	00cb      	lsls	r3, r1, #3
 8002704:	4651      	mov	r1, sl
 8002706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800270a:	4651      	mov	r1, sl
 800270c:	00ca      	lsls	r2, r1, #3
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	4603      	mov	r3, r0
 8002714:	4642      	mov	r2, r8
 8002716:	189b      	adds	r3, r3, r2
 8002718:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800271c:	464b      	mov	r3, r9
 800271e:	460a      	mov	r2, r1
 8002720:	eb42 0303 	adc.w	r3, r2, r3
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002732:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002740:	4649      	mov	r1, r9
 8002742:	008b      	lsls	r3, r1, #2
 8002744:	4641      	mov	r1, r8
 8002746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800274a:	4641      	mov	r1, r8
 800274c:	008a      	lsls	r2, r1, #2
 800274e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002752:	f7fd fdad 	bl	80002b0 <__aeabi_uldivmod>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4611      	mov	r1, r2
 800275c:	4b38      	ldr	r3, [pc, #224]	@ (8002840 <UART_SetConfig+0x4e4>)
 800275e:	fba3 2301 	umull	r2, r3, r3, r1
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2264      	movs	r2, #100	@ 0x64
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	1acb      	subs	r3, r1, r3
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	3332      	adds	r3, #50	@ 0x32
 8002770:	4a33      	ldr	r2, [pc, #204]	@ (8002840 <UART_SetConfig+0x4e4>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800277c:	441c      	add	r4, r3
 800277e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002782:	2200      	movs	r2, #0
 8002784:	673b      	str	r3, [r7, #112]	@ 0x70
 8002786:	677a      	str	r2, [r7, #116]	@ 0x74
 8002788:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800278c:	4642      	mov	r2, r8
 800278e:	464b      	mov	r3, r9
 8002790:	1891      	adds	r1, r2, r2
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	415b      	adcs	r3, r3
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800279c:	4641      	mov	r1, r8
 800279e:	1851      	adds	r1, r2, r1
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	4649      	mov	r1, r9
 80027a4:	414b      	adcs	r3, r1
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027b4:	4659      	mov	r1, fp
 80027b6:	00cb      	lsls	r3, r1, #3
 80027b8:	4651      	mov	r1, sl
 80027ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027be:	4651      	mov	r1, sl
 80027c0:	00ca      	lsls	r2, r1, #3
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	4642      	mov	r2, r8
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ce:	464b      	mov	r3, r9
 80027d0:	460a      	mov	r2, r1
 80027d2:	eb42 0303 	adc.w	r3, r2, r3
 80027d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80027e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027f0:	4649      	mov	r1, r9
 80027f2:	008b      	lsls	r3, r1, #2
 80027f4:	4641      	mov	r1, r8
 80027f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027fa:	4641      	mov	r1, r8
 80027fc:	008a      	lsls	r2, r1, #2
 80027fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002802:	f7fd fd55 	bl	80002b0 <__aeabi_uldivmod>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <UART_SetConfig+0x4e4>)
 800280c:	fba3 1302 	umull	r1, r3, r3, r2
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	2164      	movs	r1, #100	@ 0x64
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	3332      	adds	r3, #50	@ 0x32
 800281e:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <UART_SetConfig+0x4e4>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4422      	add	r2, r4
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	bf00      	nop
 8002836:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800283a:	46bd      	mov	sp, r7
 800283c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002840:	51eb851f 	.word	0x51eb851f

08002844 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002848:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <SysTick_Handler+0x1c>)
 800284a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800284c:	f001 fd34 	bl	80042b8 <xTaskGetSchedulerState>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002856:	f002 fb2f 	bl	8004eb8 <xPortSysTickHandler>
  }
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4a07      	ldr	r2, [pc, #28]	@ (8002890 <vApplicationGetIdleTaskMemory+0x2c>)
 8002874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4a06      	ldr	r2, [pc, #24]	@ (8002894 <vApplicationGetIdleTaskMemory+0x30>)
 800287a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2280      	movs	r2, #128	@ 0x80
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000012c 	.word	0x2000012c
 8002894:	20000188 	.word	0x20000188

08002898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80028a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4a06      	ldr	r2, [pc, #24]	@ (80028c8 <vApplicationGetTimerTaskMemory+0x30>)
 80028ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	20000388 	.word	0x20000388
 80028c8:	200003e4 	.word	0x200003e4

080028cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 0208 	add.w	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f103 0208 	add.w	r2, r3, #8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0208 	add.w	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d103      	bne.n	800298e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e00c      	b.n	80029a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3308      	adds	r3, #8
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e002      	b.n	800299c <vListInsert+0x2e>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d2f6      	bcs.n	8002996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	601a      	str	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6852      	ldr	r2, [r2, #4]
 8002a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d103      	bne.n	8002a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1e5a      	subs	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a60:	f002 f99a 	bl	8004d98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	441a      	add	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	3b01      	subs	r3, #1
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	22ff      	movs	r2, #255	@ 0xff
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	22ff      	movs	r2, #255	@ 0xff
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d114      	bne.n	8002ae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01a      	beq.n	8002af4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3310      	adds	r3, #16
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fa38 	bl	8003f38 <xTaskRemoveFromEventList>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <xQueueGenericReset+0xd0>)
 8002ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	e009      	b.n	8002af4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3310      	adds	r3, #16
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fef1 	bl	80028cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3324      	adds	r3, #36	@ 0x24
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff feec 	bl	80028cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002af4:	f002 f982 	bl	8004dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08e      	sub	sp, #56	@ 0x38
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	e7fd      	b.n	8002b4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <xQueueGenericCreateStatic+0x56>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <xQueueGenericCreateStatic+0x5a>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <xQueueGenericCreateStatic+0x5c>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	623b      	str	r3, [r7, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <xQueueGenericCreateStatic+0x84>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <xQueueGenericCreateStatic+0x88>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <xQueueGenericCreateStatic+0x8a>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	61fb      	str	r3, [r7, #28]
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bae:	2354      	movs	r3, #84	@ 0x54
 8002bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b54      	cmp	r3, #84	@ 0x54
 8002bb6:	d00b      	beq.n	8002bd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	61bb      	str	r3, [r7, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002be4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f840 	bl	8002c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3730      	adds	r7, #48	@ 0x30
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	@ 0x28
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	613b      	str	r3, [r7, #16]
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	3354      	adds	r3, #84	@ 0x54
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 f9cd 	bl	8004fdc <pvPortMalloc>
 8002c42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d011      	beq.n	8002c6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3354      	adds	r3, #84	@ 0x54
 8002c52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5c:	79fa      	ldrb	r2, [r7, #7]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f805 	bl	8002c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e002      	b.n	8002c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	69b8      	ldr	r0, [r7, #24]
 8002caa:	f7ff fec3 	bl	8002a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	@ 0x38
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <xQueueGenericSend+0x34>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <xQueueGenericSend+0x42>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <xQueueGenericSend+0x46>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueGenericSend+0x48>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <xQueueGenericSend+0x64>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	623b      	str	r3, [r7, #32]
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d103      	bne.n	8002d36 <xQueueGenericSend+0x72>
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <xQueueGenericSend+0x76>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <xQueueGenericSend+0x78>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <xQueueGenericSend+0x94>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	61fb      	str	r3, [r7, #28]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d58:	f001 faae 	bl	80042b8 <xTaskGetSchedulerState>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <xQueueGenericSend+0xa4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <xQueueGenericSend+0xa8>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <xQueueGenericSend+0xaa>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <xQueueGenericSend+0xc6>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	61bb      	str	r3, [r7, #24]
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d8a:	f002 f805 	bl	8004d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <xQueueGenericSend+0xdc>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d145      	bne.n	8002e2c <xQueueGenericSend+0x168>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dac:	f000 fa40 	bl	8003230 <prvCopyDataToQueue>
 8002db0:	62b8      	str	r0, [r7, #40]	@ 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <xQueueGenericSend+0x120>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d102      	bne.n	8002dc6 <xQueueGenericSend+0x102>
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d12e      	bne.n	8002e24 <xQueueGenericSend+0x160>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002dc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dc8:	f000 fbf1 	bl	80035ae <prvNotifyQueueSetContainer>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <xQueueGenericSend+0x160>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <xQueueGenericSend+0x238>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	e01f      	b.n	8002e24 <xQueueGenericSend+0x160>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <xQueueGenericSend+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	3324      	adds	r3, #36	@ 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f8a1 	bl	8003f38 <xTaskRemoveFromEventList>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <xQueueGenericSend+0x160>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <xQueueGenericSend+0x238>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	e00a      	b.n	8002e24 <xQueueGenericSend+0x160>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <xQueueGenericSend+0x160>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b39      	ldr	r3, [pc, #228]	@ (8002efc <xQueueGenericSend+0x238>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e24:	f001 ffea 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e063      	b.n	8002ef4 <xQueueGenericSend+0x230>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <xQueueGenericSend+0x176>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e32:	f001 ffe3 	bl	8004dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e05c      	b.n	8002ef4 <xQueueGenericSend+0x230>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <xQueueGenericSend+0x18a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 f8db 	bl	8004000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e4e:	f001 ffd5 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e52:	f000 fe4b 	bl	8003aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e56:	f001 ff9f 	bl	8004d98 <vPortEnterCritical>
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d103      	bne.n	8002e70 <xQueueGenericSend+0x1ac>
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e76:	b25b      	sxtb	r3, r3
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSend+0x1c2>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e86:	f001 ffb9 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e8a:	1d3a      	adds	r2, r7, #4
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 f8ca 	bl	800402c <xTaskCheckForTimeOut>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d124      	bne.n	8002ee8 <xQueueGenericSend+0x224>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea0:	f000 facb 	bl	800343a <prvIsQueueFull>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <xQueueGenericSend+0x218>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	3310      	adds	r3, #16
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 ffee 	bl	8003e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eba:	f000 fa49 	bl	8003350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ebe:	f000 fe23 	bl	8003b08 <xTaskResumeAll>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af60 	bne.w	8002d8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <xQueueGenericSend+0x238>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	e756      	b.n	8002d8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002edc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ede:	f000 fa37 	bl	8003350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ee2:	f000 fe11 	bl	8003b08 <xTaskResumeAll>
 8002ee6:	e750      	b.n	8002d8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eea:	f000 fa31 	bl	8003350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eee:	f000 fe0b 	bl	8003b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3738      	adds	r7, #56	@ 0x38
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b090      	sub	sp, #64	@ 0x40
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <xQueueGenericSendFromISR+0x3e>
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <xQueueGenericSendFromISR+0x42>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericSendFromISR+0x44>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d103      	bne.n	8002f6e <xQueueGenericSendFromISR+0x6e>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <xQueueGenericSendFromISR+0x72>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <xQueueGenericSendFromISR+0x74>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	623b      	str	r3, [r7, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f90:	f001 ffe2 	bl	8004f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f94:	f3ef 8211 	mrs	r2, BASEPRI
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	61fa      	str	r2, [r7, #28]
 8002faa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <xQueueGenericSendFromISR+0xc2>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d146      	bne.n	8003050 <xQueueGenericSendFromISR+0x150>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002fd8:	f000 f92a 	bl	8003230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fdc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d129      	bne.n	800303a <xQueueGenericSendFromISR+0x13a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <xQueueGenericSendFromISR+0x114>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d102      	bne.n	8002ffa <xQueueGenericSendFromISR+0xfa>
 8002ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d127      	bne.n	800304a <xQueueGenericSendFromISR+0x14a>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002ffa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ffc:	f000 fad7 	bl	80035ae <prvNotifyQueueSetContainer>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d021      	beq.n	800304a <xQueueGenericSendFromISR+0x14a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01e      	beq.n	800304a <xQueueGenericSendFromISR+0x14a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e01a      	b.n	800304a <xQueueGenericSendFromISR+0x14a>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <xQueueGenericSendFromISR+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301e:	3324      	adds	r3, #36	@ 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f000 ff89 	bl	8003f38 <xTaskRemoveFromEventList>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <xQueueGenericSendFromISR+0x14a>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <xQueueGenericSendFromISR+0x14a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <xQueueGenericSendFromISR+0x14a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800303a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800303e:	3301      	adds	r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	b25a      	sxtb	r2, r3
 8003044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800304a:	2301      	movs	r3, #1
 800304c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800304e:	e001      	b.n	8003054 <xQueueGenericSendFromISR+0x154>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003050:	2300      	movs	r3, #0
 8003052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003056:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800305e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003062:	4618      	mov	r0, r3
 8003064:	3740      	adds	r7, #64	@ 0x40
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	@ 0x30
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <xQueueReceive+0x32>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	623b      	str	r3, [r7, #32]
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	e7fd      	b.n	800309a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <xQueueReceive+0x40>
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <xQueueReceive+0x44>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <xQueueReceive+0x46>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <xQueueReceive+0x62>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	61fb      	str	r3, [r7, #28]
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	e7fd      	b.n	80030ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ce:	f001 f8f3 	bl	80042b8 <xTaskGetSchedulerState>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <xQueueReceive+0x72>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <xQueueReceive+0x76>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueReceive+0x78>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <xQueueReceive+0x94>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61bb      	str	r3, [r7, #24]
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003100:	f001 fe4a 	bl	8004d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003114:	f000 f8f6 	bl	8003304 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00f      	beq.n	8003148 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	3310      	adds	r3, #16
 800312c:	4618      	mov	r0, r3
 800312e:	f000 ff03 	bl	8003f38 <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003138:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <xQueueReceive+0x1c0>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003148:	f001 fe58 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 800314c:	2301      	movs	r3, #1
 800314e:	e069      	b.n	8003224 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003156:	f001 fe51 	bl	8004dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800315a:	2300      	movs	r3, #0
 800315c:	e062      	b.n	8003224 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	4618      	mov	r0, r3
 800316a:	f000 ff49 	bl	8004000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800316e:	2301      	movs	r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003172:	f001 fe43 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003176:	f000 fcb9 	bl	8003aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800317a:	f001 fe0d 	bl	8004d98 <vPortEnterCritical>
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003184:	b25b      	sxtb	r3, r3
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d103      	bne.n	8003194 <xQueueReceive+0x128>
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d103      	bne.n	80031aa <xQueueReceive+0x13e>
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031aa:	f001 fe27 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ae:	1d3a      	adds	r2, r7, #4
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 ff38 	bl	800402c <xTaskCheckForTimeOut>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d123      	bne.n	800320a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031c4:	f000 f923 	bl	800340e <prvIsQueueEmpty>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d017      	beq.n	80031fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	3324      	adds	r3, #36	@ 0x24
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fe5c 	bl	8003e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031de:	f000 f8b7 	bl	8003350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031e2:	f000 fc91 	bl	8003b08 <xTaskResumeAll>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d189      	bne.n	8003100 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <xQueueReceive+0x1c0>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	e780      	b.n	8003100 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003200:	f000 f8a6 	bl	8003350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003204:	f000 fc80 	bl	8003b08 <xTaskResumeAll>
 8003208:	e77a      	b.n	8003100 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800320a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800320c:	f000 f8a0 	bl	8003350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003210:	f000 fc7a 	bl	8003b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003216:	f000 f8fa 	bl	800340e <prvIsQueueEmpty>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f43f af6f 	beq.w	8003100 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003222:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003224:	4618      	mov	r0, r3
 8003226:	3730      	adds	r7, #48	@ 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14d      	bne.n	80032f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f001 f84a 	bl	80042f4 <xTaskPriorityDisinherit>
 8003260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e043      	b.n	80032f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d119      	bne.n	80032a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6858      	ldr	r0, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	461a      	mov	r2, r3
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	f002 fa2f 	bl	80056de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d32b      	bcc.n	80032f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e026      	b.n	80032f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68d8      	ldr	r0, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	f002 fa15 	bl	80056de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	425b      	negs	r3, r3
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	425b      	negs	r3, r3
 80032da:	441a      	add	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d105      	bne.n	80032f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032fa:	697b      	ldr	r3, [r7, #20]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d303      	bcc.n	8003338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	461a      	mov	r2, r3
 8003342:	6838      	ldr	r0, [r7, #0]
 8003344:	f002 f9cb 	bl	80056de <memcpy>
	}
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003358:	f001 fd1e 	bl	8004d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003364:	e01e      	b.n	80033a4 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f91d 	bl	80035ae <prvNotifyQueueSetContainer>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800337a:	f000 febb 	bl	80040f4 <vTaskMissedYield>
 800337e:	e00d      	b.n	800339c <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3324      	adds	r3, #36	@ 0x24
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fdd3 	bl	8003f38 <xTaskRemoveFromEventList>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8003398:	f000 feac 	bl	80040f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	3b01      	subs	r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dcdc      	bgt.n	8003366 <prvUnlockQueue+0x16>
 80033ac:	e000      	b.n	80033b0 <prvUnlockQueue+0x60>
						break;
 80033ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	22ff      	movs	r2, #255	@ 0xff
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80033b8:	f001 fd20 	bl	8004dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033bc:	f001 fcec 	bl	8004d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c8:	e011      	b.n	80033ee <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3310      	adds	r3, #16
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fdae 	bl	8003f38 <xTaskRemoveFromEventList>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 80033e2:	f000 fe87 	bl	80040f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	dce9      	bgt.n	80033ca <prvUnlockQueue+0x7a>
 80033f6:	e000      	b.n	80033fa <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 80033f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	22ff      	movs	r2, #255	@ 0xff
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003402:	f001 fcfb 	bl	8004dfc <vPortExitCritical>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003416:	f001 fcbf 	bl	8004d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003422:	2301      	movs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e001      	b.n	800342c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800342c:	f001 fce6 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 8003430:	68fb      	ldr	r3, [r7, #12]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003442:	f001 fca9 	bl	8004d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	429a      	cmp	r2, r3
 8003450:	d102      	bne.n	8003458 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e001      	b.n	800345c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800345c:	f001 fcce 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 8003460:	68fb      	ldr	r3, [r7, #12]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e014      	b.n	80034a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800347c:	4a0f      	ldr	r2, [pc, #60]	@ (80034bc <vQueueAddToRegistry+0x50>)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003488:	490c      	ldr	r1, [pc, #48]	@ (80034bc <vQueueAddToRegistry+0x50>)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <vQueueAddToRegistry+0x50>)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800349e:	e006      	b.n	80034ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b07      	cmp	r3, #7
 80034aa:	d9e7      	bls.n	800347c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200007e4 	.word	0x200007e4

080034c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034d0:	f001 fc62 	bl	8004d98 <vPortEnterCritical>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d103      	bne.n	80034ea <vQueueWaitForMessageRestricted+0x2a>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <vQueueWaitForMessageRestricted+0x40>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003500:	f001 fc7c 	bl	8004dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3324      	adds	r3, #36	@ 0x24
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fce3 	bl	8003ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ff18 	bl	8003350 <prvUnlockQueue>
	}
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8003530:	2200      	movs	r2, #0
 8003532:	2104      	movs	r1, #4
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff fb64 	bl	8002c02 <xQueueGenericCreate>
 800353a:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 800353c:	68fb      	ldr	r3, [r7, #12]
	}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003550:	f001 fc22 	bl	8004d98 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e00b      	b.n	800357a <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e004      	b.n	800357a <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	649a      	str	r2, [r3, #72]	@ 0x48
				xReturn = pdPASS;
 8003576:	2301      	movs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800357a:	f001 fc3f 	bl	8004dfc <vPortExitCritical>

		return xReturn;
 800357e:	68fb      	ldr	r3, [r7, #12]
	}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fd64 	bl	800306c <xQueueReceive>
		return xReturn;
 80035a4:	68fb      	ldr	r3, [r7, #12]
	}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	613b      	str	r3, [r7, #16]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d30b      	bcc.n	8003602 <prvNotifyQueueSetContainer+0x54>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60fb      	str	r3, [r7, #12]
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	e7fd      	b.n	80035fe <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	429a      	cmp	r2, r3
 800360c:	d225      	bcs.n	800365a <prvNotifyQueueSetContainer+0xac>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003614:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	2200      	movs	r2, #0
 800361a:	4619      	mov	r1, r3
 800361c:	69b8      	ldr	r0, [r7, #24]
 800361e:	f7ff fe07 	bl	8003230 <prvCopyDataToQueue>
 8003622:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8003624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d10e      	bne.n	800364c <prvNotifyQueueSetContainer+0x9e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d011      	beq.n	800365a <prvNotifyQueueSetContainer+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3324      	adds	r3, #36	@ 0x24
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fc7c 	bl	8003f38 <xTaskRemoveFromEventList>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <prvNotifyQueueSetContainer+0xac>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e006      	b.n	800365a <prvNotifyQueueSetContainer+0xac>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	3301      	adds	r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	b25a      	sxtb	r2, r3
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800365a:	69fb      	ldr	r3, [r7, #28]
	}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	@ 0x38
 8003668:	af04      	add	r7, sp, #16
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	623b      	str	r3, [r7, #32]
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	61fb      	str	r3, [r7, #28]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036ae:	235c      	movs	r3, #92	@ 0x5c
 80036b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80036b6:	d00b      	beq.n	80036d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	61bb      	str	r3, [r7, #24]
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01e      	beq.n	8003716 <xTaskCreateStatic+0xb2>
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01b      	beq.n	8003716 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036f0:	2300      	movs	r3, #0
 80036f2:	9303      	str	r3, [sp, #12]
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f850 	bl	80037ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800370e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003710:	f000 f8de 	bl	80038d0 <prvAddNewTaskToReadyList>
 8003714:	e001      	b.n	800371a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800371a:	697b      	ldr	r3, [r7, #20]
	}
 800371c:	4618      	mov	r0, r3
 800371e:	3728      	adds	r7, #40	@ 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08c      	sub	sp, #48	@ 0x30
 8003728:	af04      	add	r7, sp, #16
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fc4f 	bl	8004fdc <pvPortMalloc>
 800373e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003746:	205c      	movs	r0, #92	@ 0x5c
 8003748:	f001 fc48 	bl	8004fdc <pvPortMalloc>
 800374c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
 800375a:	e005      	b.n	8003768 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800375c:	6978      	ldr	r0, [r7, #20]
 800375e:	f001 fd0b 	bl	8005178 <vPortFree>
 8003762:	e001      	b.n	8003768 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d017      	beq.n	800379e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	2300      	movs	r3, #0
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f80e 	bl	80037ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003792:	69f8      	ldr	r0, [r7, #28]
 8003794:	f000 f89c 	bl	80038d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003798:	2301      	movs	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e002      	b.n	80037a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037a4:	69bb      	ldr	r3, [r7, #24]
	}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	461a      	mov	r2, r3
 80037c6:	21a5      	movs	r1, #165	@ 0xa5
 80037c8:	f001 ff0d 	bl	80055e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037d6:	3b01      	subs	r3, #1
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f023 0307 	bic.w	r3, r3, #7
 80037e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	617b      	str	r3, [r7, #20]
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01f      	beq.n	800384e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e012      	b.n	800383a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	7819      	ldrb	r1, [r3, #0]
 800381c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	3334      	adds	r3, #52	@ 0x34
 8003824:	460a      	mov	r2, r1
 8003826:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d9e9      	bls.n	8003814 <prvInitialiseNewTask+0x66>
 8003840:	e000      	b.n	8003844 <prvInitialiseNewTask+0x96>
			{
				break;
 8003842:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800384c:	e003      	b.n	8003856 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	2b37      	cmp	r3, #55	@ 0x37
 800385a:	d901      	bls.n	8003860 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800385c:	2337      	movs	r3, #55	@ 0x37
 800385e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800386a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	2200      	movs	r2, #0
 8003870:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f848 	bl	800290c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800387c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387e:	3318      	adds	r3, #24
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff f843 	bl	800290c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800388a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f001 f93e 	bl	8004b30 <pxPortInitialiseStack>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038c6:	bf00      	nop
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038d8:	f001 fa5e 	bl	8004d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003994 <prvAddNewTaskToReadyList+0xc4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003994 <prvAddNewTaskToReadyList+0xc4>)
 80038e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003998 <prvAddNewTaskToReadyList+0xc8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003998 <prvAddNewTaskToReadyList+0xc8>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038f4:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <prvAddNewTaskToReadyList+0xc4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d110      	bne.n	800391e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038fc:	f000 fc1e 	bl	800413c <prvInitialiseTaskLists>
 8003900:	e00d      	b.n	800391e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003902:	4b26      	ldr	r3, [pc, #152]	@ (800399c <prvAddNewTaskToReadyList+0xcc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800390a:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <prvAddNewTaskToReadyList+0xc8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d802      	bhi.n	800391e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003918:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <prvAddNewTaskToReadyList+0xc8>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <prvAddNewTaskToReadyList+0xd0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	4a1e      	ldr	r2, [pc, #120]	@ (80039a0 <prvAddNewTaskToReadyList+0xd0>)
 8003926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <prvAddNewTaskToReadyList+0xd0>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <prvAddNewTaskToReadyList+0xd4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d903      	bls.n	8003944 <prvAddNewTaskToReadyList+0x74>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	4a18      	ldr	r2, [pc, #96]	@ (80039a4 <prvAddNewTaskToReadyList+0xd4>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4a15      	ldr	r2, [pc, #84]	@ (80039a8 <prvAddNewTaskToReadyList+0xd8>)
 8003952:	441a      	add	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f7fe ffe3 	bl	8002926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003960:	f001 fa4c 	bl	8004dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003964:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <prvAddNewTaskToReadyList+0xcc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <prvAddNewTaskToReadyList+0xc8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	d207      	bcs.n	800398a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800397a:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <prvAddNewTaskToReadyList+0xdc>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000cf8 	.word	0x20000cf8
 8003998:	20000824 	.word	0x20000824
 800399c:	20000d04 	.word	0x20000d04
 80039a0:	20000d14 	.word	0x20000d14
 80039a4:	20000d00 	.word	0x20000d00
 80039a8:	20000828 	.word	0x20000828
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <vTaskDelay+0x64>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <vTaskDelay+0x32>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60bb      	str	r3, [r7, #8]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039e2:	f000 f883 	bl	8003aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039e6:	2100      	movs	r1, #0
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fcf3 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039ee:	f000 f88b 	bl	8003b08 <xTaskResumeAll>
 80039f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039fa:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <vTaskDelay+0x68>)
 80039fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000d20 	.word	0x20000d20
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2a:	463a      	mov	r2, r7
 8003a2c:	1d39      	adds	r1, r7, #4
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe ff16 	bl	8002864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	9202      	str	r2, [sp, #8]
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	460a      	mov	r2, r1
 8003a4a:	4922      	ldr	r1, [pc, #136]	@ (8003ad4 <vTaskStartScheduler+0xb8>)
 8003a4c:	4822      	ldr	r0, [pc, #136]	@ (8003ad8 <vTaskStartScheduler+0xbc>)
 8003a4e:	f7ff fe09 	bl	8003664 <xTaskCreateStatic>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <vTaskStartScheduler+0xc0>)
 8003a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a58:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <vTaskStartScheduler+0xc0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e001      	b.n	8003a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d102      	bne.n	8003a76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a70:	f000 fd04 	bl	800447c <xTimerCreateTimerTask>
 8003a74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d116      	bne.n	8003aaa <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	613b      	str	r3, [r7, #16]
}
 8003a8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a90:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <vTaskStartScheduler+0xc4>)
 8003a92:	f04f 32ff 	mov.w	r2, #4294967295
 8003a96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a98:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <vTaskStartScheduler+0xc8>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <vTaskStartScheduler+0xcc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aa4:	f001 f8d4 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003aa8:	e00f      	b.n	8003aca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d10b      	bne.n	8003aca <vTaskStartScheduler+0xae>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	60fb      	str	r3, [r7, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <vTaskStartScheduler+0xaa>
}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	080062c4 	.word	0x080062c4
 8003ad8:	0800410d 	.word	0x0800410d
 8003adc:	20000d1c 	.word	0x20000d1c
 8003ae0:	20000d18 	.word	0x20000d18
 8003ae4:	20000d04 	.word	0x20000d04
 8003ae8:	20000cfc 	.word	0x20000cfc

08003aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003af0:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <vTaskSuspendAll+0x18>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	4a03      	ldr	r2, [pc, #12]	@ (8003b04 <vTaskSuspendAll+0x18>)
 8003af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	20000d20 	.word	0x20000d20

08003b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b16:	4b42      	ldr	r3, [pc, #264]	@ (8003c20 <xTaskResumeAll+0x118>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <xTaskResumeAll+0x2e>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	603b      	str	r3, [r7, #0]
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b36:	f001 f92f 	bl	8004d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <xTaskResumeAll+0x118>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4a37      	ldr	r2, [pc, #220]	@ (8003c20 <xTaskResumeAll+0x118>)
 8003b42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b44:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <xTaskResumeAll+0x118>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d162      	bne.n	8003c12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b4c:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <xTaskResumeAll+0x11c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d05e      	beq.n	8003c12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b54:	e02f      	b.n	8003bb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b56:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <xTaskResumeAll+0x120>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3318      	adds	r3, #24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe ff3c 	bl	80029e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe ff37 	bl	80029e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b76:	4b2d      	ldr	r3, [pc, #180]	@ (8003c2c <xTaskResumeAll+0x124>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d903      	bls.n	8003b86 <xTaskResumeAll+0x7e>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <xTaskResumeAll+0x124>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a27      	ldr	r2, [pc, #156]	@ (8003c30 <xTaskResumeAll+0x128>)
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe fec2 	bl	8002926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba6:	4b23      	ldr	r3, [pc, #140]	@ (8003c34 <xTaskResumeAll+0x12c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003bb0:	4b21      	ldr	r3, [pc, #132]	@ (8003c38 <xTaskResumeAll+0x130>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <xTaskResumeAll+0x120>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1cb      	bne.n	8003b56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bc4:	f000 fb58 	bl	8004278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c3c <xTaskResumeAll+0x134>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d010      	beq.n	8003bf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bd4:	f000 f846 	bl	8003c64 <xTaskIncrementTick>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003bde:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <xTaskResumeAll+0x130>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f1      	bne.n	8003bd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003bf0:	4b12      	ldr	r3, [pc, #72]	@ (8003c3c <xTaskResumeAll+0x134>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bf6:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <xTaskResumeAll+0x130>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c02:	4b0f      	ldr	r3, [pc, #60]	@ (8003c40 <xTaskResumeAll+0x138>)
 8003c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c12:	f001 f8f3 	bl	8004dfc <vPortExitCritical>

	return xAlreadyYielded;
 8003c16:	68bb      	ldr	r3, [r7, #8]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000d20 	.word	0x20000d20
 8003c24:	20000cf8 	.word	0x20000cf8
 8003c28:	20000cb8 	.word	0x20000cb8
 8003c2c:	20000d00 	.word	0x20000d00
 8003c30:	20000828 	.word	0x20000828
 8003c34:	20000824 	.word	0x20000824
 8003c38:	20000d0c 	.word	0x20000d0c
 8003c3c:	20000d08 	.word	0x20000d08
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c4a:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <xTaskGetTickCount+0x1c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c50:	687b      	ldr	r3, [r7, #4]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000cfc 	.word	0x20000cfc

08003c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8003dac <xTaskIncrementTick+0x148>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 8090 	bne.w	8003d98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c78:	4b4d      	ldr	r3, [pc, #308]	@ (8003db0 <xTaskIncrementTick+0x14c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c80:	4a4b      	ldr	r2, [pc, #300]	@ (8003db0 <xTaskIncrementTick+0x14c>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d121      	bne.n	8003cd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c8c:	4b49      	ldr	r3, [pc, #292]	@ (8003db4 <xTaskIncrementTick+0x150>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	603b      	str	r3, [r7, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	e7fd      	b.n	8003caa <xTaskIncrementTick+0x46>
 8003cae:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <xTaskIncrementTick+0x150>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	4b40      	ldr	r3, [pc, #256]	@ (8003db8 <xTaskIncrementTick+0x154>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8003db4 <xTaskIncrementTick+0x150>)
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8003db8 <xTaskIncrementTick+0x154>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <xTaskIncrementTick+0x158>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dbc <xTaskIncrementTick+0x158>)
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	f000 fad4 	bl	8004278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <xTaskIncrementTick+0x15c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d349      	bcc.n	8003d6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cda:	4b36      	ldr	r3, [pc, #216]	@ (8003db4 <xTaskIncrementTick+0x150>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce4:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <xTaskIncrementTick+0x15c>)
 8003ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cea:	601a      	str	r2, [r3, #0]
					break;
 8003cec:	e03f      	b.n	8003d6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cee:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <xTaskIncrementTick+0x150>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d203      	bcs.n	8003d0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d06:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc0 <xTaskIncrementTick+0x15c>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d0c:	e02f      	b.n	8003d6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fe64 	bl	80029e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3318      	adds	r3, #24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fe5b 	bl	80029e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2e:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <xTaskIncrementTick+0x160>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d903      	bls.n	8003d3e <xTaskIncrementTick+0xda>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	4a22      	ldr	r2, [pc, #136]	@ (8003dc4 <xTaskIncrementTick+0x160>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc8 <xTaskIncrementTick+0x164>)
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe fde6 	bl	8002926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <xTaskIncrementTick+0x168>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3b8      	bcc.n	8003cda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d6c:	e7b5      	b.n	8003cda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d6e:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <xTaskIncrementTick+0x168>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d74:	4914      	ldr	r1, [pc, #80]	@ (8003dc8 <xTaskIncrementTick+0x164>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d901      	bls.n	8003d8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d86:	2301      	movs	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d8a:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <xTaskIncrementTick+0x16c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e004      	b.n	8003da2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <xTaskIncrementTick+0x170>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <xTaskIncrementTick+0x170>)
 8003da0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003da2:	697b      	ldr	r3, [r7, #20]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000d20 	.word	0x20000d20
 8003db0:	20000cfc 	.word	0x20000cfc
 8003db4:	20000cb0 	.word	0x20000cb0
 8003db8:	20000cb4 	.word	0x20000cb4
 8003dbc:	20000d10 	.word	0x20000d10
 8003dc0:	20000d18 	.word	0x20000d18
 8003dc4:	20000d00 	.word	0x20000d00
 8003dc8:	20000828 	.word	0x20000828
 8003dcc:	20000824 	.word	0x20000824
 8003dd0:	20000d0c 	.word	0x20000d0c
 8003dd4:	20000d08 	.word	0x20000d08

08003dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dde:	4b28      	ldr	r3, [pc, #160]	@ (8003e80 <vTaskSwitchContext+0xa8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003de6:	4b27      	ldr	r3, [pc, #156]	@ (8003e84 <vTaskSwitchContext+0xac>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dec:	e042      	b.n	8003e74 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003dee:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <vTaskSwitchContext+0xac>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df4:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <vTaskSwitchContext+0xb0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e011      	b.n	8003e20 <vTaskSwitchContext+0x48>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <vTaskSwitchContext+0x42>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	607b      	str	r3, [r7, #4]
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <vTaskSwitchContext+0x3e>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	491a      	ldr	r1, [pc, #104]	@ (8003e8c <vTaskSwitchContext+0xb4>)
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0e3      	beq.n	8003dfc <vTaskSwitchContext+0x24>
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <vTaskSwitchContext+0xb4>)
 8003e40:	4413      	add	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3308      	adds	r3, #8
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d104      	bne.n	8003e64 <vTaskSwitchContext+0x8c>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <vTaskSwitchContext+0xb8>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4a06      	ldr	r2, [pc, #24]	@ (8003e88 <vTaskSwitchContext+0xb0>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000d20 	.word	0x20000d20
 8003e84:	20000d0c 	.word	0x20000d0c
 8003e88:	20000d00 	.word	0x20000d00
 8003e8c:	20000828 	.word	0x20000828
 8003e90:	20000824 	.word	0x20000824

08003e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	60fb      	str	r3, [r7, #12]
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ebc:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <vTaskPlaceOnEventList+0x48>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fe fd52 	bl	800296e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eca:	2101      	movs	r1, #1
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	f000 fa81 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000824 	.word	0x20000824

08003ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	617b      	str	r3, [r7, #20]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4619      	mov	r1, r3
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7fe fd07 	bl	8002926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	68b8      	ldr	r0, [r7, #8]
 8003f28:	f000 fa54 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
	}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000824 	.word	0x20000824

08003f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	60fb      	str	r3, [r7, #12]
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fd38 	bl	80029e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f70:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe8 <xTaskRemoveFromEventList+0xb0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fd2f 	bl	80029e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f86:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <xTaskRemoveFromEventList+0xb4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d903      	bls.n	8003f96 <xTaskRemoveFromEventList+0x5e>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <xTaskRemoveFromEventList+0xb4>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <xTaskRemoveFromEventList+0xb8>)
 8003fa4:	441a      	add	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fe fcba 	bl	8002926 <vListInsertEnd>
 8003fb2:	e005      	b.n	8003fc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480e      	ldr	r0, [pc, #56]	@ (8003ff4 <xTaskRemoveFromEventList+0xbc>)
 8003fbc:	f7fe fcb3 	bl	8002926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <xTaskRemoveFromEventList+0xc0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d905      	bls.n	8003fda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <xTaskRemoveFromEventList+0xc4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e001      	b.n	8003fde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000d20 	.word	0x20000d20
 8003fec:	20000d00 	.word	0x20000d00
 8003ff0:	20000828 	.word	0x20000828
 8003ff4:	20000cb8 	.word	0x20000cb8
 8003ff8:	20000824 	.word	0x20000824
 8003ffc:	20000d0c 	.word	0x20000d0c

08004000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <vTaskInternalSetTimeOutState+0x24>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <vTaskInternalSetTimeOutState+0x28>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	605a      	str	r2, [r3, #4]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	20000d10 	.word	0x20000d10
 8004028:	20000cfc 	.word	0x20000cfc

0800402c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	613b      	str	r3, [r7, #16]
}
 800404e:	bf00      	nop
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60fb      	str	r3, [r7, #12]
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	e7fd      	b.n	800406e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004072:	f000 fe91 	bl	8004d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004076:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <xTaskCheckForTimeOut+0xc0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d102      	bne.n	8004096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e023      	b.n	80040de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <xTaskCheckForTimeOut+0xc4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d007      	beq.n	80040b2 <xTaskCheckForTimeOut+0x86>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	e015      	b.n	80040de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d20b      	bcs.n	80040d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad2      	subs	r2, r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff99 	bl	8004000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	e004      	b.n	80040de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040da:	2301      	movs	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040de:	f000 fe8d 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 80040e2:	69fb      	ldr	r3, [r7, #28]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000cfc 	.word	0x20000cfc
 80040f0:	20000d10 	.word	0x20000d10

080040f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040f8:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <vTaskMissedYield+0x14>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000d0c 	.word	0x20000d0c

0800410c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004114:	f000 f852 	bl	80041bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <prvIdleTask+0x28>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d9f9      	bls.n	8004114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <prvIdleTask+0x2c>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004130:	e7f0      	b.n	8004114 <prvIdleTask+0x8>
 8004132:	bf00      	nop
 8004134:	20000828 	.word	0x20000828
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	e00c      	b.n	8004162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4a12      	ldr	r2, [pc, #72]	@ (800419c <prvInitialiseTaskLists+0x60>)
 8004154:	4413      	add	r3, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fbb8 	bl	80028cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3301      	adds	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b37      	cmp	r3, #55	@ 0x37
 8004166:	d9ef      	bls.n	8004148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004168:	480d      	ldr	r0, [pc, #52]	@ (80041a0 <prvInitialiseTaskLists+0x64>)
 800416a:	f7fe fbaf 	bl	80028cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800416e:	480d      	ldr	r0, [pc, #52]	@ (80041a4 <prvInitialiseTaskLists+0x68>)
 8004170:	f7fe fbac 	bl	80028cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004174:	480c      	ldr	r0, [pc, #48]	@ (80041a8 <prvInitialiseTaskLists+0x6c>)
 8004176:	f7fe fba9 	bl	80028cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800417a:	480c      	ldr	r0, [pc, #48]	@ (80041ac <prvInitialiseTaskLists+0x70>)
 800417c:	f7fe fba6 	bl	80028cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004180:	480b      	ldr	r0, [pc, #44]	@ (80041b0 <prvInitialiseTaskLists+0x74>)
 8004182:	f7fe fba3 	bl	80028cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004186:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <prvInitialiseTaskLists+0x78>)
 8004188:	4a05      	ldr	r2, [pc, #20]	@ (80041a0 <prvInitialiseTaskLists+0x64>)
 800418a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800418c:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <prvInitialiseTaskLists+0x7c>)
 800418e:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <prvInitialiseTaskLists+0x68>)
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000828 	.word	0x20000828
 80041a0:	20000c88 	.word	0x20000c88
 80041a4:	20000c9c 	.word	0x20000c9c
 80041a8:	20000cb8 	.word	0x20000cb8
 80041ac:	20000ccc 	.word	0x20000ccc
 80041b0:	20000ce4 	.word	0x20000ce4
 80041b4:	20000cb0 	.word	0x20000cb0
 80041b8:	20000cb4 	.word	0x20000cb4

080041bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c2:	e019      	b.n	80041f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041c4:	f000 fde8 	bl	8004d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c8:	4b10      	ldr	r3, [pc, #64]	@ (800420c <prvCheckTasksWaitingTermination+0x50>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fc03 	bl	80029e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <prvCheckTasksWaitingTermination+0x54>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3b01      	subs	r3, #1
 80041e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004210 <prvCheckTasksWaitingTermination+0x54>)
 80041e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <prvCheckTasksWaitingTermination+0x58>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <prvCheckTasksWaitingTermination+0x58>)
 80041ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041ee:	f000 fe05 	bl	8004dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f810 	bl	8004218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f8:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <prvCheckTasksWaitingTermination+0x58>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e1      	bne.n	80041c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000ccc 	.word	0x20000ccc
 8004210:	20000cf8 	.word	0x20000cf8
 8004214:	20000ce0 	.word	0x20000ce0

08004218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	4618      	mov	r0, r3
 8004230:	f000 ffa2 	bl	8005178 <vPortFree>
				vPortFree( pxTCB );
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 ff9f 	bl	8005178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800423a:	e019      	b.n	8004270 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004242:	2b01      	cmp	r3, #1
 8004244:	d103      	bne.n	800424e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 ff96 	bl	8005178 <vPortFree>
	}
 800424c:	e010      	b.n	8004270 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004254:	2b02      	cmp	r3, #2
 8004256:	d00b      	beq.n	8004270 <prvDeleteTCB+0x58>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <prvDeleteTCB+0x54>
	}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <prvResetNextTaskUnblockTime+0x38>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004288:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <prvResetNextTaskUnblockTime+0x3c>)
 800428a:	f04f 32ff 	mov.w	r2, #4294967295
 800428e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004290:	e008      	b.n	80042a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004292:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <prvResetNextTaskUnblockTime+0x38>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a04      	ldr	r2, [pc, #16]	@ (80042b4 <prvResetNextTaskUnblockTime+0x3c>)
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000cb0 	.word	0x20000cb0
 80042b4:	20000d18 	.word	0x20000d18

080042b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <xTaskGetSchedulerState+0x34>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042c6:	2301      	movs	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	e008      	b.n	80042de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <xTaskGetSchedulerState+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042d4:	2302      	movs	r3, #2
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e001      	b.n	80042de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042de:	687b      	ldr	r3, [r7, #4]
	}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000d04 	.word	0x20000d04
 80042f0:	20000d20 	.word	0x20000d20

080042f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d058      	beq.n	80043bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800430a:	4b2f      	ldr	r3, [pc, #188]	@ (80043c8 <xTaskPriorityDisinherit+0xd4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	d00b      	beq.n	800432c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60bb      	str	r3, [r7, #8]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435e:	429a      	cmp	r2, r3
 8004360:	d02c      	beq.n	80043bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d128      	bne.n	80043bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fb36 	bl	80029e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <xTaskPriorityDisinherit+0xd8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d903      	bls.n	800439c <xTaskPriorityDisinherit+0xa8>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	4a0c      	ldr	r2, [pc, #48]	@ (80043cc <xTaskPriorityDisinherit+0xd8>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a09      	ldr	r2, [pc, #36]	@ (80043d0 <xTaskPriorityDisinherit+0xdc>)
 80043aa:	441a      	add	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe fab7 	bl	8002926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
	}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000824 	.word	0x20000824
 80043cc:	20000d00 	.word	0x20000d00
 80043d0:	20000828 	.word	0x20000828

080043d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043de:	4b21      	ldr	r3, [pc, #132]	@ (8004464 <prvAddCurrentTaskToDelayedList+0x90>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e4:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe faf8 	bl	80029e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d10a      	bne.n	800440e <prvAddCurrentTaskToDelayedList+0x3a>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4819      	ldr	r0, [pc, #100]	@ (800446c <prvAddCurrentTaskToDelayedList+0x98>)
 8004408:	f7fe fa8d 	bl	8002926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800440c:	e026      	b.n	800445c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	429a      	cmp	r2, r3
 8004424:	d209      	bcs.n	800443a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004426:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b0f      	ldr	r3, [pc, #60]	@ (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fa9b 	bl	800296e <vListInsert>
}
 8004438:	e010      	b.n	800445c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800443a:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <prvAddCurrentTaskToDelayedList+0xa0>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe fa91 	bl	800296e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <prvAddCurrentTaskToDelayedList+0xa4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	d202      	bcs.n	800445c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000cfc 	.word	0x20000cfc
 8004468:	20000824 	.word	0x20000824
 800446c:	20000ce4 	.word	0x20000ce4
 8004470:	20000cb4 	.word	0x20000cb4
 8004474:	20000cb0 	.word	0x20000cb0
 8004478:	20000d18 	.word	0x20000d18

0800447c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	@ 0x28
 8004480:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004486:	f000 fb13 	bl	8004ab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800448a:	4b1d      	ldr	r3, [pc, #116]	@ (8004500 <xTimerCreateTimerTask+0x84>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d021      	beq.n	80044d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800449a:	1d3a      	adds	r2, r7, #4
 800449c:	f107 0108 	add.w	r1, r7, #8
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe f9f7 	bl	8002898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	9202      	str	r2, [sp, #8]
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	2302      	movs	r3, #2
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	460a      	mov	r2, r1
 80044bc:	4911      	ldr	r1, [pc, #68]	@ (8004504 <xTimerCreateTimerTask+0x88>)
 80044be:	4812      	ldr	r0, [pc, #72]	@ (8004508 <xTimerCreateTimerTask+0x8c>)
 80044c0:	f7ff f8d0 	bl	8003664 <xTaskCreateStatic>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a11      	ldr	r2, [pc, #68]	@ (800450c <xTimerCreateTimerTask+0x90>)
 80044c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ca:	4b10      	ldr	r3, [pc, #64]	@ (800450c <xTimerCreateTimerTask+0x90>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044d2:	2301      	movs	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	613b      	str	r3, [r7, #16]
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000d54 	.word	0x20000d54
 8004504:	080062cc 	.word	0x080062cc
 8004508:	08004649 	.word	0x08004649
 800450c:	20000d58 	.word	0x20000d58

08004510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	@ 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10b      	bne.n	8004540 <xTimerGenericCommand+0x30>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	623b      	str	r3, [r7, #32]
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <xTimerGenericCommand+0x98>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02a      	beq.n	800459e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b05      	cmp	r3, #5
 8004558:	dc18      	bgt.n	800458c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800455a:	f7ff fead 	bl	80042b8 <xTaskGetSchedulerState>
 800455e:	4603      	mov	r3, r0
 8004560:	2b02      	cmp	r3, #2
 8004562:	d109      	bne.n	8004578 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004564:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <xTimerGenericCommand+0x98>)
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	f107 0110 	add.w	r1, r7, #16
 800456c:	2300      	movs	r3, #0
 800456e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004570:	f7fe fba8 	bl	8002cc4 <xQueueGenericSend>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24
 8004576:	e012      	b.n	800459e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <xTimerGenericCommand+0x98>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	f107 0110 	add.w	r1, r7, #16
 8004580:	2300      	movs	r3, #0
 8004582:	2200      	movs	r2, #0
 8004584:	f7fe fb9e 	bl	8002cc4 <xQueueGenericSend>
 8004588:	6278      	str	r0, [r7, #36]	@ 0x24
 800458a:	e008      	b.n	800459e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <xTimerGenericCommand+0x98>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	f107 0110 	add.w	r1, r7, #16
 8004594:	2300      	movs	r3, #0
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	f7fe fcb2 	bl	8002f00 <xQueueGenericSendFromISR>
 800459c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3728      	adds	r7, #40	@ 0x28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000d54 	.word	0x20000d54

080045ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b6:	4b23      	ldr	r3, [pc, #140]	@ (8004644 <prvProcessExpiredTimer+0x98>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fa0b 	bl	80029e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d023      	beq.n	8004620 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	18d1      	adds	r1, r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	6978      	ldr	r0, [r7, #20]
 80045e6:	f000 f8d5 	bl	8004794 <prvInsertTimerInActiveList>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045f0:	2300      	movs	r3, #0
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	2100      	movs	r1, #0
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f7ff ff88 	bl	8004510 <xTimerGenericCommand>
 8004600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d114      	bne.n	8004632 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	b2da      	uxtb	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	6978      	ldr	r0, [r7, #20]
 8004638:	4798      	blx	r3
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000d4c 	.word	0x20000d4c

08004648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f859 	bl	800470c <prvGetNextExpireTime>
 800465a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4619      	mov	r1, r3
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f805 	bl	8004670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004666:	f000 f8d7 	bl	8004818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800466a:	bf00      	nop
 800466c:	e7f0      	b.n	8004650 <prvTimerTask+0x8>
	...

08004670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800467a:	f7ff fa37 	bl	8003aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800467e:	f107 0308 	add.w	r3, r7, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f866 	bl	8004754 <prvSampleTimeNow>
 8004688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d130      	bne.n	80046f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <prvProcessTimerOrBlockTask+0x3c>
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	429a      	cmp	r2, r3
 800469c:	d806      	bhi.n	80046ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800469e:	f7ff fa33 	bl	8003b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff81 	bl	80045ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046aa:	e024      	b.n	80046f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046b2:	4b13      	ldr	r3, [pc, #76]	@ (8004700 <prvProcessTimerOrBlockTask+0x90>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <prvProcessTimerOrBlockTask+0x50>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <prvProcessTimerOrBlockTask+0x52>
 80046c0:	2300      	movs	r3, #0
 80046c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <prvProcessTimerOrBlockTask+0x94>)
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fe fef5 	bl	80034c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046d6:	f7ff fa17 	bl	8003b08 <xTaskResumeAll>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <prvProcessTimerOrBlockTask+0x98>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
}
 80046f0:	e001      	b.n	80046f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046f2:	f7ff fa09 	bl	8003b08 <xTaskResumeAll>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000d50 	.word	0x20000d50
 8004704:	20000d54 	.word	0x20000d54
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004714:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <prvGetNextExpireTime+0x44>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <prvGetNextExpireTime+0x16>
 800471e:	2201      	movs	r2, #1
 8004720:	e000      	b.n	8004724 <prvGetNextExpireTime+0x18>
 8004722:	2200      	movs	r2, #0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004730:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <prvGetNextExpireTime+0x44>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e001      	b.n	8004740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004740:	68fb      	ldr	r3, [r7, #12]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000d4c 	.word	0x20000d4c

08004754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800475c:	f7ff fa72 	bl	8003c44 <xTaskGetTickCount>
 8004760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <prvSampleTimeNow+0x3c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	429a      	cmp	r2, r3
 800476a:	d205      	bcs.n	8004778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800476c:	f000 f93a 	bl	80049e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e002      	b.n	800477e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800477e:	4a04      	ldr	r2, [pc, #16]	@ (8004790 <prvSampleTimeNow+0x3c>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004784:	68fb      	ldr	r3, [r7, #12]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000d5c 	.word	0x20000d5c

08004794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d812      	bhi.n	80047e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad2      	subs	r2, r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e01b      	b.n	8004806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <prvInsertTimerInActiveList+0x7c>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe f8c8 	bl	800296e <vListInsert>
 80047de:	e012      	b.n	8004806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d206      	bcs.n	80047f6 <prvInsertTimerInActiveList+0x62>
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e007      	b.n	8004806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047f6:	4b07      	ldr	r3, [pc, #28]	@ (8004814 <prvInsertTimerInActiveList+0x80>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe f8b4 	bl	800296e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004806:	697b      	ldr	r3, [r7, #20]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000d50 	.word	0x20000d50
 8004814:	20000d4c 	.word	0x20000d4c

08004818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	@ 0x38
 800481c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800481e:	e0ce      	b.n	80049be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	da19      	bge.n	800485a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	3304      	adds	r3, #4
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800482c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61fb      	str	r3, [r7, #28]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800484a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004850:	6850      	ldr	r0, [r2, #4]
 8004852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	4611      	mov	r1, r2
 8004858:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f2c0 80ae 	blt.w	80049be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe f8b4 	bl	80029e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004878:	463b      	mov	r3, r7
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff6a 	bl	8004754 <prvSampleTimeNow>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b09      	cmp	r3, #9
 8004886:	f200 8097 	bhi.w	80049b8 <prvProcessReceivedCommands+0x1a0>
 800488a:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <prvProcessReceivedCommands+0x78>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048b9 	.word	0x080048b9
 800489c:	0800492f 	.word	0x0800492f
 80048a0:	08004943 	.word	0x08004943
 80048a4:	0800498f 	.word	0x0800498f
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048b9 	.word	0x080048b9
 80048b0:	0800492f 	.word	0x0800492f
 80048b4:	08004943 	.word	0x08004943
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	18d1      	adds	r1, r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048d8:	f7ff ff5c 	bl	8004794 <prvInsertTimerInActiveList>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d06c      	beq.n	80049bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d061      	beq.n	80049bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	441a      	add	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	2100      	movs	r1, #0
 8004908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800490a:	f7ff fe01 	bl	8004510 <xTimerGenericCommand>
 800490e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d152      	bne.n	80049bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	61bb      	str	r3, [r7, #24]
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	b2da      	uxtb	r2, r3
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004940:	e03d      	b.n	80049be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	b2da      	uxtb	r2, r3
 800494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	617b      	str	r3, [r7, #20]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	18d1      	adds	r1, r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004988:	f7ff ff04 	bl	8004794 <prvInsertTimerInActiveList>
					break;
 800498c:	e017      	b.n	80049be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d103      	bne.n	80049a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800499c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800499e:	f000 fbeb 	bl	8005178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049a2:	e00c      	b.n	80049be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049b6:	e002      	b.n	80049be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <prvProcessReceivedCommands+0x1a6>
					break;
 80049bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <prvProcessReceivedCommands+0x1c8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	1d39      	adds	r1, r7, #4
 80049c4:	2200      	movs	r2, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fb50 	bl	800306c <xQueueReceive>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f47f af26 	bne.w	8004820 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3730      	adds	r7, #48	@ 0x30
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000d54 	.word	0x20000d54

080049e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ea:	e049      	b.n	8004a80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049ec:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa8 <prvSwitchTimerLists+0xc4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f6:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa8 <prvSwitchTimerLists+0xc4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd ffeb 	bl	80029e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02f      	beq.n	8004a80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d90e      	bls.n	8004a50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <prvSwitchTimerLists+0xc4>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fd ff90 	bl	800296e <vListInsert>
 8004a4e:	e017      	b.n	8004a80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7ff fd58 	bl	8004510 <xTimerGenericCommand>
 8004a60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	603b      	str	r3, [r7, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <prvSwitchTimerLists+0xc4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1b0      	bne.n	80049ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a8a:	4b07      	ldr	r3, [pc, #28]	@ (8004aa8 <prvSwitchTimerLists+0xc4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a90:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <prvSwitchTimerLists+0xc8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a04      	ldr	r2, [pc, #16]	@ (8004aa8 <prvSwitchTimerLists+0xc4>)
 8004a96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a98:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <prvSwitchTimerLists+0xc8>)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000d4c 	.word	0x20000d4c
 8004aac:	20000d50 	.word	0x20000d50

08004ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ab6:	f000 f96f 	bl	8004d98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aba:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d120      	bne.n	8004b04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ac2:	4814      	ldr	r0, [pc, #80]	@ (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ac4:	f7fd ff02 	bl	80028cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ac8:	4813      	ldr	r0, [pc, #76]	@ (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004aca:	f7fd feff 	bl	80028cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <prvCheckForValidListAndQueue+0x6c>)
 8004ad0:	4a10      	ldr	r2, [pc, #64]	@ (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ad4:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <prvCheckForValidListAndQueue+0x70>)
 8004ad6:	4a10      	ldr	r2, [pc, #64]	@ (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004ad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <prvCheckForValidListAndQueue+0x74>)
 8004ae0:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <prvCheckForValidListAndQueue+0x78>)
 8004ae2:	2110      	movs	r1, #16
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fe f80f 	bl	8002b08 <xQueueGenericCreateStatic>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af0:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	490b      	ldr	r1, [pc, #44]	@ (8004b2c <prvCheckForValidListAndQueue+0x7c>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fcb4 	bl	800346c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b04:	f000 f97a 	bl	8004dfc <vPortExitCritical>
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000d54 	.word	0x20000d54
 8004b14:	20000d24 	.word	0x20000d24
 8004b18:	20000d38 	.word	0x20000d38
 8004b1c:	20000d4c 	.word	0x20000d4c
 8004b20:	20000d50 	.word	0x20000d50
 8004b24:	20000e00 	.word	0x20000e00
 8004b28:	20000d60 	.word	0x20000d60
 8004b2c:	080062d4 	.word	0x080062d4

08004b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b60:	4a0c      	ldr	r2, [pc, #48]	@ (8004b94 <pxPortInitialiseStack+0x64>)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b14      	subs	r3, #20
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f06f 0202 	mvn.w	r2, #2
 8004b7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3b20      	subs	r3, #32
 8004b84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	08004b99 	.word	0x08004b99

08004b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <prvTaskExitError+0x58>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d00b      	beq.n	8004bc4 <prvTaskExitError+0x2c>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <prvTaskExitError+0x28>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60bb      	str	r3, [r7, #8]
}
 8004bd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bd8:	bf00      	nop
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0fc      	beq.n	8004bda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000000c 	.word	0x2000000c
	...

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	@ (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <xPortStartScheduler+0x124>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a47      	ldr	r2, [pc, #284]	@ (8004d78 <xPortStartScheduler+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10b      	bne.n	8004c78 <xPortStartScheduler+0x28>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c78:	4b3e      	ldr	r3, [pc, #248]	@ (8004d74 <xPortStartScheduler+0x124>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <xPortStartScheduler+0x12c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10b      	bne.n	8004c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	613b      	str	r3, [r7, #16]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <xPortStartScheduler+0x130>)
 8004c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	22ff      	movs	r2, #255	@ 0xff
 8004caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <xPortStartScheduler+0x134>)
 8004cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cc2:	4b31      	ldr	r3, [pc, #196]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc8:	e009      	b.n	8004cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cca:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d0ef      	beq.n	8004cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1c3 0307 	rsb	r3, r3, #7
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00b      	beq.n	8004d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60bb      	str	r3, [r7, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	4a1c      	ldr	r2, [pc, #112]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d38:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d44:	f000 f8da 	bl	8004efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <xPortStartScheduler+0x140>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d4e:	f000 f8f9 	bl	8004f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <xPortStartScheduler+0x144>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <xPortStartScheduler+0x144>)
 8004d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d5e:	f7ff ff63 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d62:	f7ff f839 	bl	8003dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d66:	f7ff ff17 	bl	8004b98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	410fc271 	.word	0x410fc271
 8004d7c:	410fc270 	.word	0x410fc270
 8004d80:	e000e400 	.word	0xe000e400
 8004d84:	20000e54 	.word	0x20000e54
 8004d88:	20000e58 	.word	0x20000e58
 8004d8c:	e000ed20 	.word	0xe000ed20
 8004d90:	2000000c 	.word	0x2000000c
 8004d94:	e000ef34 	.word	0xe000ef34

08004d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d110      	bne.n	8004de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <vPortEnterCritical+0x60>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	603b      	str	r3, [r7, #0]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <vPortEnterCritical+0x4a>
	}
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <vPortExitCritical+0x26>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	607b      	str	r3, [r7, #4]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	4a08      	ldr	r2, [pc, #32]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e2c:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <vPortExitCritical+0x44>
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f01e 0f10 	tst.w	lr, #16
 8004e60:	bf08      	it	eq
 8004e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e74:	f380 8811 	msr	BASEPRI, r0
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f7fe ffaa 	bl	8003dd8 <vTaskSwitchContext>
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f380 8811 	msr	BASEPRI, r0
 8004e8c:	bc09      	pop	{r0, r3}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f01e 0f10 	tst.w	lr, #16
 8004e9a:	bf08      	it	eq
 8004e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ea0:	f380 8809 	msr	PSP, r0
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ed2:	f7fe fec7 	bl	8003c64 <xTaskIncrementTick>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <xPortSysTickHandler+0x40>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <vPortSetupTimerInterrupt+0x38>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <vPortSetupTimerInterrupt+0x3c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	@ (8004f3c <vPortSetupTimerInterrupt+0x40>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <vPortSetupTimerInterrupt+0x44>)
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f1e:	4b04      	ldr	r3, [pc, #16]	@ (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e010 	.word	0xe000e010
 8004f34:	e000e018 	.word	0xe000e018
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	10624dd3 	.word	0x10624dd3
 8004f40:	e000e014 	.word	0xe000e014

08004f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f54 <vPortEnableVFP+0x10>
 8004f48:	6801      	ldr	r1, [r0, #0]
 8004f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f4e:	6001      	str	r1, [r0, #0]
 8004f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f52:	bf00      	nop
 8004f54:	e000ed88 	.word	0xe000ed88

08004f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f5e:	f3ef 8305 	mrs	r3, IPSR
 8004f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d915      	bls.n	8004f96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f6a:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <vPortValidateInterruptPriority+0x74>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f74:	4b16      	ldr	r3, [pc, #88]	@ (8004fd0 <vPortValidateInterruptPriority+0x78>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	7afa      	ldrb	r2, [r7, #11]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d20b      	bcs.n	8004f96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f96:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <vPortValidateInterruptPriority+0x7c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <vPortValidateInterruptPriority+0x80>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d90b      	bls.n	8004fbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	603b      	str	r3, [r7, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <vPortValidateInterruptPriority+0x62>
	}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e3f0 	.word	0xe000e3f0
 8004fd0:	20000e54 	.word	0x20000e54
 8004fd4:	e000ed0c 	.word	0xe000ed0c
 8004fd8:	20000e58 	.word	0x20000e58

08004fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	@ 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fe8:	f7fe fd80 	bl	8003aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fec:	4b5c      	ldr	r3, [pc, #368]	@ (8005160 <pvPortMalloc+0x184>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ff4:	f000 f924 	bl	8005240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8005164 <pvPortMalloc+0x188>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 8095 	bne.w	8005130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01e      	beq.n	800504a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800500c:	2208      	movs	r2, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d015      	beq.n	800504a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	3308      	adds	r3, #8
 8005026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <pvPortMalloc+0x6e>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	617b      	str	r3, [r7, #20]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d06f      	beq.n	8005130 <pvPortMalloc+0x154>
 8005050:	4b45      	ldr	r3, [pc, #276]	@ (8005168 <pvPortMalloc+0x18c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d86a      	bhi.n	8005130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800505a:	4b44      	ldr	r3, [pc, #272]	@ (800516c <pvPortMalloc+0x190>)
 800505c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800505e:	4b43      	ldr	r3, [pc, #268]	@ (800516c <pvPortMalloc+0x190>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005064:	e004      	b.n	8005070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <pvPortMalloc+0xa6>
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f1      	bne.n	8005066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005082:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <pvPortMalloc+0x184>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005088:	429a      	cmp	r2, r3
 800508a:	d051      	beq.n	8005130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	4413      	add	r3, r2
 8005094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	2308      	movs	r3, #8
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d920      	bls.n	80050f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4413      	add	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <pvPortMalloc+0xfc>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1ad2      	subs	r2, r2, r3
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050ea:	69b8      	ldr	r0, [r7, #24]
 80050ec:	f000 f90a 	bl	8005304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005168 <pvPortMalloc+0x18c>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <pvPortMalloc+0x18c>)
 80050fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <pvPortMalloc+0x18c>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <pvPortMalloc+0x194>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d203      	bcs.n	8005112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800510a:	4b17      	ldr	r3, [pc, #92]	@ (8005168 <pvPortMalloc+0x18c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <pvPortMalloc+0x194>)
 8005110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <pvPortMalloc+0x188>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	431a      	orrs	r2, r3
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005126:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <pvPortMalloc+0x198>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a11      	ldr	r2, [pc, #68]	@ (8005174 <pvPortMalloc+0x198>)
 800512e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005130:	f7fe fcea 	bl	8003b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <pvPortMalloc+0x17a>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <pvPortMalloc+0x176>
	return pvReturn;
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3728      	adds	r7, #40	@ 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20004a64 	.word	0x20004a64
 8005164:	20004a78 	.word	0x20004a78
 8005168:	20004a68 	.word	0x20004a68
 800516c:	20004a5c 	.word	0x20004a5c
 8005170:	20004a6c 	.word	0x20004a6c
 8005174:	20004a70 	.word	0x20004a70

08005178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04f      	beq.n	800522a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800518a:	2308      	movs	r3, #8
 800518c:	425b      	negs	r3, r3
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4413      	add	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <vPortFree+0xbc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <vPortFree+0x46>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60fb      	str	r3, [r7, #12]
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <vPortFree+0x66>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <vPortFree+0xbc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01e      	beq.n	800522a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11a      	bne.n	800522a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <vPortFree+0xbc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	401a      	ands	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005204:	f7fe fc72 	bl	8003aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <vPortFree+0xc0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4413      	add	r3, r2
 8005212:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <vPortFree+0xc0>)
 8005214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005216:	6938      	ldr	r0, [r7, #16]
 8005218:	f000 f874 	bl	8005304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <vPortFree+0xc4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	4a06      	ldr	r2, [pc, #24]	@ (800523c <vPortFree+0xc4>)
 8005224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005226:	f7fe fc6f 	bl	8003b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20004a78 	.word	0x20004a78
 8005238:	20004a68 	.word	0x20004a68
 800523c:	20004a74 	.word	0x20004a74

08005240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005246:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800524a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800524c:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <prvHeapInit+0xac>)
 800524e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3307      	adds	r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0307 	bic.w	r3, r3, #7
 8005266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <prvHeapInit+0xac>)
 8005270:	4413      	add	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <prvHeapInit+0xb0>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800527e:	4b1c      	ldr	r3, [pc, #112]	@ (80052f0 <prvHeapInit+0xb0>)
 8005280:	2200      	movs	r2, #0
 8005282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4413      	add	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800528c:	2208      	movs	r2, #8
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <prvHeapInit+0xb4>)
 80052a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052a2:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <prvHeapInit+0xb4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052aa:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <prvHeapInit+0xb4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c0:	4b0c      	ldr	r3, [pc, #48]	@ (80052f4 <prvHeapInit+0xb4>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <prvHeapInit+0xb8>)
 80052ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a09      	ldr	r2, [pc, #36]	@ (80052fc <prvHeapInit+0xbc>)
 80052d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <prvHeapInit+0xc0>)
 80052da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	20000e5c 	.word	0x20000e5c
 80052f0:	20004a5c 	.word	0x20004a5c
 80052f4:	20004a64 	.word	0x20004a64
 80052f8:	20004a6c 	.word	0x20004a6c
 80052fc:	20004a68 	.word	0x20004a68
 8005300:	20004a78 	.word	0x20004a78

08005304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800530c:	4b28      	ldr	r3, [pc, #160]	@ (80053b0 <prvInsertBlockIntoFreeList+0xac>)
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e002      	b.n	8005318 <prvInsertBlockIntoFreeList+0x14>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d8f7      	bhi.n	8005312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	4413      	add	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d108      	bne.n	8005346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	441a      	add	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d118      	bne.n	800538c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d00d      	beq.n	8005382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e008      	b.n	8005394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005382:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e003      	b.n	8005394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d002      	beq.n	80053a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20004a5c 	.word	0x20004a5c
 80053b4:	20004a64 	.word	0x20004a64

080053b8 <std>:
 80053b8:	2300      	movs	r3, #0
 80053ba:	b510      	push	{r4, lr}
 80053bc:	4604      	mov	r4, r0
 80053be:	e9c0 3300 	strd	r3, r3, [r0]
 80053c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053c6:	6083      	str	r3, [r0, #8]
 80053c8:	8181      	strh	r1, [r0, #12]
 80053ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80053cc:	81c2      	strh	r2, [r0, #14]
 80053ce:	6183      	str	r3, [r0, #24]
 80053d0:	4619      	mov	r1, r3
 80053d2:	2208      	movs	r2, #8
 80053d4:	305c      	adds	r0, #92	@ 0x5c
 80053d6:	f000 f906 	bl	80055e6 <memset>
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <std+0x58>)
 80053dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <std+0x5c>)
 80053e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <std+0x60>)
 80053e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053e6:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <std+0x64>)
 80053e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <std+0x68>)
 80053ec:	6224      	str	r4, [r4, #32]
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d006      	beq.n	8005400 <std+0x48>
 80053f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053f6:	4294      	cmp	r4, r2
 80053f8:	d002      	beq.n	8005400 <std+0x48>
 80053fa:	33d0      	adds	r3, #208	@ 0xd0
 80053fc:	429c      	cmp	r4, r3
 80053fe:	d105      	bne.n	800540c <std+0x54>
 8005400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f000 b966 	b.w	80056d8 <__retarget_lock_init_recursive>
 800540c:	bd10      	pop	{r4, pc}
 800540e:	bf00      	nop
 8005410:	08005561 	.word	0x08005561
 8005414:	08005583 	.word	0x08005583
 8005418:	080055bb 	.word	0x080055bb
 800541c:	080055df 	.word	0x080055df
 8005420:	20004a7c 	.word	0x20004a7c

08005424 <stdio_exit_handler>:
 8005424:	4a02      	ldr	r2, [pc, #8]	@ (8005430 <stdio_exit_handler+0xc>)
 8005426:	4903      	ldr	r1, [pc, #12]	@ (8005434 <stdio_exit_handler+0x10>)
 8005428:	4803      	ldr	r0, [pc, #12]	@ (8005438 <stdio_exit_handler+0x14>)
 800542a:	f000 b869 	b.w	8005500 <_fwalk_sglue>
 800542e:	bf00      	nop
 8005430:	20000010 	.word	0x20000010
 8005434:	08005f91 	.word	0x08005f91
 8005438:	20000020 	.word	0x20000020

0800543c <cleanup_stdio>:
 800543c:	6841      	ldr	r1, [r0, #4]
 800543e:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <cleanup_stdio+0x34>)
 8005440:	4299      	cmp	r1, r3
 8005442:	b510      	push	{r4, lr}
 8005444:	4604      	mov	r4, r0
 8005446:	d001      	beq.n	800544c <cleanup_stdio+0x10>
 8005448:	f000 fda2 	bl	8005f90 <_fflush_r>
 800544c:	68a1      	ldr	r1, [r4, #8]
 800544e:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <cleanup_stdio+0x38>)
 8005450:	4299      	cmp	r1, r3
 8005452:	d002      	beq.n	800545a <cleanup_stdio+0x1e>
 8005454:	4620      	mov	r0, r4
 8005456:	f000 fd9b 	bl	8005f90 <_fflush_r>
 800545a:	68e1      	ldr	r1, [r4, #12]
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <cleanup_stdio+0x3c>)
 800545e:	4299      	cmp	r1, r3
 8005460:	d004      	beq.n	800546c <cleanup_stdio+0x30>
 8005462:	4620      	mov	r0, r4
 8005464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005468:	f000 bd92 	b.w	8005f90 <_fflush_r>
 800546c:	bd10      	pop	{r4, pc}
 800546e:	bf00      	nop
 8005470:	20004a7c 	.word	0x20004a7c
 8005474:	20004ae4 	.word	0x20004ae4
 8005478:	20004b4c 	.word	0x20004b4c

0800547c <global_stdio_init.part.0>:
 800547c:	b510      	push	{r4, lr}
 800547e:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <global_stdio_init.part.0+0x30>)
 8005480:	4c0b      	ldr	r4, [pc, #44]	@ (80054b0 <global_stdio_init.part.0+0x34>)
 8005482:	4a0c      	ldr	r2, [pc, #48]	@ (80054b4 <global_stdio_init.part.0+0x38>)
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	4620      	mov	r0, r4
 8005488:	2200      	movs	r2, #0
 800548a:	2104      	movs	r1, #4
 800548c:	f7ff ff94 	bl	80053b8 <std>
 8005490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005494:	2201      	movs	r2, #1
 8005496:	2109      	movs	r1, #9
 8005498:	f7ff ff8e 	bl	80053b8 <std>
 800549c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054a0:	2202      	movs	r2, #2
 80054a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a6:	2112      	movs	r1, #18
 80054a8:	f7ff bf86 	b.w	80053b8 <std>
 80054ac:	20004bb4 	.word	0x20004bb4
 80054b0:	20004a7c 	.word	0x20004a7c
 80054b4:	08005425 	.word	0x08005425

080054b8 <__sfp_lock_acquire>:
 80054b8:	4801      	ldr	r0, [pc, #4]	@ (80054c0 <__sfp_lock_acquire+0x8>)
 80054ba:	f000 b90e 	b.w	80056da <__retarget_lock_acquire_recursive>
 80054be:	bf00      	nop
 80054c0:	20004bbd 	.word	0x20004bbd

080054c4 <__sfp_lock_release>:
 80054c4:	4801      	ldr	r0, [pc, #4]	@ (80054cc <__sfp_lock_release+0x8>)
 80054c6:	f000 b909 	b.w	80056dc <__retarget_lock_release_recursive>
 80054ca:	bf00      	nop
 80054cc:	20004bbd 	.word	0x20004bbd

080054d0 <__sinit>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	4604      	mov	r4, r0
 80054d4:	f7ff fff0 	bl	80054b8 <__sfp_lock_acquire>
 80054d8:	6a23      	ldr	r3, [r4, #32]
 80054da:	b11b      	cbz	r3, 80054e4 <__sinit+0x14>
 80054dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e0:	f7ff bff0 	b.w	80054c4 <__sfp_lock_release>
 80054e4:	4b04      	ldr	r3, [pc, #16]	@ (80054f8 <__sinit+0x28>)
 80054e6:	6223      	str	r3, [r4, #32]
 80054e8:	4b04      	ldr	r3, [pc, #16]	@ (80054fc <__sinit+0x2c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f5      	bne.n	80054dc <__sinit+0xc>
 80054f0:	f7ff ffc4 	bl	800547c <global_stdio_init.part.0>
 80054f4:	e7f2      	b.n	80054dc <__sinit+0xc>
 80054f6:	bf00      	nop
 80054f8:	0800543d 	.word	0x0800543d
 80054fc:	20004bb4 	.word	0x20004bb4

08005500 <_fwalk_sglue>:
 8005500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005504:	4607      	mov	r7, r0
 8005506:	4688      	mov	r8, r1
 8005508:	4614      	mov	r4, r2
 800550a:	2600      	movs	r6, #0
 800550c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005510:	f1b9 0901 	subs.w	r9, r9, #1
 8005514:	d505      	bpl.n	8005522 <_fwalk_sglue+0x22>
 8005516:	6824      	ldr	r4, [r4, #0]
 8005518:	2c00      	cmp	r4, #0
 800551a:	d1f7      	bne.n	800550c <_fwalk_sglue+0xc>
 800551c:	4630      	mov	r0, r6
 800551e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005522:	89ab      	ldrh	r3, [r5, #12]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d907      	bls.n	8005538 <_fwalk_sglue+0x38>
 8005528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800552c:	3301      	adds	r3, #1
 800552e:	d003      	beq.n	8005538 <_fwalk_sglue+0x38>
 8005530:	4629      	mov	r1, r5
 8005532:	4638      	mov	r0, r7
 8005534:	47c0      	blx	r8
 8005536:	4306      	orrs	r6, r0
 8005538:	3568      	adds	r5, #104	@ 0x68
 800553a:	e7e9      	b.n	8005510 <_fwalk_sglue+0x10>

0800553c <iprintf>:
 800553c:	b40f      	push	{r0, r1, r2, r3}
 800553e:	b507      	push	{r0, r1, r2, lr}
 8005540:	4906      	ldr	r1, [pc, #24]	@ (800555c <iprintf+0x20>)
 8005542:	ab04      	add	r3, sp, #16
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	f853 2b04 	ldr.w	r2, [r3], #4
 800554a:	6881      	ldr	r1, [r0, #8]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	f000 f9f7 	bl	8005940 <_vfiprintf_r>
 8005552:	b003      	add	sp, #12
 8005554:	f85d eb04 	ldr.w	lr, [sp], #4
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr
 800555c:	2000001c 	.word	0x2000001c

08005560 <__sread>:
 8005560:	b510      	push	{r4, lr}
 8005562:	460c      	mov	r4, r1
 8005564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005568:	f000 f868 	bl	800563c <_read_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	bfab      	itete	ge
 8005570:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005572:	89a3      	ldrhlt	r3, [r4, #12]
 8005574:	181b      	addge	r3, r3, r0
 8005576:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800557a:	bfac      	ite	ge
 800557c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800557e:	81a3      	strhlt	r3, [r4, #12]
 8005580:	bd10      	pop	{r4, pc}

08005582 <__swrite>:
 8005582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005586:	461f      	mov	r7, r3
 8005588:	898b      	ldrh	r3, [r1, #12]
 800558a:	05db      	lsls	r3, r3, #23
 800558c:	4605      	mov	r5, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4616      	mov	r6, r2
 8005592:	d505      	bpl.n	80055a0 <__swrite+0x1e>
 8005594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005598:	2302      	movs	r3, #2
 800559a:	2200      	movs	r2, #0
 800559c:	f000 f83c 	bl	8005618 <_lseek_r>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	4632      	mov	r2, r6
 80055ae:	463b      	mov	r3, r7
 80055b0:	4628      	mov	r0, r5
 80055b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b6:	f000 b853 	b.w	8005660 <_write_r>

080055ba <__sseek>:
 80055ba:	b510      	push	{r4, lr}
 80055bc:	460c      	mov	r4, r1
 80055be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c2:	f000 f829 	bl	8005618 <_lseek_r>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	bf15      	itete	ne
 80055cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055d6:	81a3      	strheq	r3, [r4, #12]
 80055d8:	bf18      	it	ne
 80055da:	81a3      	strhne	r3, [r4, #12]
 80055dc:	bd10      	pop	{r4, pc}

080055de <__sclose>:
 80055de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e2:	f000 b809 	b.w	80055f8 <_close_r>

080055e6 <memset>:
 80055e6:	4402      	add	r2, r0
 80055e8:	4603      	mov	r3, r0
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d100      	bne.n	80055f0 <memset+0xa>
 80055ee:	4770      	bx	lr
 80055f0:	f803 1b01 	strb.w	r1, [r3], #1
 80055f4:	e7f9      	b.n	80055ea <memset+0x4>
	...

080055f8 <_close_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	@ (8005614 <_close_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fb facb 	bl	8000b9e <_close>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_close_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_close_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20004bb8 	.word	0x20004bb8

08005618 <_lseek_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	@ (8005638 <_lseek_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fb fae0 	bl	8000bec <_lseek>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_lseek_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_lseek_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20004bb8 	.word	0x20004bb8

0800563c <_read_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_read_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fb fa6e 	bl	8000b2c <_read>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_read_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_read_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20004bb8 	.word	0x20004bb8

08005660 <_write_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	@ (8005680 <_write_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fb fa79 	bl	8000b66 <_write>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_write_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_write_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20004bb8 	.word	0x20004bb8

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	@ (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000001c 	.word	0x2000001c

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	@ (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	@ (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	@ (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	@ (80056d4 <__libc_init_array+0x44>)
 80056a4:	f000 fdc4 	bl	8006230 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08006330 	.word	0x08006330
 80056cc:	08006330 	.word	0x08006330
 80056d0:	08006330 	.word	0x08006330
 80056d4:	08006334 	.word	0x08006334

080056d8 <__retarget_lock_init_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_acquire_recursive>:
 80056da:	4770      	bx	lr

080056dc <__retarget_lock_release_recursive>:
 80056dc:	4770      	bx	lr

080056de <memcpy>:
 80056de:	440a      	add	r2, r1
 80056e0:	4291      	cmp	r1, r2
 80056e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80056e6:	d100      	bne.n	80056ea <memcpy+0xc>
 80056e8:	4770      	bx	lr
 80056ea:	b510      	push	{r4, lr}
 80056ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f4:	4291      	cmp	r1, r2
 80056f6:	d1f9      	bne.n	80056ec <memcpy+0xe>
 80056f8:	bd10      	pop	{r4, pc}
	...

080056fc <_free_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4605      	mov	r5, r0
 8005700:	2900      	cmp	r1, #0
 8005702:	d041      	beq.n	8005788 <_free_r+0x8c>
 8005704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005708:	1f0c      	subs	r4, r1, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfb8      	it	lt
 800570e:	18e4      	addlt	r4, r4, r3
 8005710:	f000 f8e0 	bl	80058d4 <__malloc_lock>
 8005714:	4a1d      	ldr	r2, [pc, #116]	@ (800578c <_free_r+0x90>)
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	b933      	cbnz	r3, 8005728 <_free_r+0x2c>
 800571a:	6063      	str	r3, [r4, #4]
 800571c:	6014      	str	r4, [r2, #0]
 800571e:	4628      	mov	r0, r5
 8005720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005724:	f000 b8dc 	b.w	80058e0 <__malloc_unlock>
 8005728:	42a3      	cmp	r3, r4
 800572a:	d908      	bls.n	800573e <_free_r+0x42>
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	1821      	adds	r1, r4, r0
 8005730:	428b      	cmp	r3, r1
 8005732:	bf01      	itttt	eq
 8005734:	6819      	ldreq	r1, [r3, #0]
 8005736:	685b      	ldreq	r3, [r3, #4]
 8005738:	1809      	addeq	r1, r1, r0
 800573a:	6021      	streq	r1, [r4, #0]
 800573c:	e7ed      	b.n	800571a <_free_r+0x1e>
 800573e:	461a      	mov	r2, r3
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	b10b      	cbz	r3, 8005748 <_free_r+0x4c>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d9fa      	bls.n	800573e <_free_r+0x42>
 8005748:	6811      	ldr	r1, [r2, #0]
 800574a:	1850      	adds	r0, r2, r1
 800574c:	42a0      	cmp	r0, r4
 800574e:	d10b      	bne.n	8005768 <_free_r+0x6c>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	4401      	add	r1, r0
 8005754:	1850      	adds	r0, r2, r1
 8005756:	4283      	cmp	r3, r0
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	d1e0      	bne.n	800571e <_free_r+0x22>
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	6053      	str	r3, [r2, #4]
 8005762:	4408      	add	r0, r1
 8005764:	6010      	str	r0, [r2, #0]
 8005766:	e7da      	b.n	800571e <_free_r+0x22>
 8005768:	d902      	bls.n	8005770 <_free_r+0x74>
 800576a:	230c      	movs	r3, #12
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	e7d6      	b.n	800571e <_free_r+0x22>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	1821      	adds	r1, r4, r0
 8005774:	428b      	cmp	r3, r1
 8005776:	bf04      	itt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	bf04      	itt	eq
 8005780:	1809      	addeq	r1, r1, r0
 8005782:	6021      	streq	r1, [r4, #0]
 8005784:	6054      	str	r4, [r2, #4]
 8005786:	e7ca      	b.n	800571e <_free_r+0x22>
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	bf00      	nop
 800578c:	20004bc4 	.word	0x20004bc4

08005790 <sbrk_aligned>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4e0f      	ldr	r6, [pc, #60]	@ (80057d0 <sbrk_aligned+0x40>)
 8005794:	460c      	mov	r4, r1
 8005796:	6831      	ldr	r1, [r6, #0]
 8005798:	4605      	mov	r5, r0
 800579a:	b911      	cbnz	r1, 80057a2 <sbrk_aligned+0x12>
 800579c:	f000 fcb4 	bl	8006108 <_sbrk_r>
 80057a0:	6030      	str	r0, [r6, #0]
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 fcaf 	bl	8006108 <_sbrk_r>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	d103      	bne.n	80057b6 <sbrk_aligned+0x26>
 80057ae:	f04f 34ff 	mov.w	r4, #4294967295
 80057b2:	4620      	mov	r0, r4
 80057b4:	bd70      	pop	{r4, r5, r6, pc}
 80057b6:	1cc4      	adds	r4, r0, #3
 80057b8:	f024 0403 	bic.w	r4, r4, #3
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d0f8      	beq.n	80057b2 <sbrk_aligned+0x22>
 80057c0:	1a21      	subs	r1, r4, r0
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 fca0 	bl	8006108 <_sbrk_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d1f2      	bne.n	80057b2 <sbrk_aligned+0x22>
 80057cc:	e7ef      	b.n	80057ae <sbrk_aligned+0x1e>
 80057ce:	bf00      	nop
 80057d0:	20004bc0 	.word	0x20004bc0

080057d4 <_malloc_r>:
 80057d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d8:	1ccd      	adds	r5, r1, #3
 80057da:	f025 0503 	bic.w	r5, r5, #3
 80057de:	3508      	adds	r5, #8
 80057e0:	2d0c      	cmp	r5, #12
 80057e2:	bf38      	it	cc
 80057e4:	250c      	movcc	r5, #12
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	4606      	mov	r6, r0
 80057ea:	db01      	blt.n	80057f0 <_malloc_r+0x1c>
 80057ec:	42a9      	cmp	r1, r5
 80057ee:	d904      	bls.n	80057fa <_malloc_r+0x26>
 80057f0:	230c      	movs	r3, #12
 80057f2:	6033      	str	r3, [r6, #0]
 80057f4:	2000      	movs	r0, #0
 80057f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058d0 <_malloc_r+0xfc>
 80057fe:	f000 f869 	bl	80058d4 <__malloc_lock>
 8005802:	f8d8 3000 	ldr.w	r3, [r8]
 8005806:	461c      	mov	r4, r3
 8005808:	bb44      	cbnz	r4, 800585c <_malloc_r+0x88>
 800580a:	4629      	mov	r1, r5
 800580c:	4630      	mov	r0, r6
 800580e:	f7ff ffbf 	bl	8005790 <sbrk_aligned>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	4604      	mov	r4, r0
 8005816:	d158      	bne.n	80058ca <_malloc_r+0xf6>
 8005818:	f8d8 4000 	ldr.w	r4, [r8]
 800581c:	4627      	mov	r7, r4
 800581e:	2f00      	cmp	r7, #0
 8005820:	d143      	bne.n	80058aa <_malloc_r+0xd6>
 8005822:	2c00      	cmp	r4, #0
 8005824:	d04b      	beq.n	80058be <_malloc_r+0xea>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	4639      	mov	r1, r7
 800582a:	4630      	mov	r0, r6
 800582c:	eb04 0903 	add.w	r9, r4, r3
 8005830:	f000 fc6a 	bl	8006108 <_sbrk_r>
 8005834:	4581      	cmp	r9, r0
 8005836:	d142      	bne.n	80058be <_malloc_r+0xea>
 8005838:	6821      	ldr	r1, [r4, #0]
 800583a:	1a6d      	subs	r5, r5, r1
 800583c:	4629      	mov	r1, r5
 800583e:	4630      	mov	r0, r6
 8005840:	f7ff ffa6 	bl	8005790 <sbrk_aligned>
 8005844:	3001      	adds	r0, #1
 8005846:	d03a      	beq.n	80058be <_malloc_r+0xea>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	442b      	add	r3, r5
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	f8d8 3000 	ldr.w	r3, [r8]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	bb62      	cbnz	r2, 80058b0 <_malloc_r+0xdc>
 8005856:	f8c8 7000 	str.w	r7, [r8]
 800585a:	e00f      	b.n	800587c <_malloc_r+0xa8>
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	1b52      	subs	r2, r2, r5
 8005860:	d420      	bmi.n	80058a4 <_malloc_r+0xd0>
 8005862:	2a0b      	cmp	r2, #11
 8005864:	d917      	bls.n	8005896 <_malloc_r+0xc2>
 8005866:	1961      	adds	r1, r4, r5
 8005868:	42a3      	cmp	r3, r4
 800586a:	6025      	str	r5, [r4, #0]
 800586c:	bf18      	it	ne
 800586e:	6059      	strne	r1, [r3, #4]
 8005870:	6863      	ldr	r3, [r4, #4]
 8005872:	bf08      	it	eq
 8005874:	f8c8 1000 	streq.w	r1, [r8]
 8005878:	5162      	str	r2, [r4, r5]
 800587a:	604b      	str	r3, [r1, #4]
 800587c:	4630      	mov	r0, r6
 800587e:	f000 f82f 	bl	80058e0 <__malloc_unlock>
 8005882:	f104 000b 	add.w	r0, r4, #11
 8005886:	1d23      	adds	r3, r4, #4
 8005888:	f020 0007 	bic.w	r0, r0, #7
 800588c:	1ac2      	subs	r2, r0, r3
 800588e:	bf1c      	itt	ne
 8005890:	1a1b      	subne	r3, r3, r0
 8005892:	50a3      	strne	r3, [r4, r2]
 8005894:	e7af      	b.n	80057f6 <_malloc_r+0x22>
 8005896:	6862      	ldr	r2, [r4, #4]
 8005898:	42a3      	cmp	r3, r4
 800589a:	bf0c      	ite	eq
 800589c:	f8c8 2000 	streq.w	r2, [r8]
 80058a0:	605a      	strne	r2, [r3, #4]
 80058a2:	e7eb      	b.n	800587c <_malloc_r+0xa8>
 80058a4:	4623      	mov	r3, r4
 80058a6:	6864      	ldr	r4, [r4, #4]
 80058a8:	e7ae      	b.n	8005808 <_malloc_r+0x34>
 80058aa:	463c      	mov	r4, r7
 80058ac:	687f      	ldr	r7, [r7, #4]
 80058ae:	e7b6      	b.n	800581e <_malloc_r+0x4a>
 80058b0:	461a      	mov	r2, r3
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d1fb      	bne.n	80058b0 <_malloc_r+0xdc>
 80058b8:	2300      	movs	r3, #0
 80058ba:	6053      	str	r3, [r2, #4]
 80058bc:	e7de      	b.n	800587c <_malloc_r+0xa8>
 80058be:	230c      	movs	r3, #12
 80058c0:	6033      	str	r3, [r6, #0]
 80058c2:	4630      	mov	r0, r6
 80058c4:	f000 f80c 	bl	80058e0 <__malloc_unlock>
 80058c8:	e794      	b.n	80057f4 <_malloc_r+0x20>
 80058ca:	6005      	str	r5, [r0, #0]
 80058cc:	e7d6      	b.n	800587c <_malloc_r+0xa8>
 80058ce:	bf00      	nop
 80058d0:	20004bc4 	.word	0x20004bc4

080058d4 <__malloc_lock>:
 80058d4:	4801      	ldr	r0, [pc, #4]	@ (80058dc <__malloc_lock+0x8>)
 80058d6:	f7ff bf00 	b.w	80056da <__retarget_lock_acquire_recursive>
 80058da:	bf00      	nop
 80058dc:	20004bbc 	.word	0x20004bbc

080058e0 <__malloc_unlock>:
 80058e0:	4801      	ldr	r0, [pc, #4]	@ (80058e8 <__malloc_unlock+0x8>)
 80058e2:	f7ff befb 	b.w	80056dc <__retarget_lock_release_recursive>
 80058e6:	bf00      	nop
 80058e8:	20004bbc 	.word	0x20004bbc

080058ec <__sfputc_r>:
 80058ec:	6893      	ldr	r3, [r2, #8]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	b410      	push	{r4}
 80058f4:	6093      	str	r3, [r2, #8]
 80058f6:	da08      	bge.n	800590a <__sfputc_r+0x1e>
 80058f8:	6994      	ldr	r4, [r2, #24]
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	db01      	blt.n	8005902 <__sfputc_r+0x16>
 80058fe:	290a      	cmp	r1, #10
 8005900:	d103      	bne.n	800590a <__sfputc_r+0x1e>
 8005902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005906:	f000 bb6b 	b.w	8005fe0 <__swbuf_r>
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	1c58      	adds	r0, r3, #1
 800590e:	6010      	str	r0, [r2, #0]
 8005910:	7019      	strb	r1, [r3, #0]
 8005912:	4608      	mov	r0, r1
 8005914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005918:	4770      	bx	lr

0800591a <__sfputs_r>:
 800591a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591c:	4606      	mov	r6, r0
 800591e:	460f      	mov	r7, r1
 8005920:	4614      	mov	r4, r2
 8005922:	18d5      	adds	r5, r2, r3
 8005924:	42ac      	cmp	r4, r5
 8005926:	d101      	bne.n	800592c <__sfputs_r+0x12>
 8005928:	2000      	movs	r0, #0
 800592a:	e007      	b.n	800593c <__sfputs_r+0x22>
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	463a      	mov	r2, r7
 8005932:	4630      	mov	r0, r6
 8005934:	f7ff ffda 	bl	80058ec <__sfputc_r>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d1f3      	bne.n	8005924 <__sfputs_r+0xa>
 800593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005940 <_vfiprintf_r>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	460d      	mov	r5, r1
 8005946:	b09d      	sub	sp, #116	@ 0x74
 8005948:	4614      	mov	r4, r2
 800594a:	4698      	mov	r8, r3
 800594c:	4606      	mov	r6, r0
 800594e:	b118      	cbz	r0, 8005958 <_vfiprintf_r+0x18>
 8005950:	6a03      	ldr	r3, [r0, #32]
 8005952:	b90b      	cbnz	r3, 8005958 <_vfiprintf_r+0x18>
 8005954:	f7ff fdbc 	bl	80054d0 <__sinit>
 8005958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800595a:	07d9      	lsls	r1, r3, #31
 800595c:	d405      	bmi.n	800596a <_vfiprintf_r+0x2a>
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	059a      	lsls	r2, r3, #22
 8005962:	d402      	bmi.n	800596a <_vfiprintf_r+0x2a>
 8005964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005966:	f7ff feb8 	bl	80056da <__retarget_lock_acquire_recursive>
 800596a:	89ab      	ldrh	r3, [r5, #12]
 800596c:	071b      	lsls	r3, r3, #28
 800596e:	d501      	bpl.n	8005974 <_vfiprintf_r+0x34>
 8005970:	692b      	ldr	r3, [r5, #16]
 8005972:	b99b      	cbnz	r3, 800599c <_vfiprintf_r+0x5c>
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f000 fb70 	bl	800605c <__swsetup_r>
 800597c:	b170      	cbz	r0, 800599c <_vfiprintf_r+0x5c>
 800597e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005980:	07dc      	lsls	r4, r3, #31
 8005982:	d504      	bpl.n	800598e <_vfiprintf_r+0x4e>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b01d      	add	sp, #116	@ 0x74
 800598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	0598      	lsls	r0, r3, #22
 8005992:	d4f7      	bmi.n	8005984 <_vfiprintf_r+0x44>
 8005994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005996:	f7ff fea1 	bl	80056dc <__retarget_lock_release_recursive>
 800599a:	e7f3      	b.n	8005984 <_vfiprintf_r+0x44>
 800599c:	2300      	movs	r3, #0
 800599e:	9309      	str	r3, [sp, #36]	@ 0x24
 80059a0:	2320      	movs	r3, #32
 80059a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059aa:	2330      	movs	r3, #48	@ 0x30
 80059ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b5c <_vfiprintf_r+0x21c>
 80059b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059b4:	f04f 0901 	mov.w	r9, #1
 80059b8:	4623      	mov	r3, r4
 80059ba:	469a      	mov	sl, r3
 80059bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c0:	b10a      	cbz	r2, 80059c6 <_vfiprintf_r+0x86>
 80059c2:	2a25      	cmp	r2, #37	@ 0x25
 80059c4:	d1f9      	bne.n	80059ba <_vfiprintf_r+0x7a>
 80059c6:	ebba 0b04 	subs.w	fp, sl, r4
 80059ca:	d00b      	beq.n	80059e4 <_vfiprintf_r+0xa4>
 80059cc:	465b      	mov	r3, fp
 80059ce:	4622      	mov	r2, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff ffa1 	bl	800591a <__sfputs_r>
 80059d8:	3001      	adds	r0, #1
 80059da:	f000 80a7 	beq.w	8005b2c <_vfiprintf_r+0x1ec>
 80059de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059e0:	445a      	add	r2, fp
 80059e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80059e4:	f89a 3000 	ldrb.w	r3, [sl]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 809f 	beq.w	8005b2c <_vfiprintf_r+0x1ec>
 80059ee:	2300      	movs	r3, #0
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295
 80059f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f8:	f10a 0a01 	add.w	sl, sl, #1
 80059fc:	9304      	str	r3, [sp, #16]
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a06:	4654      	mov	r4, sl
 8005a08:	2205      	movs	r2, #5
 8005a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0e:	4853      	ldr	r0, [pc, #332]	@ (8005b5c <_vfiprintf_r+0x21c>)
 8005a10:	f7fa fbfe 	bl	8000210 <memchr>
 8005a14:	9a04      	ldr	r2, [sp, #16]
 8005a16:	b9d8      	cbnz	r0, 8005a50 <_vfiprintf_r+0x110>
 8005a18:	06d1      	lsls	r1, r2, #27
 8005a1a:	bf44      	itt	mi
 8005a1c:	2320      	movmi	r3, #32
 8005a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a22:	0713      	lsls	r3, r2, #28
 8005a24:	bf44      	itt	mi
 8005a26:	232b      	movmi	r3, #43	@ 0x2b
 8005a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a32:	d015      	beq.n	8005a60 <_vfiprintf_r+0x120>
 8005a34:	9a07      	ldr	r2, [sp, #28]
 8005a36:	4654      	mov	r4, sl
 8005a38:	2000      	movs	r0, #0
 8005a3a:	f04f 0c0a 	mov.w	ip, #10
 8005a3e:	4621      	mov	r1, r4
 8005a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a44:	3b30      	subs	r3, #48	@ 0x30
 8005a46:	2b09      	cmp	r3, #9
 8005a48:	d94b      	bls.n	8005ae2 <_vfiprintf_r+0x1a2>
 8005a4a:	b1b0      	cbz	r0, 8005a7a <_vfiprintf_r+0x13a>
 8005a4c:	9207      	str	r2, [sp, #28]
 8005a4e:	e014      	b.n	8005a7a <_vfiprintf_r+0x13a>
 8005a50:	eba0 0308 	sub.w	r3, r0, r8
 8005a54:	fa09 f303 	lsl.w	r3, r9, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	46a2      	mov	sl, r4
 8005a5e:	e7d2      	b.n	8005a06 <_vfiprintf_r+0xc6>
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	1d19      	adds	r1, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	9103      	str	r1, [sp, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfbb      	ittet	lt
 8005a6c:	425b      	neglt	r3, r3
 8005a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a72:	9307      	strge	r3, [sp, #28]
 8005a74:	9307      	strlt	r3, [sp, #28]
 8005a76:	bfb8      	it	lt
 8005a78:	9204      	strlt	r2, [sp, #16]
 8005a7a:	7823      	ldrb	r3, [r4, #0]
 8005a7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a7e:	d10a      	bne.n	8005a96 <_vfiprintf_r+0x156>
 8005a80:	7863      	ldrb	r3, [r4, #1]
 8005a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a84:	d132      	bne.n	8005aec <_vfiprintf_r+0x1ac>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	1d1a      	adds	r2, r3, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	9203      	str	r2, [sp, #12]
 8005a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a92:	3402      	adds	r4, #2
 8005a94:	9305      	str	r3, [sp, #20]
 8005a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b6c <_vfiprintf_r+0x22c>
 8005a9a:	7821      	ldrb	r1, [r4, #0]
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	f7fa fbb6 	bl	8000210 <memchr>
 8005aa4:	b138      	cbz	r0, 8005ab6 <_vfiprintf_r+0x176>
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	eba0 000a 	sub.w	r0, r0, sl
 8005aac:	2240      	movs	r2, #64	@ 0x40
 8005aae:	4082      	lsls	r2, r0
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	3401      	adds	r4, #1
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aba:	4829      	ldr	r0, [pc, #164]	@ (8005b60 <_vfiprintf_r+0x220>)
 8005abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ac0:	2206      	movs	r2, #6
 8005ac2:	f7fa fba5 	bl	8000210 <memchr>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d03f      	beq.n	8005b4a <_vfiprintf_r+0x20a>
 8005aca:	4b26      	ldr	r3, [pc, #152]	@ (8005b64 <_vfiprintf_r+0x224>)
 8005acc:	bb1b      	cbnz	r3, 8005b16 <_vfiprintf_r+0x1d6>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	3307      	adds	r3, #7
 8005ad2:	f023 0307 	bic.w	r3, r3, #7
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	9303      	str	r3, [sp, #12]
 8005ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005adc:	443b      	add	r3, r7
 8005ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ae0:	e76a      	b.n	80059b8 <_vfiprintf_r+0x78>
 8005ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	2001      	movs	r0, #1
 8005aea:	e7a8      	b.n	8005a3e <_vfiprintf_r+0xfe>
 8005aec:	2300      	movs	r3, #0
 8005aee:	3401      	adds	r4, #1
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 0c0a 	mov.w	ip, #10
 8005af8:	4620      	mov	r0, r4
 8005afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005afe:	3a30      	subs	r2, #48	@ 0x30
 8005b00:	2a09      	cmp	r2, #9
 8005b02:	d903      	bls.n	8005b0c <_vfiprintf_r+0x1cc>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0c6      	beq.n	8005a96 <_vfiprintf_r+0x156>
 8005b08:	9105      	str	r1, [sp, #20]
 8005b0a:	e7c4      	b.n	8005a96 <_vfiprintf_r+0x156>
 8005b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b10:	4604      	mov	r4, r0
 8005b12:	2301      	movs	r3, #1
 8005b14:	e7f0      	b.n	8005af8 <_vfiprintf_r+0x1b8>
 8005b16:	ab03      	add	r3, sp, #12
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	462a      	mov	r2, r5
 8005b1c:	4b12      	ldr	r3, [pc, #72]	@ (8005b68 <_vfiprintf_r+0x228>)
 8005b1e:	a904      	add	r1, sp, #16
 8005b20:	4630      	mov	r0, r6
 8005b22:	f3af 8000 	nop.w
 8005b26:	4607      	mov	r7, r0
 8005b28:	1c78      	adds	r0, r7, #1
 8005b2a:	d1d6      	bne.n	8005ada <_vfiprintf_r+0x19a>
 8005b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	d405      	bmi.n	8005b3e <_vfiprintf_r+0x1fe>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	059a      	lsls	r2, r3, #22
 8005b36:	d402      	bmi.n	8005b3e <_vfiprintf_r+0x1fe>
 8005b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b3a:	f7ff fdcf 	bl	80056dc <__retarget_lock_release_recursive>
 8005b3e:	89ab      	ldrh	r3, [r5, #12]
 8005b40:	065b      	lsls	r3, r3, #25
 8005b42:	f53f af1f 	bmi.w	8005984 <_vfiprintf_r+0x44>
 8005b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b48:	e71e      	b.n	8005988 <_vfiprintf_r+0x48>
 8005b4a:	ab03      	add	r3, sp, #12
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	462a      	mov	r2, r5
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <_vfiprintf_r+0x228>)
 8005b52:	a904      	add	r1, sp, #16
 8005b54:	4630      	mov	r0, r6
 8005b56:	f000 f879 	bl	8005c4c <_printf_i>
 8005b5a:	e7e4      	b.n	8005b26 <_vfiprintf_r+0x1e6>
 8005b5c:	080062f4 	.word	0x080062f4
 8005b60:	080062fe 	.word	0x080062fe
 8005b64:	00000000 	.word	0x00000000
 8005b68:	0800591b 	.word	0x0800591b
 8005b6c:	080062fa 	.word	0x080062fa

08005b70 <_printf_common>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	4616      	mov	r6, r2
 8005b76:	4698      	mov	r8, r3
 8005b78:	688a      	ldr	r2, [r1, #8]
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bfb8      	it	lt
 8005b84:	4613      	movlt	r3, r2
 8005b86:	6033      	str	r3, [r6, #0]
 8005b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	b10a      	cbz	r2, 8005b96 <_printf_common+0x26>
 8005b92:	3301      	adds	r3, #1
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	0699      	lsls	r1, r3, #26
 8005b9a:	bf42      	ittt	mi
 8005b9c:	6833      	ldrmi	r3, [r6, #0]
 8005b9e:	3302      	addmi	r3, #2
 8005ba0:	6033      	strmi	r3, [r6, #0]
 8005ba2:	6825      	ldr	r5, [r4, #0]
 8005ba4:	f015 0506 	ands.w	r5, r5, #6
 8005ba8:	d106      	bne.n	8005bb8 <_printf_common+0x48>
 8005baa:	f104 0a19 	add.w	sl, r4, #25
 8005bae:	68e3      	ldr	r3, [r4, #12]
 8005bb0:	6832      	ldr	r2, [r6, #0]
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	42ab      	cmp	r3, r5
 8005bb6:	dc26      	bgt.n	8005c06 <_printf_common+0x96>
 8005bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	3b00      	subs	r3, #0
 8005bc0:	bf18      	it	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	0692      	lsls	r2, r2, #26
 8005bc6:	d42b      	bmi.n	8005c20 <_printf_common+0xb0>
 8005bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bcc:	4641      	mov	r1, r8
 8005bce:	4638      	mov	r0, r7
 8005bd0:	47c8      	blx	r9
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d01e      	beq.n	8005c14 <_printf_common+0xa4>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	f003 0306 	and.w	r3, r3, #6
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	bf02      	ittt	eq
 8005be2:	68e5      	ldreq	r5, [r4, #12]
 8005be4:	6833      	ldreq	r3, [r6, #0]
 8005be6:	1aed      	subeq	r5, r5, r3
 8005be8:	68a3      	ldr	r3, [r4, #8]
 8005bea:	bf0c      	ite	eq
 8005bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf0:	2500      	movne	r5, #0
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	bfc4      	itt	gt
 8005bf6:	1a9b      	subgt	r3, r3, r2
 8005bf8:	18ed      	addgt	r5, r5, r3
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	341a      	adds	r4, #26
 8005bfe:	42b5      	cmp	r5, r6
 8005c00:	d11a      	bne.n	8005c38 <_printf_common+0xc8>
 8005c02:	2000      	movs	r0, #0
 8005c04:	e008      	b.n	8005c18 <_printf_common+0xa8>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4652      	mov	r2, sl
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	47c8      	blx	r9
 8005c10:	3001      	adds	r0, #1
 8005c12:	d103      	bne.n	8005c1c <_printf_common+0xac>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	e7c6      	b.n	8005bae <_printf_common+0x3e>
 8005c20:	18e1      	adds	r1, r4, r3
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	2030      	movs	r0, #48	@ 0x30
 8005c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c2a:	4422      	add	r2, r4
 8005c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c34:	3302      	adds	r3, #2
 8005c36:	e7c7      	b.n	8005bc8 <_printf_common+0x58>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	4638      	mov	r0, r7
 8005c40:	47c8      	blx	r9
 8005c42:	3001      	adds	r0, #1
 8005c44:	d0e6      	beq.n	8005c14 <_printf_common+0xa4>
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7d9      	b.n	8005bfe <_printf_common+0x8e>
	...

08005c4c <_printf_i>:
 8005c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	7e0f      	ldrb	r7, [r1, #24]
 8005c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c54:	2f78      	cmp	r7, #120	@ 0x78
 8005c56:	4691      	mov	r9, r2
 8005c58:	4680      	mov	r8, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	469a      	mov	sl, r3
 8005c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c62:	d807      	bhi.n	8005c74 <_printf_i+0x28>
 8005c64:	2f62      	cmp	r7, #98	@ 0x62
 8005c66:	d80a      	bhi.n	8005c7e <_printf_i+0x32>
 8005c68:	2f00      	cmp	r7, #0
 8005c6a:	f000 80d1 	beq.w	8005e10 <_printf_i+0x1c4>
 8005c6e:	2f58      	cmp	r7, #88	@ 0x58
 8005c70:	f000 80b8 	beq.w	8005de4 <_printf_i+0x198>
 8005c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c7c:	e03a      	b.n	8005cf4 <_printf_i+0xa8>
 8005c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c82:	2b15      	cmp	r3, #21
 8005c84:	d8f6      	bhi.n	8005c74 <_printf_i+0x28>
 8005c86:	a101      	add	r1, pc, #4	@ (adr r1, 8005c8c <_printf_i+0x40>)
 8005c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005cf9 	.word	0x08005cf9
 8005c94:	08005c75 	.word	0x08005c75
 8005c98:	08005c75 	.word	0x08005c75
 8005c9c:	08005c75 	.word	0x08005c75
 8005ca0:	08005c75 	.word	0x08005c75
 8005ca4:	08005cf9 	.word	0x08005cf9
 8005ca8:	08005c75 	.word	0x08005c75
 8005cac:	08005c75 	.word	0x08005c75
 8005cb0:	08005c75 	.word	0x08005c75
 8005cb4:	08005c75 	.word	0x08005c75
 8005cb8:	08005df7 	.word	0x08005df7
 8005cbc:	08005d23 	.word	0x08005d23
 8005cc0:	08005db1 	.word	0x08005db1
 8005cc4:	08005c75 	.word	0x08005c75
 8005cc8:	08005c75 	.word	0x08005c75
 8005ccc:	08005e19 	.word	0x08005e19
 8005cd0:	08005c75 	.word	0x08005c75
 8005cd4:	08005d23 	.word	0x08005d23
 8005cd8:	08005c75 	.word	0x08005c75
 8005cdc:	08005c75 	.word	0x08005c75
 8005ce0:	08005db9 	.word	0x08005db9
 8005ce4:	6833      	ldr	r3, [r6, #0]
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e09c      	b.n	8005e32 <_printf_i+0x1e6>
 8005cf8:	6833      	ldr	r3, [r6, #0]
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	1d19      	adds	r1, r3, #4
 8005cfe:	6031      	str	r1, [r6, #0]
 8005d00:	0606      	lsls	r6, r0, #24
 8005d02:	d501      	bpl.n	8005d08 <_printf_i+0xbc>
 8005d04:	681d      	ldr	r5, [r3, #0]
 8005d06:	e003      	b.n	8005d10 <_printf_i+0xc4>
 8005d08:	0645      	lsls	r5, r0, #25
 8005d0a:	d5fb      	bpl.n	8005d04 <_printf_i+0xb8>
 8005d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	da03      	bge.n	8005d1c <_printf_i+0xd0>
 8005d14:	232d      	movs	r3, #45	@ 0x2d
 8005d16:	426d      	negs	r5, r5
 8005d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d1c:	4858      	ldr	r0, [pc, #352]	@ (8005e80 <_printf_i+0x234>)
 8005d1e:	230a      	movs	r3, #10
 8005d20:	e011      	b.n	8005d46 <_printf_i+0xfa>
 8005d22:	6821      	ldr	r1, [r4, #0]
 8005d24:	6833      	ldr	r3, [r6, #0]
 8005d26:	0608      	lsls	r0, r1, #24
 8005d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d2c:	d402      	bmi.n	8005d34 <_printf_i+0xe8>
 8005d2e:	0649      	lsls	r1, r1, #25
 8005d30:	bf48      	it	mi
 8005d32:	b2ad      	uxthmi	r5, r5
 8005d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d36:	4852      	ldr	r0, [pc, #328]	@ (8005e80 <_printf_i+0x234>)
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	bf14      	ite	ne
 8005d3c:	230a      	movne	r3, #10
 8005d3e:	2308      	moveq	r3, #8
 8005d40:	2100      	movs	r1, #0
 8005d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d46:	6866      	ldr	r6, [r4, #4]
 8005d48:	60a6      	str	r6, [r4, #8]
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	db05      	blt.n	8005d5a <_printf_i+0x10e>
 8005d4e:	6821      	ldr	r1, [r4, #0]
 8005d50:	432e      	orrs	r6, r5
 8005d52:	f021 0104 	bic.w	r1, r1, #4
 8005d56:	6021      	str	r1, [r4, #0]
 8005d58:	d04b      	beq.n	8005df2 <_printf_i+0x1a6>
 8005d5a:	4616      	mov	r6, r2
 8005d5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d60:	fb03 5711 	mls	r7, r3, r1, r5
 8005d64:	5dc7      	ldrb	r7, [r0, r7]
 8005d66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d6a:	462f      	mov	r7, r5
 8005d6c:	42bb      	cmp	r3, r7
 8005d6e:	460d      	mov	r5, r1
 8005d70:	d9f4      	bls.n	8005d5c <_printf_i+0x110>
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d10b      	bne.n	8005d8e <_printf_i+0x142>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	07df      	lsls	r7, r3, #31
 8005d7a:	d508      	bpl.n	8005d8e <_printf_i+0x142>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	6861      	ldr	r1, [r4, #4]
 8005d80:	4299      	cmp	r1, r3
 8005d82:	bfde      	ittt	le
 8005d84:	2330      	movle	r3, #48	@ 0x30
 8005d86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d8e:	1b92      	subs	r2, r2, r6
 8005d90:	6122      	str	r2, [r4, #16]
 8005d92:	f8cd a000 	str.w	sl, [sp]
 8005d96:	464b      	mov	r3, r9
 8005d98:	aa03      	add	r2, sp, #12
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	f7ff fee7 	bl	8005b70 <_printf_common>
 8005da2:	3001      	adds	r0, #1
 8005da4:	d14a      	bne.n	8005e3c <_printf_i+0x1f0>
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295
 8005daa:	b004      	add	sp, #16
 8005dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	f043 0320 	orr.w	r3, r3, #32
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	4832      	ldr	r0, [pc, #200]	@ (8005e84 <_printf_i+0x238>)
 8005dba:	2778      	movs	r7, #120	@ 0x78
 8005dbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	6831      	ldr	r1, [r6, #0]
 8005dc4:	061f      	lsls	r7, r3, #24
 8005dc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dca:	d402      	bmi.n	8005dd2 <_printf_i+0x186>
 8005dcc:	065f      	lsls	r7, r3, #25
 8005dce:	bf48      	it	mi
 8005dd0:	b2ad      	uxthmi	r5, r5
 8005dd2:	6031      	str	r1, [r6, #0]
 8005dd4:	07d9      	lsls	r1, r3, #31
 8005dd6:	bf44      	itt	mi
 8005dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ddc:	6023      	strmi	r3, [r4, #0]
 8005dde:	b11d      	cbz	r5, 8005de8 <_printf_i+0x19c>
 8005de0:	2310      	movs	r3, #16
 8005de2:	e7ad      	b.n	8005d40 <_printf_i+0xf4>
 8005de4:	4826      	ldr	r0, [pc, #152]	@ (8005e80 <_printf_i+0x234>)
 8005de6:	e7e9      	b.n	8005dbc <_printf_i+0x170>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	f023 0320 	bic.w	r3, r3, #32
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	e7f6      	b.n	8005de0 <_printf_i+0x194>
 8005df2:	4616      	mov	r6, r2
 8005df4:	e7bd      	b.n	8005d72 <_printf_i+0x126>
 8005df6:	6833      	ldr	r3, [r6, #0]
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	6961      	ldr	r1, [r4, #20]
 8005dfc:	1d18      	adds	r0, r3, #4
 8005dfe:	6030      	str	r0, [r6, #0]
 8005e00:	062e      	lsls	r6, r5, #24
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	d501      	bpl.n	8005e0a <_printf_i+0x1be>
 8005e06:	6019      	str	r1, [r3, #0]
 8005e08:	e002      	b.n	8005e10 <_printf_i+0x1c4>
 8005e0a:	0668      	lsls	r0, r5, #25
 8005e0c:	d5fb      	bpl.n	8005e06 <_printf_i+0x1ba>
 8005e0e:	8019      	strh	r1, [r3, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	4616      	mov	r6, r2
 8005e16:	e7bc      	b.n	8005d92 <_printf_i+0x146>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	6032      	str	r2, [r6, #0]
 8005e1e:	681e      	ldr	r6, [r3, #0]
 8005e20:	6862      	ldr	r2, [r4, #4]
 8005e22:	2100      	movs	r1, #0
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7fa f9f3 	bl	8000210 <memchr>
 8005e2a:	b108      	cbz	r0, 8005e30 <_printf_i+0x1e4>
 8005e2c:	1b80      	subs	r0, r0, r6
 8005e2e:	6060      	str	r0, [r4, #4]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e3a:	e7aa      	b.n	8005d92 <_printf_i+0x146>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	4632      	mov	r2, r6
 8005e40:	4649      	mov	r1, r9
 8005e42:	4640      	mov	r0, r8
 8005e44:	47d0      	blx	sl
 8005e46:	3001      	adds	r0, #1
 8005e48:	d0ad      	beq.n	8005da6 <_printf_i+0x15a>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	d413      	bmi.n	8005e78 <_printf_i+0x22c>
 8005e50:	68e0      	ldr	r0, [r4, #12]
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	4298      	cmp	r0, r3
 8005e56:	bfb8      	it	lt
 8005e58:	4618      	movlt	r0, r3
 8005e5a:	e7a6      	b.n	8005daa <_printf_i+0x15e>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4632      	mov	r2, r6
 8005e60:	4649      	mov	r1, r9
 8005e62:	4640      	mov	r0, r8
 8005e64:	47d0      	blx	sl
 8005e66:	3001      	adds	r0, #1
 8005e68:	d09d      	beq.n	8005da6 <_printf_i+0x15a>
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	68e3      	ldr	r3, [r4, #12]
 8005e6e:	9903      	ldr	r1, [sp, #12]
 8005e70:	1a5b      	subs	r3, r3, r1
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	dcf2      	bgt.n	8005e5c <_printf_i+0x210>
 8005e76:	e7eb      	b.n	8005e50 <_printf_i+0x204>
 8005e78:	2500      	movs	r5, #0
 8005e7a:	f104 0619 	add.w	r6, r4, #25
 8005e7e:	e7f5      	b.n	8005e6c <_printf_i+0x220>
 8005e80:	08006305 	.word	0x08006305
 8005e84:	08006316 	.word	0x08006316

08005e88 <__sflush_r>:
 8005e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	0716      	lsls	r6, r2, #28
 8005e92:	4605      	mov	r5, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	d454      	bmi.n	8005f42 <__sflush_r+0xba>
 8005e98:	684b      	ldr	r3, [r1, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dc02      	bgt.n	8005ea4 <__sflush_r+0x1c>
 8005e9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dd48      	ble.n	8005f36 <__sflush_r+0xae>
 8005ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	d045      	beq.n	8005f36 <__sflush_r+0xae>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005eb0:	682f      	ldr	r7, [r5, #0]
 8005eb2:	6a21      	ldr	r1, [r4, #32]
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	d030      	beq.n	8005f1a <__sflush_r+0x92>
 8005eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	0759      	lsls	r1, r3, #29
 8005ebe:	d505      	bpl.n	8005ecc <__sflush_r+0x44>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ec6:	b10b      	cbz	r3, 8005ecc <__sflush_r+0x44>
 8005ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ed0:	6a21      	ldr	r1, [r4, #32]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b0      	blx	r6
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	d106      	bne.n	8005eea <__sflush_r+0x62>
 8005edc:	6829      	ldr	r1, [r5, #0]
 8005ede:	291d      	cmp	r1, #29
 8005ee0:	d82b      	bhi.n	8005f3a <__sflush_r+0xb2>
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <__sflush_r+0x104>)
 8005ee4:	40ca      	lsrs	r2, r1
 8005ee6:	07d6      	lsls	r6, r2, #31
 8005ee8:	d527      	bpl.n	8005f3a <__sflush_r+0xb2>
 8005eea:	2200      	movs	r2, #0
 8005eec:	6062      	str	r2, [r4, #4]
 8005eee:	04d9      	lsls	r1, r3, #19
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	6022      	str	r2, [r4, #0]
 8005ef4:	d504      	bpl.n	8005f00 <__sflush_r+0x78>
 8005ef6:	1c42      	adds	r2, r0, #1
 8005ef8:	d101      	bne.n	8005efe <__sflush_r+0x76>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	b903      	cbnz	r3, 8005f00 <__sflush_r+0x78>
 8005efe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f02:	602f      	str	r7, [r5, #0]
 8005f04:	b1b9      	cbz	r1, 8005f36 <__sflush_r+0xae>
 8005f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	d002      	beq.n	8005f14 <__sflush_r+0x8c>
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f7ff fbf4 	bl	80056fc <_free_r>
 8005f14:	2300      	movs	r3, #0
 8005f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f18:	e00d      	b.n	8005f36 <__sflush_r+0xae>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b0      	blx	r6
 8005f20:	4602      	mov	r2, r0
 8005f22:	1c50      	adds	r0, r2, #1
 8005f24:	d1c9      	bne.n	8005eba <__sflush_r+0x32>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0c6      	beq.n	8005eba <__sflush_r+0x32>
 8005f2c:	2b1d      	cmp	r3, #29
 8005f2e:	d001      	beq.n	8005f34 <__sflush_r+0xac>
 8005f30:	2b16      	cmp	r3, #22
 8005f32:	d11e      	bne.n	8005f72 <__sflush_r+0xea>
 8005f34:	602f      	str	r7, [r5, #0]
 8005f36:	2000      	movs	r0, #0
 8005f38:	e022      	b.n	8005f80 <__sflush_r+0xf8>
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	e01b      	b.n	8005f7a <__sflush_r+0xf2>
 8005f42:	690f      	ldr	r7, [r1, #16]
 8005f44:	2f00      	cmp	r7, #0
 8005f46:	d0f6      	beq.n	8005f36 <__sflush_r+0xae>
 8005f48:	0793      	lsls	r3, r2, #30
 8005f4a:	680e      	ldr	r6, [r1, #0]
 8005f4c:	bf08      	it	eq
 8005f4e:	694b      	ldreq	r3, [r1, #20]
 8005f50:	600f      	str	r7, [r1, #0]
 8005f52:	bf18      	it	ne
 8005f54:	2300      	movne	r3, #0
 8005f56:	eba6 0807 	sub.w	r8, r6, r7
 8005f5a:	608b      	str	r3, [r1, #8]
 8005f5c:	f1b8 0f00 	cmp.w	r8, #0
 8005f60:	dde9      	ble.n	8005f36 <__sflush_r+0xae>
 8005f62:	6a21      	ldr	r1, [r4, #32]
 8005f64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f66:	4643      	mov	r3, r8
 8005f68:	463a      	mov	r2, r7
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b0      	blx	r6
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	dc08      	bgt.n	8005f84 <__sflush_r+0xfc>
 8005f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f84:	4407      	add	r7, r0
 8005f86:	eba8 0800 	sub.w	r8, r8, r0
 8005f8a:	e7e7      	b.n	8005f5c <__sflush_r+0xd4>
 8005f8c:	20400001 	.word	0x20400001

08005f90 <_fflush_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	b913      	cbnz	r3, 8005fa0 <_fflush_r+0x10>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	b118      	cbz	r0, 8005faa <_fflush_r+0x1a>
 8005fa2:	6a03      	ldr	r3, [r0, #32]
 8005fa4:	b90b      	cbnz	r3, 8005faa <_fflush_r+0x1a>
 8005fa6:	f7ff fa93 	bl	80054d0 <__sinit>
 8005faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f3      	beq.n	8005f9a <_fflush_r+0xa>
 8005fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d404      	bmi.n	8005fc2 <_fflush_r+0x32>
 8005fb8:	0599      	lsls	r1, r3, #22
 8005fba:	d402      	bmi.n	8005fc2 <_fflush_r+0x32>
 8005fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fbe:	f7ff fb8c 	bl	80056da <__retarget_lock_acquire_recursive>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	f7ff ff5f 	bl	8005e88 <__sflush_r>
 8005fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fcc:	07da      	lsls	r2, r3, #31
 8005fce:	4605      	mov	r5, r0
 8005fd0:	d4e4      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	059b      	lsls	r3, r3, #22
 8005fd6:	d4e1      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fda:	f7ff fb7f 	bl	80056dc <__retarget_lock_release_recursive>
 8005fde:	e7dd      	b.n	8005f9c <_fflush_r+0xc>

08005fe0 <__swbuf_r>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	460e      	mov	r6, r1
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	b118      	cbz	r0, 8005ff2 <__swbuf_r+0x12>
 8005fea:	6a03      	ldr	r3, [r0, #32]
 8005fec:	b90b      	cbnz	r3, 8005ff2 <__swbuf_r+0x12>
 8005fee:	f7ff fa6f 	bl	80054d0 <__sinit>
 8005ff2:	69a3      	ldr	r3, [r4, #24]
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	071a      	lsls	r2, r3, #28
 8005ffa:	d501      	bpl.n	8006000 <__swbuf_r+0x20>
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	b943      	cbnz	r3, 8006012 <__swbuf_r+0x32>
 8006000:	4621      	mov	r1, r4
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f82a 	bl	800605c <__swsetup_r>
 8006008:	b118      	cbz	r0, 8006012 <__swbuf_r+0x32>
 800600a:	f04f 37ff 	mov.w	r7, #4294967295
 800600e:	4638      	mov	r0, r7
 8006010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	6922      	ldr	r2, [r4, #16]
 8006016:	1a98      	subs	r0, r3, r2
 8006018:	6963      	ldr	r3, [r4, #20]
 800601a:	b2f6      	uxtb	r6, r6
 800601c:	4283      	cmp	r3, r0
 800601e:	4637      	mov	r7, r6
 8006020:	dc05      	bgt.n	800602e <__swbuf_r+0x4e>
 8006022:	4621      	mov	r1, r4
 8006024:	4628      	mov	r0, r5
 8006026:	f7ff ffb3 	bl	8005f90 <_fflush_r>
 800602a:	2800      	cmp	r0, #0
 800602c:	d1ed      	bne.n	800600a <__swbuf_r+0x2a>
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	3b01      	subs	r3, #1
 8006032:	60a3      	str	r3, [r4, #8]
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	6022      	str	r2, [r4, #0]
 800603a:	701e      	strb	r6, [r3, #0]
 800603c:	6962      	ldr	r2, [r4, #20]
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	429a      	cmp	r2, r3
 8006042:	d004      	beq.n	800604e <__swbuf_r+0x6e>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	07db      	lsls	r3, r3, #31
 8006048:	d5e1      	bpl.n	800600e <__swbuf_r+0x2e>
 800604a:	2e0a      	cmp	r6, #10
 800604c:	d1df      	bne.n	800600e <__swbuf_r+0x2e>
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f7ff ff9d 	bl	8005f90 <_fflush_r>
 8006056:	2800      	cmp	r0, #0
 8006058:	d0d9      	beq.n	800600e <__swbuf_r+0x2e>
 800605a:	e7d6      	b.n	800600a <__swbuf_r+0x2a>

0800605c <__swsetup_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4b29      	ldr	r3, [pc, #164]	@ (8006104 <__swsetup_r+0xa8>)
 8006060:	4605      	mov	r5, r0
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	460c      	mov	r4, r1
 8006066:	b118      	cbz	r0, 8006070 <__swsetup_r+0x14>
 8006068:	6a03      	ldr	r3, [r0, #32]
 800606a:	b90b      	cbnz	r3, 8006070 <__swsetup_r+0x14>
 800606c:	f7ff fa30 	bl	80054d0 <__sinit>
 8006070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006074:	0719      	lsls	r1, r3, #28
 8006076:	d422      	bmi.n	80060be <__swsetup_r+0x62>
 8006078:	06da      	lsls	r2, r3, #27
 800607a:	d407      	bmi.n	800608c <__swsetup_r+0x30>
 800607c:	2209      	movs	r2, #9
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	f04f 30ff 	mov.w	r0, #4294967295
 800608a:	e033      	b.n	80060f4 <__swsetup_r+0x98>
 800608c:	0758      	lsls	r0, r3, #29
 800608e:	d512      	bpl.n	80060b6 <__swsetup_r+0x5a>
 8006090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006092:	b141      	cbz	r1, 80060a6 <__swsetup_r+0x4a>
 8006094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006098:	4299      	cmp	r1, r3
 800609a:	d002      	beq.n	80060a2 <__swsetup_r+0x46>
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff fb2d 	bl	80056fc <_free_r>
 80060a2:	2300      	movs	r3, #0
 80060a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	2300      	movs	r3, #0
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	b94b      	cbnz	r3, 80060d6 <__swsetup_r+0x7a>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060cc:	d003      	beq.n	80060d6 <__swsetup_r+0x7a>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 f84f 	bl	8006174 <__smakebuf_r>
 80060d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060da:	f013 0201 	ands.w	r2, r3, #1
 80060de:	d00a      	beq.n	80060f6 <__swsetup_r+0x9a>
 80060e0:	2200      	movs	r2, #0
 80060e2:	60a2      	str	r2, [r4, #8]
 80060e4:	6962      	ldr	r2, [r4, #20]
 80060e6:	4252      	negs	r2, r2
 80060e8:	61a2      	str	r2, [r4, #24]
 80060ea:	6922      	ldr	r2, [r4, #16]
 80060ec:	b942      	cbnz	r2, 8006100 <__swsetup_r+0xa4>
 80060ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060f2:	d1c5      	bne.n	8006080 <__swsetup_r+0x24>
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
 80060f6:	0799      	lsls	r1, r3, #30
 80060f8:	bf58      	it	pl
 80060fa:	6962      	ldrpl	r2, [r4, #20]
 80060fc:	60a2      	str	r2, [r4, #8]
 80060fe:	e7f4      	b.n	80060ea <__swsetup_r+0x8e>
 8006100:	2000      	movs	r0, #0
 8006102:	e7f7      	b.n	80060f4 <__swsetup_r+0x98>
 8006104:	2000001c 	.word	0x2000001c

08006108 <_sbrk_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d06      	ldr	r5, [pc, #24]	@ (8006124 <_sbrk_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fa fd78 	bl	8000c08 <_sbrk>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_sbrk_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_sbrk_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20004bb8 	.word	0x20004bb8

08006128 <__swhatbuf_r>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	460c      	mov	r4, r1
 800612c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006130:	2900      	cmp	r1, #0
 8006132:	b096      	sub	sp, #88	@ 0x58
 8006134:	4615      	mov	r5, r2
 8006136:	461e      	mov	r6, r3
 8006138:	da0d      	bge.n	8006156 <__swhatbuf_r+0x2e>
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006140:	f04f 0100 	mov.w	r1, #0
 8006144:	bf14      	ite	ne
 8006146:	2340      	movne	r3, #64	@ 0x40
 8006148:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800614c:	2000      	movs	r0, #0
 800614e:	6031      	str	r1, [r6, #0]
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	b016      	add	sp, #88	@ 0x58
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	466a      	mov	r2, sp
 8006158:	f000 f848 	bl	80061ec <_fstat_r>
 800615c:	2800      	cmp	r0, #0
 800615e:	dbec      	blt.n	800613a <__swhatbuf_r+0x12>
 8006160:	9901      	ldr	r1, [sp, #4]
 8006162:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006166:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800616a:	4259      	negs	r1, r3
 800616c:	4159      	adcs	r1, r3
 800616e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006172:	e7eb      	b.n	800614c <__swhatbuf_r+0x24>

08006174 <__smakebuf_r>:
 8006174:	898b      	ldrh	r3, [r1, #12]
 8006176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006178:	079d      	lsls	r5, r3, #30
 800617a:	4606      	mov	r6, r0
 800617c:	460c      	mov	r4, r1
 800617e:	d507      	bpl.n	8006190 <__smakebuf_r+0x1c>
 8006180:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	2301      	movs	r3, #1
 800618a:	6163      	str	r3, [r4, #20]
 800618c:	b003      	add	sp, #12
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006190:	ab01      	add	r3, sp, #4
 8006192:	466a      	mov	r2, sp
 8006194:	f7ff ffc8 	bl	8006128 <__swhatbuf_r>
 8006198:	9f00      	ldr	r7, [sp, #0]
 800619a:	4605      	mov	r5, r0
 800619c:	4639      	mov	r1, r7
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff fb18 	bl	80057d4 <_malloc_r>
 80061a4:	b948      	cbnz	r0, 80061ba <__smakebuf_r+0x46>
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	059a      	lsls	r2, r3, #22
 80061ac:	d4ee      	bmi.n	800618c <__smakebuf_r+0x18>
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	f043 0302 	orr.w	r3, r3, #2
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	e7e2      	b.n	8006180 <__smakebuf_r+0xc>
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	6020      	str	r0, [r4, #0]
 80061be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c2:	81a3      	strh	r3, [r4, #12]
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061ca:	b15b      	cbz	r3, 80061e4 <__smakebuf_r+0x70>
 80061cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d0:	4630      	mov	r0, r6
 80061d2:	f000 f81d 	bl	8006210 <_isatty_r>
 80061d6:	b128      	cbz	r0, 80061e4 <__smakebuf_r+0x70>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	431d      	orrs	r5, r3
 80061e8:	81a5      	strh	r5, [r4, #12]
 80061ea:	e7cf      	b.n	800618c <__smakebuf_r+0x18>

080061ec <_fstat_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d07      	ldr	r5, [pc, #28]	@ (800620c <_fstat_r+0x20>)
 80061f0:	2300      	movs	r3, #0
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	f7fa fcdc 	bl	8000bb6 <_fstat>
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d102      	bne.n	8006208 <_fstat_r+0x1c>
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	b103      	cbz	r3, 8006208 <_fstat_r+0x1c>
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	bd38      	pop	{r3, r4, r5, pc}
 800620a:	bf00      	nop
 800620c:	20004bb8 	.word	0x20004bb8

08006210 <_isatty_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d06      	ldr	r5, [pc, #24]	@ (800622c <_isatty_r+0x1c>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	f7fa fcdb 	bl	8000bd6 <_isatty>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_isatty_r+0x1a>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_isatty_r+0x1a>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	20004bb8 	.word	0x20004bb8

08006230 <_init>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr

0800623c <_fini>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr
