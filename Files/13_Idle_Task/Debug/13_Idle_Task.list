
13_Idle_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004f54  08004f54  00005f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc4  08004fc4  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004fc4  08004fc4  00005fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fcc  08004fcc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004fd4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  20000010  08004fe4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a1c  08004fe4  00006a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b10  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327b  00000000  00000000  0001cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0001fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fca  00000000  00000000  00021218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c20  00000000  00000000  000221e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016738  00000000  00000000  00025e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db2d6  00000000  00000000  0003c53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  00117854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f3c 	.word	0x08004f3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004f3c 	.word	0x08004f3c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
void vGreenLedControllerTask(void *pvParameters);



int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8


  HAL_Init();
 8000542:	f000 fa7d 	bl	8000a40 <HAL_Init>
  SystemClock_Config();
 8000546:	f000 f877 	bl	8000638 <SystemClock_Config>
  MX_GPIO_Init();
 800054a:	f000 f8ff 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8d3 	bl	80006f8 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2303      	movs	r3, #3
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2264      	movs	r2, #100	@ 0x64
 800055e:	490e      	ldr	r1, [pc, #56]	@ (8000598 <main+0x5c>)
 8000560:	480e      	ldr	r0, [pc, #56]	@ (800059c <main+0x60>)
 8000562:	f002 fe6b 	bl	800323c <xTaskCreate>
		  100,
		  NULL,
		  3,
		  NULL);

  xTaskCreate(vRedLedControllerTask,
 8000566:	2300      	movs	r3, #0
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2302      	movs	r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2264      	movs	r2, #100	@ 0x64
 8000572:	490b      	ldr	r1, [pc, #44]	@ (80005a0 <main+0x64>)
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <main+0x68>)
 8000576:	f002 fe61 	bl	800323c <xTaskCreate>
		  100,
		  NULL,
		  2,
		  NULL);

  xTaskCreate(vGreenLedControllerTask,
 800057a:	2300      	movs	r3, #0
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	2264      	movs	r2, #100	@ 0x64
 8000586:	4908      	ldr	r1, [pc, #32]	@ (80005a8 <main+0x6c>)
 8000588:	4808      	ldr	r0, [pc, #32]	@ (80005ac <main+0x70>)
 800058a:	f002 fe57 	bl	800323c <xTaskCreate>
		  NULL,
		  2,
		  NULL);


  vTaskStartScheduler();
 800058e:	f002 ffd1 	bl	8003534 <vTaskStartScheduler>

  while (1)
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x56>
 8000596:	bf00      	nop
 8000598:	08004f54 	.word	0x08004f54
 800059c:	080005b1 	.word	0x080005b1
 80005a0:	08004f68 	.word	0x08004f68
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	08004f7c 	.word	0x08004f7c
 80005ac:	080005f9 	.word	0x080005f9

080005b0 <vBlueLedControllerTask>:
  }

}

void vBlueLedControllerTask(void *pvParameters)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <vBlueLedControllerTask+0x20>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a04      	ldr	r2, [pc, #16]	@ (80005d0 <vBlueLedControllerTask+0x20>)
 80005c0:	6013      	str	r3, [r2, #0]
		vTaskDelay(_250ms);
 80005c2:	23fa      	movs	r3, #250	@ 0xfa
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 ff7f 	bl	80034c8 <vTaskDelay>
		BlueTaskProfiler++;
 80005ca:	bf00      	nop
 80005cc:	e7f4      	b.n	80005b8 <vBlueLedControllerTask+0x8>
 80005ce:	bf00      	nop
 80005d0:	20000074 	.word	0x20000074

080005d4 <vRedLedControllerTask>:
	};
}

void vRedLedControllerTask(void *pvParameters)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <vRedLedControllerTask+0x20>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <vRedLedControllerTask+0x20>)
 80005e4:	6013      	str	r3, [r2, #0]
		vTaskDelay(_250ms);
 80005e6:	23fa      	movs	r3, #250	@ 0xfa
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 ff6d 	bl	80034c8 <vTaskDelay>
		RedTaskProfiler++;
 80005ee:	bf00      	nop
 80005f0:	e7f4      	b.n	80005dc <vRedLedControllerTask+0x8>
 80005f2:	bf00      	nop
 80005f4:	20000078 	.word	0x20000078

080005f8 <vGreenLedControllerTask>:

	};
}

void vGreenLedControllerTask(void *pvParameters)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 8000600:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <vGreenLedControllerTask+0x20>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <vGreenLedControllerTask+0x20>)
 8000608:	6013      	str	r3, [r2, #0]
		vTaskDelay(_250ms);
 800060a:	23fa      	movs	r3, #250	@ 0xfa
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ff5b 	bl	80034c8 <vTaskDelay>
		GreenTaskProfiler++;
 8000612:	bf00      	nop
 8000614:	e7f4      	b.n	8000600 <vGreenLedControllerTask+0x8>
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c

0800061c <vApplicationIdleHook>:
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

void vApplicationIdleHook()
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	IdleTaskProfiler++;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <vApplicationIdleHook+0x18>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a03      	ldr	r2, [pc, #12]	@ (8000634 <vApplicationIdleHook+0x18>)
 8000628:	6013      	str	r3, [r2, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000080 	.word	0x20000080

08000638 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	@ 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fc3e 	bl	8004ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a22      	ldr	r2, [pc, #136]	@ (80006f0 <SystemClock_Config+0xb8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <SystemClock_Config+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000684:	4a1b      	ldr	r2, [pc, #108]	@ (80006f4 <SystemClock_Config+0xbc>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <SystemClock_Config+0xbc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff75 	bl	800159c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b8:	f000 f874 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fc6a 	bl	8000fb0 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e2:	f000 f85f 	bl	80007a4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f001 fc6e 	bl	8002010 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f833 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000002c 	.word	0x2000002c
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_GPIO_Init+0x30>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <MX_GPIO_Init+0x30>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_GPIO_Init+0x30>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000792:	f000 f977 	bl	8000a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010000 	.word	0x40010000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_MspInit+0x54>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <HAL_MspInit+0x54>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x54>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <HAL_MspInit+0x54>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <HAL_MspInit+0x54>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <HAL_MspInit+0x54>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 fa1d 	bl	8000c34 <HAL_NVIC_SetPriority>
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_UART_MspInit>:
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <HAL_UART_MspInit+0x84>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d12b      	bne.n	8000882 <HAL_UART_MspInit+0x7a>
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000838:	6413      	str	r3, [r2, #64]	@ 0x40
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <HAL_UART_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	230c      	movs	r3, #12
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
 8000872:	2307      	movs	r3, #7
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800087e:	f000 fa03 	bl	8000c88 <HAL_GPIO_Init>
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	@ 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40004400 	.word	0x40004400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <HAL_InitTick>:
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000968 <HAL_InitTick+0xd0>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000968 <HAL_InitTick+0xd0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <HAL_InitTick+0xd0>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f107 020c 	add.w	r2, r7, #12
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fc88 	bl	80011e4 <HAL_RCC_GetClockConfig>
 80008d4:	f000 fc72 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 80008d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80008da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008dc:	4a23      	ldr	r2, [pc, #140]	@ (800096c <HAL_InitTick+0xd4>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9b      	lsrs	r3, r3, #18
 80008e4:	3b01      	subs	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <HAL_InitTick+0xd8>)
 80008ea:	4a22      	ldr	r2, [pc, #136]	@ (8000974 <HAL_InitTick+0xdc>)
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_InitTick+0xd8>)
 80008f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <HAL_InitTick+0xd8>)
 80008f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fa:	6053      	str	r3, [r2, #4]
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <HAL_InitTick+0xd8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <HAL_InitTick+0xd8>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_InitTick+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
 800090e:	4818      	ldr	r0, [pc, #96]	@ (8000970 <HAL_InitTick+0xd8>)
 8000910:	f001 f8e2 	bl	8001ad8 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <HAL_InitTick+0xc2>
 8000922:	4813      	ldr	r0, [pc, #76]	@ (8000970 <HAL_InitTick+0xd8>)
 8000924:	f001 f932 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 8000928:	4603      	mov	r3, r0
 800092a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000932:	2b00      	cmp	r3, #0
 8000934:	d111      	bne.n	800095a <HAL_InitTick+0xc2>
 8000936:	2019      	movs	r0, #25
 8000938:	f000 f998 	bl	8000c6c <HAL_NVIC_EnableIRQ>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b0f      	cmp	r3, #15
 8000940:	d808      	bhi.n	8000954 <HAL_InitTick+0xbc>
 8000942:	2200      	movs	r2, #0
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	2019      	movs	r0, #25
 8000948:	f000 f974 	bl	8000c34 <HAL_NVIC_SetPriority>
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_InitTick+0xe0>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e002      	b.n	800095a <HAL_InitTick+0xc2>
 8000954:	2301      	movs	r3, #1
 8000956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800095a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095e:	4618      	mov	r0, r3
 8000960:	3730      	adds	r7, #48	@ 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	431bde83 	.word	0x431bde83
 8000970:	20000084 	.word	0x20000084
 8000974:	40010000 	.word	0x40010000
 8000978:	20000004 	.word	0x20000004

0800097c <NMI_Handler>:
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <DebugMon_Handler>:
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <TIM1_UP_TIM10_IRQHandler>:
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ba:	f001 f957 	bl	8001c6c <HAL_TIM_IRQHandler>
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000084 	.word	0x20000084

080009c8 <SystemInit>:
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a24 <LoopFillZerobss+0xe>
 80009f0:	f7ff ffea 	bl	80009c8 <SystemInit>
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <LoopFillZerobss+0x12>)
 80009f6:	490d      	ldr	r1, [pc, #52]	@ (8000a2c <LoopFillZerobss+0x16>)
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x1a>)
 80009fa:	2300      	movs	r3, #0
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:
 80009fe:	58d4      	ldr	r4, [r2, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:
 8000a04:	18c4      	adds	r4, r0, r3
 8000a06:	428c      	cmp	r4, r1
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <LoopFillZerobss+0x1e>)
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x22>)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:
 8000a16:	42a2      	cmp	r2, r4
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>
 8000a1a:	f004 fa5d 	bl	8004ed8 <__libc_init_array>
 8000a1e:	f7ff fd8d 	bl	800053c <main>
 8000a22:	4770      	bx	lr
 8000a24:	20020000 	.word	0x20020000
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	08004fd4 	.word	0x08004fd4
 8000a34:	20000010 	.word	0x20000010
 8000a38:	20004a1c 	.word	0x20004a1c

08000a3c <ADC_IRQHandler>:
 8000a3c:	e7fe      	b.n	8000a3c <ADC_IRQHandler>
	...

08000a40 <HAL_Init>:
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <HAL_Init+0x40>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <HAL_Init+0x40>)
 8000a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <HAL_Init+0x40>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f8d8 	bl	8000c1e <HAL_NVIC_SetPriorityGrouping>
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f7ff ff12 	bl	8000898 <HAL_InitTick>
 8000a74:	f7ff fe9c 	bl	80007b0 <HAL_MspInit>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023c00 	.word	0x40023c00

08000a84 <HAL_IncTick>:
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200000cc 	.word	0x200000cc

08000aac <HAL_GetTick>:
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200000cc 	.word	0x200000cc

08000ac4 <__NVIC_SetPriorityGrouping>:
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	@ (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	@ (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
 8000c10:	4313      	orrs	r3, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	@ 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_NVIC_SetPriorityGrouping>:
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff4c 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_SetPriority>:
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	f7ff ff61 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c4a:	6178      	str	r0, [r7, #20]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffb1 	bl	8000bb8 <NVIC_EncodePriority>
 8000c56:	4602      	mov	r2, r0
 8000c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff80 	bl	8000b64 <__NVIC_SetPriority>
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_EnableIRQ>:
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff54 	bl	8000b28 <__NVIC_EnableIRQ>
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_GPIO_Init>:
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e165      	b.n	8000f70 <HAL_GPIO_Init+0x2e8>
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8154 	bne.w	8000f6a <HAL_GPIO_Init+0x2e2>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d005      	beq.n	8000cda <HAL_GPIO_Init+0x52>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0xb4>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d017      	beq.n	8000d78 <HAL_GPIO_Init+0xf0>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d123      	bne.n	8000dcc <HAL_GPIO_Init+0x144>
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0203 	and.w	r2, r3, #3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80ae 	beq.w	8000f6a <HAL_GPIO_Init+0x2e2>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b5d      	ldr	r3, [pc, #372]	@ (8000f88 <HAL_GPIO_Init+0x300>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	4a5c      	ldr	r2, [pc, #368]	@ (8000f88 <HAL_GPIO_Init+0x300>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f88 <HAL_GPIO_Init+0x300>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4a58      	ldr	r2, [pc, #352]	@ (8000f8c <HAL_GPIO_Init+0x304>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4f      	ldr	r2, [pc, #316]	@ (8000f90 <HAL_GPIO_Init+0x308>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d025      	beq.n	8000ea2 <HAL_GPIO_Init+0x21a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4e      	ldr	r2, [pc, #312]	@ (8000f94 <HAL_GPIO_Init+0x30c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01f      	beq.n	8000e9e <HAL_GPIO_Init+0x216>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4d      	ldr	r2, [pc, #308]	@ (8000f98 <HAL_GPIO_Init+0x310>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4c      	ldr	r2, [pc, #304]	@ (8000f9c <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x20e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa0 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x20a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	@ (8000fa4 <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x206>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a49      	ldr	r2, [pc, #292]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x202>
 8000e86:	2306      	movs	r3, #6
 8000e88:	e00c      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00a      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e008      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	4935      	ldr	r1, [pc, #212]	@ (8000f8c <HAL_GPIO_Init+0x304>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x25e>
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4a31      	ldr	r2, [pc, #196]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6093      	str	r3, [r2, #8]
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x288>
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	60d3      	str	r3, [r2, #12]
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2b2>
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6053      	str	r3, [r2, #4]
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2dc>
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_GPIO_Init+0x324>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f67f ae96 	bls.w	8000ca4 <HAL_GPIO_Init+0x1c>
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40021400 	.word	0x40021400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40013c00 	.word	0x40013c00

08000fb0 <HAL_RCC_ClockConfig>:
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0cc      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 8000fc4:	4b68      	ldr	r3, [pc, #416]	@ (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d90c      	bls.n	8000fec <HAL_RCC_ClockConfig+0x3c>
 8000fd2:	4b65      	ldr	r3, [pc, #404]	@ (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	4b63      	ldr	r3, [pc, #396]	@ (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d001      	beq.n	8000fec <HAL_RCC_ClockConfig+0x3c>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0b8      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d020      	beq.n	800103a <HAL_RCC_ClockConfig+0x8a>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <HAL_RCC_ClockConfig+0x60>
 8001004:	4b59      	ldr	r3, [pc, #356]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a58      	ldr	r2, [pc, #352]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800100e:	6093      	str	r3, [r2, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_ClockConfig+0x78>
 800101c:	4b53      	ldr	r3, [pc, #332]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a52      	ldr	r2, [pc, #328]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001026:	6093      	str	r3, [r2, #8]
 8001028:	4b50      	ldr	r3, [pc, #320]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	494d      	ldr	r1, [pc, #308]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	4313      	orrs	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d044      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x120>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d107      	bne.n	800105e <HAL_RCC_ClockConfig+0xae>
 800104e:	4b47      	ldr	r3, [pc, #284]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d119      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
 800105a:	2301      	movs	r3, #1
 800105c:	e07f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <HAL_RCC_ClockConfig+0xbe>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xce>
 800106e:	4b3f      	ldr	r3, [pc, #252]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
 800107a:	2301      	movs	r3, #1
 800107c:	e06f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
 800108a:	2301      	movs	r3, #1
 800108c:	e067      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 800108e:	4b37      	ldr	r3, [pc, #220]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4934      	ldr	r1, [pc, #208]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
 80010a0:	f7ff fd04 	bl	8000aac <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x10e>
 80010a8:	f7ff fd00 	bl	8000aac <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x10e>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e04f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 80010be:	4b2b      	ldr	r3, [pc, #172]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf8>
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d20c      	bcs.n	80010f8 <HAL_RCC_ClockConfig+0x148>
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x148>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e032      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_RCC_ClockConfig+0x166>
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4916      	ldr	r1, [pc, #88]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d009      	beq.n	8001136 <HAL_RCC_ClockConfig+0x186>
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	490e      	ldr	r1, [pc, #56]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
 8001136:	f000 f887 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 800113a:	4602      	mov	r2, r0
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	490a      	ldr	r1, [pc, #40]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	5ccb      	ldrb	r3, [r1, r3]
 800114a:	fa22 f303 	lsr.w	r3, r2, r3
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fb9e 	bl	8000898 <HAL_InitTick>
 800115c:	2300      	movs	r3, #0
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00
 800116c:	40023800 	.word	0x40023800
 8001170:	08004fac 	.word	0x08004fac
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_RCC_GetHCLKFreq>:
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_RCC_GetHCLKFreq+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000

08001194 <HAL_RCC_GetPCLK1Freq>:
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
 8001198:	f7ff fff0 	bl	800117c <HAL_RCC_GetHCLKFreq>
 800119c:	4602      	mov	r2, r0
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	0a9b      	lsrs	r3, r3, #10
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	4903      	ldr	r1, [pc, #12]	@ (80011b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011aa:	5ccb      	ldrb	r3, [r1, r3]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	08004fbc 	.word	0x08004fbc

080011bc <HAL_RCC_GetPCLK2Freq>:
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
 80011c0:	f7ff ffdc 	bl	800117c <HAL_RCC_GetHCLKFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	0b5b      	lsrs	r3, r3, #13
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	4903      	ldr	r1, [pc, #12]	@ (80011e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	08004fbc 	.word	0x08004fbc

080011e4 <HAL_RCC_GetClockConfig>:
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	220f      	movs	r2, #15
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <HAL_RCC_GetClockConfig+0x60>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 020f 	and.w	r2, r3, #15
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_RCC_GetSysClockFreq>:
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b0a6      	sub	sp, #152	@ 0x98
 800124e:	af00      	add	r7, sp, #0
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800126e:	4bc8      	ldr	r3, [pc, #800]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b0c      	cmp	r3, #12
 8001278:	f200 817e 	bhi.w	8001578 <HAL_RCC_GetSysClockFreq+0x330>
 800127c:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012b9 	.word	0x080012b9
 8001288:	08001579 	.word	0x08001579
 800128c:	08001579 	.word	0x08001579
 8001290:	08001579 	.word	0x08001579
 8001294:	080012c1 	.word	0x080012c1
 8001298:	08001579 	.word	0x08001579
 800129c:	08001579 	.word	0x08001579
 80012a0:	08001579 	.word	0x08001579
 80012a4:	080012c9 	.word	0x080012c9
 80012a8:	08001579 	.word	0x08001579
 80012ac:	08001579 	.word	0x08001579
 80012b0:	08001579 	.word	0x08001579
 80012b4:	08001433 	.word	0x08001433
 80012b8:	4bb6      	ldr	r3, [pc, #728]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x34c>)
 80012ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012be:	e15f      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
 80012c0:	4bb5      	ldr	r3, [pc, #724]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 80012c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012c6:	e15b      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
 80012c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012d4:	4bae      	ldr	r3, [pc, #696]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d031      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0xfc>
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	2200      	movs	r2, #0
 80012e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80012ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80012f4:	2300      	movs	r3, #0
 80012f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80012f8:	4ba7      	ldr	r3, [pc, #668]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 80012fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80012fe:	462a      	mov	r2, r5
 8001300:	fb03 f202 	mul.w	r2, r3, r2
 8001304:	2300      	movs	r3, #0
 8001306:	4621      	mov	r1, r4
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	4413      	add	r3, r2
 800130e:	4aa2      	ldr	r2, [pc, #648]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 8001310:	4621      	mov	r1, r4
 8001312:	fba1 1202 	umull	r1, r2, r1, r2
 8001316:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001318:	460a      	mov	r2, r1
 800131a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800131c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800131e:	4413      	add	r3, r2
 8001320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001326:	2200      	movs	r2, #0
 8001328:	65bb      	str	r3, [r7, #88]	@ 0x58
 800132a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800132c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001330:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001334:	f7fe ff6c 	bl	8000210 <__aeabi_uldivmod>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4613      	mov	r3, r2
 800133e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001342:	e064      	b.n	800140e <HAL_RCC_GetSysClockFreq+0x1c6>
 8001344:	4b92      	ldr	r3, [pc, #584]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	2200      	movs	r2, #0
 800134c:	653b      	str	r3, [r7, #80]	@ 0x50
 800134e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001358:	2300      	movs	r3, #0
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800135c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001360:	4622      	mov	r2, r4
 8001362:	462b      	mov	r3, r5
 8001364:	f04f 0000 	mov.w	r0, #0
 8001368:	f04f 0100 	mov.w	r1, #0
 800136c:	0159      	lsls	r1, r3, #5
 800136e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001372:	0150      	lsls	r0, r2, #5
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4621      	mov	r1, r4
 800137a:	1a51      	subs	r1, r2, r1
 800137c:	6139      	str	r1, [r7, #16]
 800137e:	4629      	mov	r1, r5
 8001380:	eb63 0301 	sbc.w	r3, r3, r1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001392:	4659      	mov	r1, fp
 8001394:	018b      	lsls	r3, r1, #6
 8001396:	4651      	mov	r1, sl
 8001398:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800139c:	4651      	mov	r1, sl
 800139e:	018a      	lsls	r2, r1, #6
 80013a0:	4651      	mov	r1, sl
 80013a2:	ebb2 0801 	subs.w	r8, r2, r1
 80013a6:	4659      	mov	r1, fp
 80013a8:	eb63 0901 	sbc.w	r9, r3, r1
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013c0:	4690      	mov	r8, r2
 80013c2:	4699      	mov	r9, r3
 80013c4:	4623      	mov	r3, r4
 80013c6:	eb18 0303 	adds.w	r3, r8, r3
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	462b      	mov	r3, r5
 80013ce:	eb49 0303 	adc.w	r3, r9, r3
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013e0:	4629      	mov	r1, r5
 80013e2:	028b      	lsls	r3, r1, #10
 80013e4:	4621      	mov	r1, r4
 80013e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013ea:	4621      	mov	r1, r4
 80013ec:	028a      	lsls	r2, r1, #10
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013f6:	2200      	movs	r2, #0
 80013f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80013fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80013fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001400:	f7fe ff06 	bl	8000210 <__aeabi_uldivmod>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4613      	mov	r3, r2
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800140e:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	3301      	adds	r3, #1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001420:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001430:	e0a6      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
 8001432:	4b57      	ldr	r3, [pc, #348]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800143e:	4b54      	ldr	r3, [pc, #336]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d02a      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x258>
 800144a:	4b51      	ldr	r3, [pc, #324]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	099b      	lsrs	r3, r3, #6
 8001450:	2200      	movs	r2, #0
 8001452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001454:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800145c:	2100      	movs	r1, #0
 800145e:	4b4e      	ldr	r3, [pc, #312]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 8001460:	fb03 f201 	mul.w	r2, r3, r1
 8001464:	2300      	movs	r3, #0
 8001466:	fb00 f303 	mul.w	r3, r0, r3
 800146a:	4413      	add	r3, r2
 800146c:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 800146e:	fba0 1202 	umull	r1, r2, r0, r2
 8001472:	677a      	str	r2, [r7, #116]	@ 0x74
 8001474:	460a      	mov	r2, r1
 8001476:	673a      	str	r2, [r7, #112]	@ 0x70
 8001478:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800147a:	4413      	add	r3, r2
 800147c:	677b      	str	r3, [r7, #116]	@ 0x74
 800147e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001482:	2200      	movs	r2, #0
 8001484:	633b      	str	r3, [r7, #48]	@ 0x30
 8001486:	637a      	str	r2, [r7, #52]	@ 0x34
 8001488:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800148c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001490:	f7fe febe 	bl	8000210 <__aeabi_uldivmod>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4613      	mov	r3, r2
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800149e:	e05b      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x310>
 80014a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	2200      	movs	r2, #0
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014bc:	4642      	mov	r2, r8
 80014be:	464b      	mov	r3, r9
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	0159      	lsls	r1, r3, #5
 80014ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ce:	0150      	lsls	r0, r2, #5
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4641      	mov	r1, r8
 80014d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80014da:	4649      	mov	r1, r9
 80014dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014f4:	ebb2 040a 	subs.w	r4, r2, sl
 80014f8:	eb63 050b 	sbc.w	r5, r3, fp
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	00eb      	lsls	r3, r5, #3
 8001506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150a:	00e2      	lsls	r2, r4, #3
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	18e3      	adds	r3, r4, r3
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	464b      	mov	r3, r9
 8001518:	eb45 0303 	adc.w	r3, r5, r3
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800152a:	4629      	mov	r1, r5
 800152c:	028b      	lsls	r3, r1, #10
 800152e:	4621      	mov	r1, r4
 8001530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001534:	4621      	mov	r1, r4
 8001536:	028a      	lsls	r2, r1, #10
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001540:	2200      	movs	r2, #0
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	61fa      	str	r2, [r7, #28]
 8001546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154a:	f7fe fe61 	bl	8000210 <__aeabi_uldivmod>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4613      	mov	r3, r2
 8001554:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	0f1b      	lsrs	r3, r3, #28
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001566:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800156a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001576:	e003      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x34c>)
 800157a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800157e:	bf00      	nop
 8001580:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001584:	4618      	mov	r0, r3
 8001586:	3798      	adds	r7, #152	@ 0x98
 8001588:	46bd      	mov	sp, r7
 800158a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	00f42400 	.word	0x00f42400
 8001598:	017d7840 	.word	0x017d7840

0800159c <HAL_RCC_OscConfig>:
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e28d      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8083 	beq.w	80016c2 <HAL_RCC_OscConfig+0x126>
 80015bc:	4b94      	ldr	r3, [pc, #592]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d019      	beq.n	80015fc <HAL_RCC_OscConfig+0x60>
 80015c8:	4b91      	ldr	r3, [pc, #580]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x46>
 80015d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x60>
 80015e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
 80015ee:	4b88      	ldr	r3, [pc, #544]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
 80015fc:	4b84      	ldr	r3, [pc, #528]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x124>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x124>
 8001610:	2301      	movs	r3, #1
 8001612:	e25a      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x90>
 800161e:	4b7c      	ldr	r3, [pc, #496]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7b      	ldr	r2, [pc, #492]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xcc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xb4>
 8001636:	4b76      	ldr	r3, [pc, #472]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a75      	ldr	r2, [pc, #468]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b73      	ldr	r3, [pc, #460]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a72      	ldr	r2, [pc, #456]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xcc>
 8001650:	4b6f      	ldr	r3, [pc, #444]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6e      	ldr	r2, [pc, #440]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b6c      	ldr	r3, [pc, #432]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6b      	ldr	r2, [pc, #428]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xfc>
 8001670:	f7ff fa1c 	bl	8000aac <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xee>
 8001678:	f7ff fa18 	bl	8000aac <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xee>
 8001686:	2303      	movs	r3, #3
 8001688:	e21f      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 800168a:	4b61      	ldr	r3, [pc, #388]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xdc>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x126>
 8001698:	f7ff fa08 	bl	8000aac <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x116>
 80016a0:	f7ff fa04 	bl	8000aac <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x116>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e20b      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 80016b2:	4b57      	ldr	r3, [pc, #348]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x104>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x126>
 80016c0:	bf00      	nop
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d06f      	beq.n	80017ae <HAL_RCC_OscConfig+0x212>
 80016ce:	4b50      	ldr	r3, [pc, #320]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d017      	beq.n	800170a <HAL_RCC_OscConfig+0x16e>
 80016da:	4b4d      	ldr	r3, [pc, #308]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x156>
 80016e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x16e>
 80016f2:	4b47      	ldr	r3, [pc, #284]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x19c>
 80016fe:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x19c>
 800170a:	4b41      	ldr	r3, [pc, #260]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x186>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x186>
 800171e:	2301      	movs	r3, #1
 8001720:	e1d3      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001722:	4b3b      	ldr	r3, [pc, #236]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4937      	ldr	r1, [pc, #220]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
 8001736:	e03a      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_OscConfig+0x1e6>
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_RCC_OscConfig+0x278>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f7ff f9b1 	bl	8000aac <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1c4>
 800174e:	f7ff f9ad 	bl	8000aac <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1c4>
 800175c:	2303      	movs	r3, #3
 800175e:	e1b4      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
 800176c:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4925      	ldr	r1, [pc, #148]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x278>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	f7ff f990 	bl	8000aac <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x206>
 8001790:	f7ff f98c 	bl	8000aac <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x206>
 800179e:	2303      	movs	r3, #3
 80017a0:	e193      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1f4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d036      	beq.n	8001828 <HAL_RCC_OscConfig+0x28c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <HAL_RCC_OscConfig+0x254>
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f7ff f970 	bl	8000aac <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x246>
 80017d0:	f7ff f96c 	bl	8000aac <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x246>
 80017de:	2303      	movs	r3, #3
 80017e0:	e173      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80017e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x234>
 80017ee:	e01b      	b.n	8001828 <HAL_RCC_OscConfig+0x28c>
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f7ff f959 	bl	8000aac <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]
 80017fc:	e00e      	b.n	800181c <HAL_RCC_OscConfig+0x280>
 80017fe:	f7ff f955 	bl	8000aac <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d907      	bls.n	800181c <HAL_RCC_OscConfig+0x280>
 800180c:	2303      	movs	r3, #3
 800180e:	e15c      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001810:	40023800 	.word	0x40023800
 8001814:	42470000 	.word	0x42470000
 8001818:	42470e80 	.word	0x42470e80
 800181c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800181e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ea      	bne.n	80017fe <HAL_RCC_OscConfig+0x262>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8097 	beq.w	8001964 <HAL_RCC_OscConfig+0x3c8>
 8001836:	2300      	movs	r3, #0
 8001838:	75fb      	strb	r3, [r7, #23]
 800183a:	4b83      	ldr	r3, [pc, #524]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_RCC_OscConfig+0x2ca>
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
 8001866:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x308>
 8001872:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	f7ff f915 	bl	8000aac <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2fc>
 8001886:	f7ff f911 	bl	8000aac <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2fc>
 8001894:	2303      	movs	r3, #3
 8001896:	e118      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001898:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2ea>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x31e>
 80018ac:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b0:	4a65      	ldr	r2, [pc, #404]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x340>
 80018c2:	4b61      	ldr	r3, [pc, #388]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c6:	4a60      	ldr	r2, [pc, #384]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	4a5d      	ldr	r2, [pc, #372]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e0:	4a59      	ldr	r2, [pc, #356]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e8:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ec:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d015      	beq.n	8001928 <HAL_RCC_OscConfig+0x38c>
 80018fc:	f7ff f8d6 	bl	8000aac <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x37e>
 8001904:	f7ff f8d2 	bl	8000aac <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x37e>
 8001916:	2303      	movs	r3, #3
 8001918:	e0d7      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 800191a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ee      	beq.n	8001904 <HAL_RCC_OscConfig+0x368>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x3b6>
 8001928:	f7ff f8c0 	bl	8000aac <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x3aa>
 8001930:	f7ff f8bc 	bl	8000aac <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x3aa>
 8001942:	2303      	movs	r3, #3
 8001944:	e0c1      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001946:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ee      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x3c8>
 8001958:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ad 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x52c>
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d060      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d145      	bne.n	8001a0e <HAL_RCC_OscConfig+0x472>
 8001982:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f7ff f890 	bl	8000aac <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x406>
 8001990:	f7ff f88c 	bl	8000aac <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x406>
 800199e:	2303      	movs	r3, #3
 80019a0:	e093      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 80019a2:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x3f4>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	071b      	lsls	r3, r3, #28
 80019da:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f7ff f861 	bl	8000aac <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x464>
 80019ee:	f7ff f85d 	bl	8000aac <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x464>
 80019fc:	2303      	movs	r3, #3
 80019fe:	e064      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x452>
 8001a0c:	e05c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f7ff f84a 	bl	8000aac <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x492>
 8001a1c:	f7ff f846 	bl	8000aac <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x492>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04d      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x480>
 8001a3a:	e045      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e040      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470060 	.word	0x42470060
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_RCC_OscConfig+0x538>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d030      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d129      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d122      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8a:	0192      	lsls	r2, r2, #6
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d119      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	071b      	lsls	r3, r3, #28
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_TIM_Base_Init>:
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f839 	bl	8001b76 <HAL_TIM_Base_MspInit>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 f9c0 	bl	8001e9c <TIM_Base_SetConfig>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_Base_MspInit>:
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_TIM_Base_Start_IT>:
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e04e      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xb6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bce:	d01d      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0xa4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d010      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e007      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	2300      	movs	r3, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40010400 	.word	0x40010400
 8001c64:	40014000 	.word	0x40014000
 8001c68:	40001800 	.word	0x40001800

08001c6c <HAL_TIM_IRQHandler>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d020      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x64>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x64>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0202 	mvn.w	r2, #2
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	771a      	strb	r2, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x52>
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8d2 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0x5e>
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8c4 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8d5 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d020      	beq.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01b      	beq.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0204 	mvn.w	r2, #4
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	771a      	strb	r2, [r3, #28]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x9e>
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8ac 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xaa>
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f89e 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8af 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d020      	beq.n	8001d68 <HAL_TIM_IRQHandler+0xfc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <HAL_TIM_IRQHandler+0xfc>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0208 	mvn.w	r2, #8
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	771a      	strb	r2, [r3, #28]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xea>
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f886 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xf6>
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f878 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f889 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d020      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x148>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x148>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0210 	mvn.w	r2, #16
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	771a      	strb	r2, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x136>
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f860 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0x142>
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f852 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f863 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x16c>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x16c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0201 	mvn.w	r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fcd4 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x190>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x190>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f900 	bl	8001ffc <HAL_TIMEx_BreakCallback>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x1b4>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x1b4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f834 	bl	8001e88 <HAL_TIM_TriggerCallback>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x1d8>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x1d8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0220 	mvn.w	r2, #32
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8d2 	bl	8001fe8 <HAL_TIMEx_CommutCallback>
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_OC_DelayElapsedCallback>:
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_IC_CaptureCallback>:
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_TriggerCallback>:
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <TIM_Base_SetConfig>:
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a43      	ldr	r2, [pc, #268]	@ (8001fbc <TIM_Base_SetConfig+0x120>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eba:	d00f      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a40      	ldr	r2, [pc, #256]	@ (8001fc0 <TIM_Base_SetConfig+0x124>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00b      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc4 <TIM_Base_SetConfig+0x128>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3e      	ldr	r2, [pc, #248]	@ (8001fc8 <TIM_Base_SetConfig+0x12c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fcc <TIM_Base_SetConfig+0x130>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x52>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a32      	ldr	r2, [pc, #200]	@ (8001fbc <TIM_Base_SetConfig+0x120>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efc:	d027      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc0 <TIM_Base_SetConfig+0x124>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d023      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc4 <TIM_Base_SetConfig+0x128>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <TIM_Base_SetConfig+0x12c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2c      	ldr	r2, [pc, #176]	@ (8001fcc <TIM_Base_SetConfig+0x130>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d017      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <TIM_Base_SetConfig+0x134>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd4 <TIM_Base_SetConfig+0x138>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00f      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a29      	ldr	r2, [pc, #164]	@ (8001fd8 <TIM_Base_SetConfig+0x13c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <TIM_Base_SetConfig+0x140>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a27      	ldr	r2, [pc, #156]	@ (8001fe0 <TIM_Base_SetConfig+0x144>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a26      	ldr	r2, [pc, #152]	@ (8001fe4 <TIM_Base_SetConfig+0x148>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <TIM_Base_SetConfig+0xc4>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a0e      	ldr	r2, [pc, #56]	@ (8001fbc <TIM_Base_SetConfig+0x120>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d003      	beq.n	8001f8e <TIM_Base_SetConfig+0xf2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <TIM_Base_SetConfig+0x130>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d103      	bne.n	8001f96 <TIM_Base_SetConfig+0xfa>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f043 0204 	orr.w	r2, r3, #4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	40001800 	.word	0x40001800
 8001fe0:	40001c00 	.word	0x40001c00
 8001fe4:	40002000 	.word	0x40002000

08001fe8 <HAL_TIMEx_CommutCallback>:
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIMEx_BreakCallback>:
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_UART_Init>:
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
 800201e:	2301      	movs	r3, #1
 8002020:	e042      	b.n	80020a8 <HAL_UART_Init+0x98>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_UART_Init+0x2c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fbe6 	bl	8000808 <HAL_UART_MspInit>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	@ 0x24
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f82b 	bl	80020b0 <UART_SetConfig>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a6:	2300      	movs	r3, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <UART_SetConfig>:
 80020b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b4:	b0c0      	sub	sp, #256	@ 0x100
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	ea40 0301 	orr.w	r3, r0, r1
 80020d8:	6113      	str	r3, [r2, #16]
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002108:	f021 010c 	bic.w	r1, r1, #12
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002116:	430b      	orrs	r3, r1
 8002118:	60d3      	str	r3, [r2, #12]
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212a:	6999      	ldr	r1, [r3, #24]
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	ea40 0301 	orr.w	r3, r0, r1
 8002136:	6153      	str	r3, [r2, #20]
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b8f      	ldr	r3, [pc, #572]	@ (800237c <UART_SetConfig+0x2cc>)
 8002140:	429a      	cmp	r2, r3
 8002142:	d005      	beq.n	8002150 <UART_SetConfig+0xa0>
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b8d      	ldr	r3, [pc, #564]	@ (8002380 <UART_SetConfig+0x2d0>)
 800214c:	429a      	cmp	r2, r3
 800214e:	d104      	bne.n	800215a <UART_SetConfig+0xaa>
 8002150:	f7ff f834 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 8002154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002158:	e003      	b.n	8002162 <UART_SetConfig+0xb2>
 800215a:	f7ff f81b 	bl	8001194 <HAL_RCC_GetPCLK1Freq>
 800215e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800216c:	f040 810c 	bne.w	8002388 <UART_SetConfig+0x2d8>
 8002170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002174:	2200      	movs	r2, #0
 8002176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800217a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800217e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002182:	4622      	mov	r2, r4
 8002184:	462b      	mov	r3, r5
 8002186:	1891      	adds	r1, r2, r2
 8002188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800218a:	415b      	adcs	r3, r3
 800218c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800218e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002192:	4621      	mov	r1, r4
 8002194:	eb12 0801 	adds.w	r8, r2, r1
 8002198:	4629      	mov	r1, r5
 800219a:	eb43 0901 	adc.w	r9, r3, r1
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b2:	4690      	mov	r8, r2
 80021b4:	4699      	mov	r9, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	eb18 0303 	adds.w	r3, r8, r3
 80021bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021c0:	462b      	mov	r3, r5
 80021c2:	eb49 0303 	adc.w	r3, r9, r3
 80021c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80021de:	460b      	mov	r3, r1
 80021e0:	18db      	adds	r3, r3, r3
 80021e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80021e4:	4613      	mov	r3, r2
 80021e6:	eb42 0303 	adc.w	r3, r2, r3
 80021ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80021ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021f4:	f7fe f80c 	bl	8000210 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4b61      	ldr	r3, [pc, #388]	@ (8002384 <UART_SetConfig+0x2d4>)
 80021fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	011c      	lsls	r4, r3, #4
 8002206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	1891      	adds	r1, r2, r2
 800221e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002220:	415b      	adcs	r3, r3
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002228:	4641      	mov	r1, r8
 800222a:	eb12 0a01 	adds.w	sl, r2, r1
 800222e:	4649      	mov	r1, r9
 8002230:	eb43 0b01 	adc.w	fp, r3, r1
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002248:	4692      	mov	sl, r2
 800224a:	469b      	mov	fp, r3
 800224c:	4643      	mov	r3, r8
 800224e:	eb1a 0303 	adds.w	r3, sl, r3
 8002252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002256:	464b      	mov	r3, r9
 8002258:	eb4b 0303 	adc.w	r3, fp, r3
 800225c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800226c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002274:	460b      	mov	r3, r1
 8002276:	18db      	adds	r3, r3, r3
 8002278:	643b      	str	r3, [r7, #64]	@ 0x40
 800227a:	4613      	mov	r3, r2
 800227c:	eb42 0303 	adc.w	r3, r2, r3
 8002280:	647b      	str	r3, [r7, #68]	@ 0x44
 8002282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800228a:	f7fd ffc1 	bl	8000210 <__aeabi_uldivmod>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4611      	mov	r1, r2
 8002294:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <UART_SetConfig+0x2d4>)
 8002296:	fba3 2301 	umull	r2, r3, r3, r1
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2264      	movs	r2, #100	@ 0x64
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	1acb      	subs	r3, r1, r3
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <UART_SetConfig+0x2d4>)
 80022ac:	fba3 2302 	umull	r2, r3, r3, r2
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022b8:	441c      	add	r4, r3
 80022ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80022c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	1891      	adds	r1, r2, r2
 80022d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022d4:	415b      	adcs	r3, r3
 80022d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022dc:	4641      	mov	r1, r8
 80022de:	1851      	adds	r1, r2, r1
 80022e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80022e2:	4649      	mov	r1, r9
 80022e4:	414b      	adcs	r3, r1
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022f4:	4659      	mov	r1, fp
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fe:	4651      	mov	r1, sl
 8002300:	00ca      	lsls	r2, r1, #3
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4603      	mov	r3, r0
 8002308:	4642      	mov	r2, r8
 800230a:	189b      	adds	r3, r3, r2
 800230c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002310:	464b      	mov	r3, r9
 8002312:	460a      	mov	r2, r1
 8002314:	eb42 0303 	adc.w	r3, r2, r3
 8002318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800232c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002330:	460b      	mov	r3, r1
 8002332:	18db      	adds	r3, r3, r3
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002336:	4613      	mov	r3, r2
 8002338:	eb42 0303 	adc.w	r3, r2, r3
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800233e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002346:	f7fd ff63 	bl	8000210 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <UART_SetConfig+0x2d4>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	2164      	movs	r1, #100	@ 0x64
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	3332      	adds	r3, #50	@ 0x32
 8002362:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <UART_SetConfig+0x2d4>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	f003 0207 	and.w	r2, r3, #7
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4422      	add	r2, r4
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e106      	b.n	8002588 <UART_SetConfig+0x4d8>
 800237a:	bf00      	nop
 800237c:	40011000 	.word	0x40011000
 8002380:	40011400 	.word	0x40011400
 8002384:	51eb851f 	.word	0x51eb851f
 8002388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800238c:	2200      	movs	r2, #0
 800238e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800239a:	4642      	mov	r2, r8
 800239c:	464b      	mov	r3, r9
 800239e:	1891      	adds	r1, r2, r2
 80023a0:	6239      	str	r1, [r7, #32]
 80023a2:	415b      	adcs	r3, r3
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023aa:	4641      	mov	r1, r8
 80023ac:	1854      	adds	r4, r2, r1
 80023ae:	4649      	mov	r1, r9
 80023b0:	eb43 0501 	adc.w	r5, r3, r1
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	18e3      	adds	r3, r4, r3
 80023cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023d0:	464b      	mov	r3, r9
 80023d2:	eb45 0303 	adc.w	r3, r5, r3
 80023d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023f6:	4629      	mov	r1, r5
 80023f8:	008b      	lsls	r3, r1, #2
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002400:	4621      	mov	r1, r4
 8002402:	008a      	lsls	r2, r1, #2
 8002404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002408:	f7fd ff02 	bl	8000210 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4b60      	ldr	r3, [pc, #384]	@ (8002594 <UART_SetConfig+0x4e4>)
 8002412:	fba3 2302 	umull	r2, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	011c      	lsls	r4, r3, #4
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	61b9      	str	r1, [r7, #24]
 8002434:	415b      	adcs	r3, r3
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800243c:	4641      	mov	r1, r8
 800243e:	1851      	adds	r1, r2, r1
 8002440:	6139      	str	r1, [r7, #16]
 8002442:	4649      	mov	r1, r9
 8002444:	414b      	adcs	r3, r1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002454:	4659      	mov	r1, fp
 8002456:	00cb      	lsls	r3, r1, #3
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245e:	4651      	mov	r1, sl
 8002460:	00ca      	lsls	r2, r1, #3
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4603      	mov	r3, r0
 8002468:	4642      	mov	r2, r8
 800246a:	189b      	adds	r3, r3, r2
 800246c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002470:	464b      	mov	r3, r9
 8002472:	460a      	mov	r2, r1
 8002474:	eb42 0303 	adc.w	r3, r2, r3
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002494:	4649      	mov	r1, r9
 8002496:	008b      	lsls	r3, r1, #2
 8002498:	4641      	mov	r1, r8
 800249a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800249e:	4641      	mov	r1, r8
 80024a0:	008a      	lsls	r2, r1, #2
 80024a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024a6:	f7fd feb3 	bl	8000210 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <UART_SetConfig+0x4e4>)
 80024b2:	fba3 2301 	umull	r2, r3, r3, r1
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2264      	movs	r2, #100	@ 0x64
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	1acb      	subs	r3, r1, r3
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	3332      	adds	r3, #50	@ 0x32
 80024c4:	4a33      	ldr	r2, [pc, #204]	@ (8002594 <UART_SetConfig+0x4e4>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d0:	441c      	add	r4, r3
 80024d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d6:	2200      	movs	r2, #0
 80024d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80024da:	677a      	str	r2, [r7, #116]	@ 0x74
 80024dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	415b      	adcs	r3, r3
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f0:	4641      	mov	r1, r8
 80024f2:	1851      	adds	r1, r2, r1
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	4649      	mov	r1, r9
 80024f8:	414b      	adcs	r3, r1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002508:	4659      	mov	r1, fp
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	4651      	mov	r1, sl
 800250e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002512:	4651      	mov	r1, sl
 8002514:	00ca      	lsls	r2, r1, #3
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4603      	mov	r3, r0
 800251c:	4642      	mov	r2, r8
 800251e:	189b      	adds	r3, r3, r2
 8002520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002522:	464b      	mov	r3, r9
 8002524:	460a      	mov	r2, r1
 8002526:	eb42 0303 	adc.w	r3, r2, r3
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	663b      	str	r3, [r7, #96]	@ 0x60
 8002536:	667a      	str	r2, [r7, #100]	@ 0x64
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002544:	4649      	mov	r1, r9
 8002546:	008b      	lsls	r3, r1, #2
 8002548:	4641      	mov	r1, r8
 800254a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800254e:	4641      	mov	r1, r8
 8002550:	008a      	lsls	r2, r1, #2
 8002552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002556:	f7fd fe5b 	bl	8000210 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <UART_SetConfig+0x4e4>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	@ 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	3332      	adds	r3, #50	@ 0x32
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <UART_SetConfig+0x4e4>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4422      	add	r2, r4
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	bf00      	nop
 800258a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800258e:	46bd      	mov	sp, r7
 8002590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002594:	51eb851f 	.word	0x51eb851f

08002598 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <SysTick_Handler+0x1c>)
 800259e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025a0:	f001 fc18 	bl	8003dd4 <xTaskGetSchedulerState>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025aa:	f002 fa0d 	bl	80049c8 <xPortSysTickHandler>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a07      	ldr	r2, [pc, #28]	@ (80025e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80025c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4a06      	ldr	r2, [pc, #24]	@ (80025e8 <vApplicationGetIdleTaskMemory+0x30>)
 80025ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	601a      	str	r2, [r3, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	200000d0 	.word	0x200000d0
 80025e8:	2000012c 	.word	0x2000012c

080025ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a07      	ldr	r2, [pc, #28]	@ (8002618 <vApplicationGetTimerTaskMemory+0x2c>)
 80025fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4a06      	ldr	r2, [pc, #24]	@ (800261c <vApplicationGetTimerTaskMemory+0x30>)
 8002602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	2000032c 	.word	0x2000032c
 800261c:	20000388 	.word	0x20000388

08002620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0208 	add.w	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 0208 	add.w	r2, r3, #8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0208 	add.w	r2, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d103      	bne.n	80026e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e00c      	b.n	80026fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3308      	adds	r3, #8
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e002      	b.n	80026f0 <vListInsert+0x2e>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d2f6      	bcs.n	80026ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6852      	ldr	r2, [r2, #4]
 8002754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d103      	bne.n	8002768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027b4:	f002 f878 	bl	80048a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	441a      	add	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e4:	3b01      	subs	r3, #1
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	441a      	add	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	22ff      	movs	r2, #255	@ 0xff
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	22ff      	movs	r2, #255	@ 0xff
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d114      	bne.n	8002834 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01a      	beq.n	8002848 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3310      	adds	r3, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f001 f91a 	bl	8003a50 <xTaskRemoveFromEventList>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <xQueueGenericReset+0xd0>)
 8002824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	e009      	b.n	8002848 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3310      	adds	r3, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fef1 	bl	8002620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3324      	adds	r3, #36	@ 0x24
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff feec 	bl	8002620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002848:	f002 f860 	bl	800490c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	@ 0x38
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <xQueueGenericCreateStatic+0x56>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <xQueueGenericCreateStatic+0x5a>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueGenericCreateStatic+0x5c>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	623b      	str	r3, [r7, #32]
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <xQueueGenericCreateStatic+0x84>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <xQueueGenericCreateStatic+0x88>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <xQueueGenericCreateStatic+0x8a>
 80028e4:	2300      	movs	r3, #0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	61fb      	str	r3, [r7, #28]
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002902:	2350      	movs	r3, #80	@ 0x50
 8002904:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b50      	cmp	r3, #80	@ 0x50
 800290a:	d00b      	beq.n	8002924 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	61bb      	str	r3, [r7, #24]
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002924:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800292a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002938:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f805 	bl	8002956 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800294e:	4618      	mov	r0, r3
 8002950:	3730      	adds	r7, #48	@ 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e002      	b.n	8002978 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002984:	2101      	movs	r1, #1
 8002986:	69b8      	ldr	r0, [r7, #24]
 8002988:	f7ff fefe 	bl	8002788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	@ 0x38
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <xQueueGenericSend+0x34>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <xQueueGenericSend+0x42>
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <xQueueGenericSend+0x46>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <xQueueGenericSend+0x48>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <xQueueGenericSend+0x64>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d103      	bne.n	8002a0e <xQueueGenericSend+0x72>
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <xQueueGenericSend+0x76>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <xQueueGenericSend+0x78>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <xQueueGenericSend+0x94>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	623b      	str	r3, [r7, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a30:	f001 f9d0 	bl	8003dd4 <xTaskGetSchedulerState>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <xQueueGenericSend+0xa4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <xQueueGenericSend+0xa8>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <xQueueGenericSend+0xaa>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <xQueueGenericSend+0xc6>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	61fb      	str	r3, [r7, #28]
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	e7fd      	b.n	8002a5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a62:	f001 ff21 	bl	80048a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <xQueueGenericSend+0xdc>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d129      	bne.n	8002acc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a7e:	f000 fa0f 	bl	8002ea0 <prvCopyDataToQueue>
 8002a82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	3324      	adds	r3, #36	@ 0x24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 ffdd 	bl	8003a50 <xTaskRemoveFromEventList>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <xQueueGenericSend+0x200>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	e00a      	b.n	8002ac4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ab4:	4b39      	ldr	r3, [pc, #228]	@ (8002b9c <xQueueGenericSend+0x200>)
 8002ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ac4:	f001 ff22 	bl	800490c <vPortExitCritical>
				return pdPASS;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e063      	b.n	8002b94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ad2:	f001 ff1b 	bl	800490c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e05c      	b.n	8002b94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 f817 	bl	8003b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aee:	f001 ff0d 	bl	800490c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002af2:	f000 fd87 	bl	8003604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002af6:	f001 fed7 	bl	80048a8 <vPortEnterCritical>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d103      	bne.n	8002b10 <xQueueGenericSend+0x174>
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d103      	bne.n	8002b26 <xQueueGenericSend+0x18a>
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b26:	f001 fef1 	bl	800490c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b2a:	1d3a      	adds	r2, r7, #4
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 f806 	bl	8003b44 <xTaskCheckForTimeOut>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d124      	bne.n	8002b88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b40:	f000 faa6 	bl	8003090 <prvIsQueueFull>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 ff2a 	bl	80039ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b5a:	f000 fa31 	bl	8002fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b5e:	f000 fd5f 	bl	8003620 <xTaskResumeAll>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af7c 	bne.w	8002a62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <xQueueGenericSend+0x200>)
 8002b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	e772      	b.n	8002a62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b7e:	f000 fa1f 	bl	8002fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b82:	f000 fd4d 	bl	8003620 <xTaskResumeAll>
 8002b86:	e76c      	b.n	8002a62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b8a:	f000 fa19 	bl	8002fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b8e:	f000 fd47 	bl	8003620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3738      	adds	r7, #56	@ 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b090      	sub	sp, #64	@ 0x40
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <xQueueGenericSendFromISR+0x3e>
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <xQueueGenericSendFromISR+0x42>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueGenericSendFromISR+0x44>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d103      	bne.n	8002c0e <xQueueGenericSendFromISR+0x6e>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <xQueueGenericSendFromISR+0x72>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <xQueueGenericSendFromISR+0x74>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	623b      	str	r3, [r7, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c30:	f001 ff1a 	bl	8004a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c34:	f3ef 8211 	mrs	r2, BASEPRI
 8002c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	61fa      	str	r2, [r7, #28]
 8002c4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <xQueueGenericSendFromISR+0xc2>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d12f      	bne.n	8002cc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c78:	f000 f912 	bl	8002ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d112      	bne.n	8002cac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	3324      	adds	r3, #36	@ 0x24
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fedc 	bl	8003a50 <xTaskRemoveFromEventList>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	b25a      	sxtb	r2, r3
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002cc0:	e001      	b.n	8002cc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3740      	adds	r7, #64	@ 0x40
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	@ 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10b      	bne.n	8002d0e <xQueueReceive+0x32>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	623b      	str	r3, [r7, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <xQueueReceive+0x40>
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <xQueueReceive+0x44>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <xQueueReceive+0x46>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <xQueueReceive+0x62>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	61fb      	str	r3, [r7, #28]
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	e7fd      	b.n	8002d3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d3e:	f001 f849 	bl	8003dd4 <xTaskGetSchedulerState>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xQueueReceive+0x72>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xQueueReceive+0x76>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xQueueReceive+0x78>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <xQueueReceive+0x94>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61bb      	str	r3, [r7, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d70:	f001 fd9a 	bl	80048a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01f      	beq.n	8002dc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d84:	f000 f8f6 	bl	8002f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	1e5a      	subs	r2, r3, #1
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00f      	beq.n	8002db8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	3310      	adds	r3, #16
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fe57 	bl	8003a50 <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <xQueueReceive+0x1c0>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002db8:	f001 fda8 	bl	800490c <vPortExitCritical>
				return pdPASS;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e069      	b.n	8002e94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dc6:	f001 fda1 	bl	800490c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e062      	b.n	8002e94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fe9d 	bl	8003b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002de2:	f001 fd93 	bl	800490c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002de6:	f000 fc0d 	bl	8003604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dea:	f001 fd5d 	bl	80048a8 <vPortEnterCritical>
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d103      	bne.n	8002e04 <xQueueReceive+0x128>
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e0a:	b25b      	sxtb	r3, r3
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d103      	bne.n	8002e1a <xQueueReceive+0x13e>
 8002e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e1a:	f001 fd77 	bl	800490c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e1e:	1d3a      	adds	r2, r7, #4
 8002e20:	f107 0310 	add.w	r3, r7, #16
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fe8c 	bl	8003b44 <xTaskCheckForTimeOut>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d123      	bne.n	8002e7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e34:	f000 f916 	bl	8003064 <prvIsQueueEmpty>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d017      	beq.n	8002e6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e40:	3324      	adds	r3, #36	@ 0x24
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fdb0 	bl	80039ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e4e:	f000 f8b7 	bl	8002fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e52:	f000 fbe5 	bl	8003620 <xTaskResumeAll>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d189      	bne.n	8002d70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <xQueueReceive+0x1c0>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	e780      	b.n	8002d70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e70:	f000 f8a6 	bl	8002fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e74:	f000 fbd4 	bl	8003620 <xTaskResumeAll>
 8002e78:	e77a      	b.n	8002d70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e7c:	f000 f8a0 	bl	8002fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e80:	f000 fbce 	bl	8003620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e86:	f000 f8ed 	bl	8003064 <prvIsQueueEmpty>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f43f af6f 	beq.w	8002d70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3730      	adds	r7, #48	@ 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d14d      	bne.n	8002f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 ffa0 	bl	8003e10 <xTaskPriorityDisinherit>
 8002ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	e043      	b.n	8002f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d119      	bne.n	8002f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6858      	ldr	r0, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	f002 f818 	bl	8004f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	441a      	add	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d32b      	bcc.n	8002f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e026      	b.n	8002f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68d8      	ldr	r0, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	f001 fffe 	bl	8004f20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	425b      	negs	r3, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d105      	bne.n	8002f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002f6a:	697b      	ldr	r3, [r7, #20]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d018      	beq.n	8002fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	441a      	add	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d303      	bcc.n	8002fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6838      	ldr	r0, [r7, #0]
 8002fb4:	f001 ffb4 	bl	8004f20 <memcpy>
	}
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fc8:	f001 fc6e 	bl	80048a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fd4:	e011      	b.n	8002ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3324      	adds	r3, #36	@ 0x24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fd34 	bl	8003a50 <xTaskRemoveFromEventList>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fee:	f000 fe0d 	bl	8003c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	dce9      	bgt.n	8002fd6 <prvUnlockQueue+0x16>
 8003002:	e000      	b.n	8003006 <prvUnlockQueue+0x46>
					break;
 8003004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	22ff      	movs	r2, #255	@ 0xff
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800300e:	f001 fc7d 	bl	800490c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003012:	f001 fc49 	bl	80048a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800301c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800301e:	e011      	b.n	8003044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d012      	beq.n	800304e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3310      	adds	r3, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd0f 	bl	8003a50 <xTaskRemoveFromEventList>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003038:	f000 fde8 	bl	8003c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800303c:	7bbb      	ldrb	r3, [r7, #14]
 800303e:	3b01      	subs	r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003048:	2b00      	cmp	r3, #0
 800304a:	dce9      	bgt.n	8003020 <prvUnlockQueue+0x60>
 800304c:	e000      	b.n	8003050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800304e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	22ff      	movs	r2, #255	@ 0xff
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003058:	f001 fc58 	bl	800490c <vPortExitCritical>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800306c:	f001 fc1c 	bl	80048a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e001      	b.n	8003082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003082:	f001 fc43 	bl	800490c <vPortExitCritical>

	return xReturn;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003098:	f001 fc06 	bl	80048a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d102      	bne.n	80030ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e001      	b.n	80030b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030b2:	f001 fc2b 	bl	800490c <vPortExitCritical>

	return xReturn;
 80030b6:	68fb      	ldr	r3, [r7, #12]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e014      	b.n	80030fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003110 <vQueueAddToRegistry+0x50>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030dc:	490c      	ldr	r1, [pc, #48]	@ (8003110 <vQueueAddToRegistry+0x50>)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <vQueueAddToRegistry+0x50>)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030f2:	e006      	b.n	8003102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b07      	cmp	r3, #7
 80030fe:	d9e7      	bls.n	80030d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000788 	.word	0x20000788

08003114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003124:	f001 fbc0 	bl	80048a8 <vPortEnterCritical>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800312e:	b25b      	sxtb	r3, r3
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d103      	bne.n	800313e <vQueueWaitForMessageRestricted+0x2a>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003144:	b25b      	sxtb	r3, r3
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d103      	bne.n	8003154 <vQueueWaitForMessageRestricted+0x40>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003154:	f001 fbda 	bl	800490c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3324      	adds	r3, #36	@ 0x24
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fc45 	bl	80039f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff26 	bl	8002fc0 <prvUnlockQueue>
	}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	@ 0x38
 8003180:	af04      	add	r7, sp, #16
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	623b      	str	r3, [r7, #32]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	61fb      	str	r3, [r7, #28]
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031c6:	235c      	movs	r3, #92	@ 0x5c
 80031c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80031ce:	d00b      	beq.n	80031e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	61bb      	str	r3, [r7, #24]
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01e      	beq.n	800322e <xTaskCreateStatic+0xb2>
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01b      	beq.n	800322e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003208:	2300      	movs	r3, #0
 800320a:	9303      	str	r3, [sp, #12]
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f850 	bl	80032c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003228:	f000 f8de 	bl	80033e8 <prvAddNewTaskToReadyList>
 800322c:	e001      	b.n	8003232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003232:	697b      	ldr	r3, [r7, #20]
	}
 8003234:	4618      	mov	r0, r3
 8003236:	3728      	adds	r7, #40	@ 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30
 8003240:	af04      	add	r7, sp, #16
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f001 fc4b 	bl	8004aec <pvPortMalloc>
 8003256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800325e:	205c      	movs	r0, #92	@ 0x5c
 8003260:	f001 fc44 	bl	8004aec <pvPortMalloc>
 8003264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
 8003272:	e005      	b.n	8003280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003274:	6978      	ldr	r0, [r7, #20]
 8003276:	f001 fd07 	bl	8004c88 <vPortFree>
 800327a:	e001      	b.n	8003280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d017      	beq.n	80032b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	2300      	movs	r3, #0
 8003292:	9303      	str	r3, [sp, #12]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	9302      	str	r3, [sp, #8]
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f80e 	bl	80032c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032aa:	69f8      	ldr	r0, [r7, #28]
 80032ac:	f000 f89c 	bl	80033e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032b0:	2301      	movs	r3, #1
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e002      	b.n	80032bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032bc:	69bb      	ldr	r3, [r7, #24]
	}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	461a      	mov	r2, r3
 80032de:	21a5      	movs	r1, #165	@ 0xa5
 80032e0:	f001 fdf2 	bl	8004ec8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032ee:	3b01      	subs	r3, #1
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f023 0307 	bic.w	r3, r3, #7
 80032fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	617b      	str	r3, [r7, #20]
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01f      	beq.n	8003366 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	e012      	b.n	8003352 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	7819      	ldrb	r1, [r3, #0]
 8003334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	4413      	add	r3, r2
 800333a:	3334      	adds	r3, #52	@ 0x34
 800333c:	460a      	mov	r2, r1
 800333e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3301      	adds	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d9e9      	bls.n	800332c <prvInitialiseNewTask+0x66>
 8003358:	e000      	b.n	800335c <prvInitialiseNewTask+0x96>
			{
				break;
 800335a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003364:	e003      	b.n	800336e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	2b37      	cmp	r3, #55	@ 0x37
 8003372:	d901      	bls.n	8003378 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003374:	2337      	movs	r3, #55	@ 0x37
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800337c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003382:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	2200      	movs	r2, #0
 8003388:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f966 	bl	8002660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	3318      	adds	r3, #24
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f961 	bl	8002660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	69b8      	ldr	r0, [r7, #24]
 80033c8:	f001 f940 	bl	800464c <pxPortInitialiseStack>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033de:	bf00      	nop
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033f0:	f001 fa5a 	bl	80048a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <prvAddNewTaskToReadyList+0xc4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <prvAddNewTaskToReadyList+0xc4>)
 80033fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033fe:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <prvAddNewTaskToReadyList+0xc8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003406:	4a2a      	ldr	r2, [pc, #168]	@ (80034b0 <prvAddNewTaskToReadyList+0xc8>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800340c:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <prvAddNewTaskToReadyList+0xc4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d110      	bne.n	8003436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003414:	f000 fc20 	bl	8003c58 <prvInitialiseTaskLists>
 8003418:	e00d      	b.n	8003436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800341a:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <prvAddNewTaskToReadyList+0xcc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003422:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <prvAddNewTaskToReadyList+0xc8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	429a      	cmp	r2, r3
 800342e:	d802      	bhi.n	8003436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003430:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <prvAddNewTaskToReadyList+0xc8>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003436:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <prvAddNewTaskToReadyList+0xd0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	4a1e      	ldr	r2, [pc, #120]	@ (80034b8 <prvAddNewTaskToReadyList+0xd0>)
 800343e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003440:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <prvAddNewTaskToReadyList+0xd0>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344c:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <prvAddNewTaskToReadyList+0xd4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d903      	bls.n	800345c <prvAddNewTaskToReadyList+0x74>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <prvAddNewTaskToReadyList+0xd4>)
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4a15      	ldr	r2, [pc, #84]	@ (80034c0 <prvAddNewTaskToReadyList+0xd8>)
 800346a:	441a      	add	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7ff f901 	bl	800267a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003478:	f001 fa48 	bl	800490c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800347c:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <prvAddNewTaskToReadyList+0xcc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003484:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <prvAddNewTaskToReadyList+0xc8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	429a      	cmp	r2, r3
 8003490:	d207      	bcs.n	80034a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003492:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <prvAddNewTaskToReadyList+0xdc>)
 8003494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000c9c 	.word	0x20000c9c
 80034b0:	200007c8 	.word	0x200007c8
 80034b4:	20000ca8 	.word	0x20000ca8
 80034b8:	20000cb8 	.word	0x20000cb8
 80034bc:	20000ca4 	.word	0x20000ca4
 80034c0:	200007cc 	.word	0x200007cc
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034da:	4b14      	ldr	r3, [pc, #80]	@ (800352c <vTaskDelay+0x64>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <vTaskDelay+0x32>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	60bb      	str	r3, [r7, #8]
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	e7fd      	b.n	80034f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034fa:	f000 f883 	bl	8003604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fcf5 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003506:	f000 f88b 	bl	8003620 <xTaskResumeAll>
 800350a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003512:	4b07      	ldr	r3, [pc, #28]	@ (8003530 <vTaskDelay+0x68>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000cc4 	.word	0x20000cc4
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003542:	463a      	mov	r2, r7
 8003544:	1d39      	adds	r1, r7, #4
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f834 	bl	80025b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003550:	6839      	ldr	r1, [r7, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	9202      	str	r2, [sp, #8]
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	460a      	mov	r2, r1
 8003562:	4922      	ldr	r1, [pc, #136]	@ (80035ec <vTaskStartScheduler+0xb8>)
 8003564:	4822      	ldr	r0, [pc, #136]	@ (80035f0 <vTaskStartScheduler+0xbc>)
 8003566:	f7ff fe09 	bl	800317c <xTaskCreateStatic>
 800356a:	4603      	mov	r3, r0
 800356c:	4a21      	ldr	r2, [pc, #132]	@ (80035f4 <vTaskStartScheduler+0xc0>)
 800356e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003570:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <vTaskStartScheduler+0xc0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e001      	b.n	8003582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003588:	f000 fd06 	bl	8003f98 <xTimerCreateTimerTask>
 800358c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d116      	bne.n	80035c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	613b      	str	r3, [r7, #16]
}
 80035a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035a8:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <vTaskStartScheduler+0xc4>)
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295
 80035ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035b0:	4b12      	ldr	r3, [pc, #72]	@ (80035fc <vTaskStartScheduler+0xc8>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035b6:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <vTaskStartScheduler+0xcc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035bc:	f001 f8d0 	bl	8004760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035c0:	e00f      	b.n	80035e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d10b      	bne.n	80035e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	60fb      	str	r3, [r7, #12]
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <vTaskStartScheduler+0xaa>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08004f94 	.word	0x08004f94
 80035f0:	08003c25 	.word	0x08003c25
 80035f4:	20000cc0 	.word	0x20000cc0
 80035f8:	20000cbc 	.word	0x20000cbc
 80035fc:	20000ca8 	.word	0x20000ca8
 8003600:	20000ca0 	.word	0x20000ca0

08003604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <vTaskSuspendAll+0x18>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a03      	ldr	r2, [pc, #12]	@ (800361c <vTaskSuspendAll+0x18>)
 8003610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000cc4 	.word	0x20000cc4

08003620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800362e:	4b42      	ldr	r3, [pc, #264]	@ (8003738 <xTaskResumeAll+0x118>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <xTaskResumeAll+0x2e>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	603b      	str	r3, [r7, #0]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800364e:	f001 f92b 	bl	80048a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <xTaskResumeAll+0x118>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3b01      	subs	r3, #1
 8003658:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <xTaskResumeAll+0x118>)
 800365a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365c:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <xTaskResumeAll+0x118>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d162      	bne.n	800372a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003664:	4b35      	ldr	r3, [pc, #212]	@ (800373c <xTaskResumeAll+0x11c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05e      	beq.n	800372a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800366c:	e02f      	b.n	80036ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366e:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <xTaskResumeAll+0x120>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3318      	adds	r3, #24
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f85a 	bl	8002734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f855 	bl	8002734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368e:	4b2d      	ldr	r3, [pc, #180]	@ (8003744 <xTaskResumeAll+0x124>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d903      	bls.n	800369e <xTaskResumeAll+0x7e>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <xTaskResumeAll+0x124>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a27      	ldr	r2, [pc, #156]	@ (8003748 <xTaskResumeAll+0x128>)
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe ffe0 	bl	800267a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036be:	4b23      	ldr	r3, [pc, #140]	@ (800374c <xTaskResumeAll+0x12c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80036c8:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <xTaskResumeAll+0x130>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <xTaskResumeAll+0x120>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1cb      	bne.n	800366e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036dc:	f000 fb5a 	bl	8003d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <xTaskResumeAll+0x134>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036ec:	f000 f846 	bl	800377c <xTaskIncrementTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80036f6:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <xTaskResumeAll+0x130>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f1      	bne.n	80036ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003708:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <xTaskResumeAll+0x134>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <xTaskResumeAll+0x130>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800371a:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <xTaskResumeAll+0x138>)
 800371c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800372a:	f001 f8ef 	bl	800490c <vPortExitCritical>

	return xAlreadyYielded;
 800372e:	68bb      	ldr	r3, [r7, #8]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000cc4 	.word	0x20000cc4
 800373c:	20000c9c 	.word	0x20000c9c
 8003740:	20000c5c 	.word	0x20000c5c
 8003744:	20000ca4 	.word	0x20000ca4
 8003748:	200007cc 	.word	0x200007cc
 800374c:	200007c8 	.word	0x200007c8
 8003750:	20000cb0 	.word	0x20000cb0
 8003754:	20000cac 	.word	0x20000cac
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003762:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <xTaskGetTickCount+0x1c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000ca0 	.word	0x20000ca0

0800377c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003786:	4b4f      	ldr	r3, [pc, #316]	@ (80038c4 <xTaskIncrementTick+0x148>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 8090 	bne.w	80038b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003790:	4b4d      	ldr	r3, [pc, #308]	@ (80038c8 <xTaskIncrementTick+0x14c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003798:	4a4b      	ldr	r2, [pc, #300]	@ (80038c8 <xTaskIncrementTick+0x14c>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d121      	bne.n	80037e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80037a4:	4b49      	ldr	r3, [pc, #292]	@ (80038cc <xTaskIncrementTick+0x150>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	603b      	str	r3, [r7, #0]
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <xTaskIncrementTick+0x46>
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <xTaskIncrementTick+0x150>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	4b40      	ldr	r3, [pc, #256]	@ (80038d0 <xTaskIncrementTick+0x154>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a3e      	ldr	r2, [pc, #248]	@ (80038cc <xTaskIncrementTick+0x150>)
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4a3e      	ldr	r2, [pc, #248]	@ (80038d0 <xTaskIncrementTick+0x154>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b3e      	ldr	r3, [pc, #248]	@ (80038d4 <xTaskIncrementTick+0x158>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	4a3c      	ldr	r2, [pc, #240]	@ (80038d4 <xTaskIncrementTick+0x158>)
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	f000 fad6 	bl	8003d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037e8:	4b3b      	ldr	r3, [pc, #236]	@ (80038d8 <xTaskIncrementTick+0x15c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d349      	bcc.n	8003886 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f2:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <xTaskIncrementTick+0x150>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fc:	4b36      	ldr	r3, [pc, #216]	@ (80038d8 <xTaskIncrementTick+0x15c>)
 80037fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003802:	601a      	str	r2, [r3, #0]
					break;
 8003804:	e03f      	b.n	8003886 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003806:	4b31      	ldr	r3, [pc, #196]	@ (80038cc <xTaskIncrementTick+0x150>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d203      	bcs.n	8003826 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800381e:	4a2e      	ldr	r2, [pc, #184]	@ (80038d8 <xTaskIncrementTick+0x15c>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003824:	e02f      	b.n	8003886 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3304      	adds	r3, #4
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe ff82 	bl	8002734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe ff79 	bl	8002734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003846:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <xTaskIncrementTick+0x160>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d903      	bls.n	8003856 <xTaskIncrementTick+0xda>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <xTaskIncrementTick+0x160>)
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4a1f      	ldr	r2, [pc, #124]	@ (80038e0 <xTaskIncrementTick+0x164>)
 8003864:	441a      	add	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7fe ff04 	bl	800267a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003876:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <xTaskIncrementTick+0x168>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	429a      	cmp	r2, r3
 800387e:	d3b8      	bcc.n	80037f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003884:	e7b5      	b.n	80037f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <xTaskIncrementTick+0x168>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388c:	4914      	ldr	r1, [pc, #80]	@ (80038e0 <xTaskIncrementTick+0x164>)
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d901      	bls.n	80038a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038a2:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <xTaskIncrementTick+0x16c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e004      	b.n	80038ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038b0:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <xTaskIncrementTick+0x170>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <xTaskIncrementTick+0x170>)
 80038b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038ba:	697b      	ldr	r3, [r7, #20]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000cc4 	.word	0x20000cc4
 80038c8:	20000ca0 	.word	0x20000ca0
 80038cc:	20000c54 	.word	0x20000c54
 80038d0:	20000c58 	.word	0x20000c58
 80038d4:	20000cb4 	.word	0x20000cb4
 80038d8:	20000cbc 	.word	0x20000cbc
 80038dc:	20000ca4 	.word	0x20000ca4
 80038e0:	200007cc 	.word	0x200007cc
 80038e4:	200007c8 	.word	0x200007c8
 80038e8:	20000cb0 	.word	0x20000cb0
 80038ec:	20000cac 	.word	0x20000cac

080038f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038f6:	4b28      	ldr	r3, [pc, #160]	@ (8003998 <vTaskSwitchContext+0xa8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <vTaskSwitchContext+0xac>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003904:	e042      	b.n	800398c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003906:	4b25      	ldr	r3, [pc, #148]	@ (800399c <vTaskSwitchContext+0xac>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390c:	4b24      	ldr	r3, [pc, #144]	@ (80039a0 <vTaskSwitchContext+0xb0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e011      	b.n	8003938 <vTaskSwitchContext+0x48>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <vTaskSwitchContext+0x42>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	607b      	str	r3, [r7, #4]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <vTaskSwitchContext+0x3e>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3b01      	subs	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	491a      	ldr	r1, [pc, #104]	@ (80039a4 <vTaskSwitchContext+0xb4>)
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0e3      	beq.n	8003914 <vTaskSwitchContext+0x24>
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <vTaskSwitchContext+0xb4>)
 8003958:	4413      	add	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3308      	adds	r3, #8
 800396e:	429a      	cmp	r2, r3
 8003970:	d104      	bne.n	800397c <vTaskSwitchContext+0x8c>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <vTaskSwitchContext+0xb8>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4a06      	ldr	r2, [pc, #24]	@ (80039a0 <vTaskSwitchContext+0xb0>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20000cc4 	.word	0x20000cc4
 800399c:	20000cb0 	.word	0x20000cb0
 80039a0:	20000ca4 	.word	0x20000ca4
 80039a4:	200007cc 	.word	0x200007cc
 80039a8:	200007c8 	.word	0x200007c8

080039ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60fb      	str	r3, [r7, #12]
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	e7fd      	b.n	80039d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d4:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <vTaskPlaceOnEventList+0x48>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3318      	adds	r3, #24
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fe fe70 	bl	80026c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e2:	2101      	movs	r1, #1
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	f000 fa83 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200007c8 	.word	0x200007c8

080039f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	617b      	str	r3, [r7, #20]
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a22:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <vTaskPlaceOnEventListRestricted+0x54>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3318      	adds	r3, #24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7fe fe25 	bl	800267a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	68b8      	ldr	r0, [r7, #8]
 8003a40:	f000 fa56 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
	}
 8003a44:	bf00      	nop
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200007c8 	.word	0x200007c8

08003a50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60fb      	str	r3, [r7, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3318      	adds	r3, #24
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fe56 	bl	8002734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a88:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <xTaskRemoveFromEventList+0xb0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe fe4d 	bl	8002734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9e:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <xTaskRemoveFromEventList+0xb4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d903      	bls.n	8003aae <xTaskRemoveFromEventList+0x5e>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	4a16      	ldr	r2, [pc, #88]	@ (8003b04 <xTaskRemoveFromEventList+0xb4>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4a13      	ldr	r2, [pc, #76]	@ (8003b08 <xTaskRemoveFromEventList+0xb8>)
 8003abc:	441a      	add	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fe fdd8 	bl	800267a <vListInsertEnd>
 8003aca:	e005      	b.n	8003ad8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3318      	adds	r3, #24
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	480e      	ldr	r0, [pc, #56]	@ (8003b0c <xTaskRemoveFromEventList+0xbc>)
 8003ad4:	f7fe fdd1 	bl	800267a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <xTaskRemoveFromEventList+0xc0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d905      	bls.n	8003af2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <xTaskRemoveFromEventList+0xc4>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e001      	b.n	8003af6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003af6:	697b      	ldr	r3, [r7, #20]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000cc4 	.word	0x20000cc4
 8003b04:	20000ca4 	.word	0x20000ca4
 8003b08:	200007cc 	.word	0x200007cc
 8003b0c:	20000c5c 	.word	0x20000c5c
 8003b10:	200007c8 	.word	0x200007c8
 8003b14:	20000cb0 	.word	0x20000cb0

08003b18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <vTaskInternalSetTimeOutState+0x24>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <vTaskInternalSetTimeOutState+0x28>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	605a      	str	r2, [r3, #4]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20000cb4 	.word	0x20000cb4
 8003b40:	20000ca0 	.word	0x20000ca0

08003b44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	613b      	str	r3, [r7, #16]
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	60fb      	str	r3, [r7, #12]
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	e7fd      	b.n	8003b86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b8a:	f000 fe8d 	bl	80048a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <xTaskCheckForTimeOut+0xc0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d102      	bne.n	8003bae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e023      	b.n	8003bf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <xTaskCheckForTimeOut+0xc4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d007      	beq.n	8003bca <xTaskCheckForTimeOut+0x86>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e015      	b.n	8003bf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d20b      	bcs.n	8003bec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff99 	bl	8003b18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e004      	b.n	8003bf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bf6:	f000 fe89 	bl	800490c <vPortExitCritical>

	return xReturn;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000ca0 	.word	0x20000ca0
 8003c08:	20000cb4 	.word	0x20000cb4

08003c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <vTaskMissedYield+0x14>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000cb0 	.word	0x20000cb0

08003c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c2c:	f000 f854 	bl	8003cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <prvIdleTask+0x2c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d907      	bls.n	8003c48 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003c38:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <prvIdleTask+0x30>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003c48:	f7fc fce8 	bl	800061c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003c4c:	e7ee      	b.n	8003c2c <prvIdleTask+0x8>
 8003c4e:	bf00      	nop
 8003c50:	200007cc 	.word	0x200007cc
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e00c      	b.n	8003c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <prvInitialiseTaskLists+0x60>)
 8003c70:	4413      	add	r3, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fcd4 	bl	8002620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b37      	cmp	r3, #55	@ 0x37
 8003c82:	d9ef      	bls.n	8003c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c84:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <prvInitialiseTaskLists+0x64>)
 8003c86:	f7fe fccb 	bl	8002620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c8a:	480d      	ldr	r0, [pc, #52]	@ (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003c8c:	f7fe fcc8 	bl	8002620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c90:	480c      	ldr	r0, [pc, #48]	@ (8003cc4 <prvInitialiseTaskLists+0x6c>)
 8003c92:	f7fe fcc5 	bl	8002620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c96:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <prvInitialiseTaskLists+0x70>)
 8003c98:	f7fe fcc2 	bl	8002620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c9c:	480b      	ldr	r0, [pc, #44]	@ (8003ccc <prvInitialiseTaskLists+0x74>)
 8003c9e:	f7fe fcbf 	bl	8002620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <prvInitialiseTaskLists+0x78>)
 8003ca4:	4a05      	ldr	r2, [pc, #20]	@ (8003cbc <prvInitialiseTaskLists+0x64>)
 8003ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <prvInitialiseTaskLists+0x7c>)
 8003caa:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200007cc 	.word	0x200007cc
 8003cbc:	20000c2c 	.word	0x20000c2c
 8003cc0:	20000c40 	.word	0x20000c40
 8003cc4:	20000c5c 	.word	0x20000c5c
 8003cc8:	20000c70 	.word	0x20000c70
 8003ccc:	20000c88 	.word	0x20000c88
 8003cd0:	20000c54 	.word	0x20000c54
 8003cd4:	20000c58 	.word	0x20000c58

08003cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cde:	e019      	b.n	8003d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ce0:	f000 fde2 	bl	80048a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <prvCheckTasksWaitingTermination+0x50>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fd1f 	bl	8002734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d0a:	f000 fdff 	bl	800490c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f810 	bl	8003d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e1      	bne.n	8003ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000c70 	.word	0x20000c70
 8003d2c:	20000c9c 	.word	0x20000c9c
 8003d30:	20000c84 	.word	0x20000c84

08003d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d108      	bne.n	8003d58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ff9c 	bl	8004c88 <vPortFree>
				vPortFree( pxTCB );
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 ff99 	bl	8004c88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d56:	e019      	b.n	8003d8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d103      	bne.n	8003d6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 ff90 	bl	8004c88 <vPortFree>
	}
 8003d68:	e010      	b.n	8003d8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d00b      	beq.n	8003d8c <prvDeleteTCB+0x58>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <prvDeleteTCB+0x54>
	}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dac:	e008      	b.n	8003dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000c54 	.word	0x20000c54
 8003dd0:	20000cbc 	.word	0x20000cbc

08003dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <xTaskGetSchedulerState+0x34>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003de2:	2301      	movs	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	e008      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de8:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <xTaskGetSchedulerState+0x38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e001      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dfa:	687b      	ldr	r3, [r7, #4]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000ca8 	.word	0x20000ca8
 8003e0c:	20000cc4 	.word	0x20000cc4

08003e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d058      	beq.n	8003ed8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <xTaskPriorityDisinherit+0xd4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d00b      	beq.n	8003e48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60bb      	str	r3, [r7, #8]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d02c      	beq.n	8003ed8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d128      	bne.n	8003ed8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fc52 	bl	8002734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <xTaskPriorityDisinherit+0xd8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d903      	bls.n	8003eb8 <xTaskPriorityDisinherit+0xa8>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee8 <xTaskPriorityDisinherit+0xd8>)
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <xTaskPriorityDisinherit+0xdc>)
 8003ec6:	441a      	add	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f7fe fbd3 	bl	800267a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ed8:	697b      	ldr	r3, [r7, #20]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200007c8 	.word	0x200007c8
 8003ee8:	20000ca4 	.word	0x20000ca4
 8003eec:	200007cc 	.word	0x200007cc

08003ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003efa:	4b21      	ldr	r3, [pc, #132]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0x90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f00:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fc14 	bl	8002734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d10a      	bne.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4819      	ldr	r0, [pc, #100]	@ (8003f88 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f24:	f7fe fba9 	bl	800267a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f28:	e026      	b.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d209      	bcs.n	8003f56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fe fbb7 	bl	80026c2 <vListInsert>
}
 8003f54:	e010      	b.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f56:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7fe fbad 	bl	80026c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d202      	bcs.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f72:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000ca0 	.word	0x20000ca0
 8003f84:	200007c8 	.word	0x200007c8
 8003f88:	20000c88 	.word	0x20000c88
 8003f8c:	20000c58 	.word	0x20000c58
 8003f90:	20000c54 	.word	0x20000c54
 8003f94:	20000cbc 	.word	0x20000cbc

08003f98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fa2:	f000 fb13 	bl	80045cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <xTimerCreateTimerTask+0x84>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d021      	beq.n	8003ff2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fb6:	1d3a      	adds	r2, r7, #4
 8003fb8:	f107 0108 	add.w	r1, r7, #8
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fb13 	bl	80025ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	9202      	str	r2, [sp, #8]
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	4911      	ldr	r1, [pc, #68]	@ (8004020 <xTimerCreateTimerTask+0x88>)
 8003fda:	4812      	ldr	r0, [pc, #72]	@ (8004024 <xTimerCreateTimerTask+0x8c>)
 8003fdc:	f7ff f8ce 	bl	800317c <xTaskCreateStatic>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <xTimerCreateTimerTask+0x90>)
 8003fe4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fe6:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <xTimerCreateTimerTask+0x90>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	613b      	str	r3, [r7, #16]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004010:	697b      	ldr	r3, [r7, #20]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000cf8 	.word	0x20000cf8
 8004020:	08004f9c 	.word	0x08004f9c
 8004024:	08004165 	.word	0x08004165
 8004028:	20000cfc 	.word	0x20000cfc

0800402c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xTimerGenericCommand+0x30>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800405c:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <xTimerGenericCommand+0x98>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02a      	beq.n	80040ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b05      	cmp	r3, #5
 8004074:	dc18      	bgt.n	80040a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004076:	f7ff fead 	bl	8003dd4 <xTaskGetSchedulerState>
 800407a:	4603      	mov	r3, r0
 800407c:	2b02      	cmp	r3, #2
 800407e:	d109      	bne.n	8004094 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <xTimerGenericCommand+0x98>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	f107 0110 	add.w	r1, r7, #16
 8004088:	2300      	movs	r3, #0
 800408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800408c:	f7fe fc86 	bl	800299c <xQueueGenericSend>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24
 8004092:	e012      	b.n	80040ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <xTimerGenericCommand+0x98>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	f107 0110 	add.w	r1, r7, #16
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	f7fe fc7c 	bl	800299c <xQueueGenericSend>
 80040a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80040a6:	e008      	b.n	80040ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <xTimerGenericCommand+0x98>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	f107 0110 	add.w	r1, r7, #16
 80040b0:	2300      	movs	r3, #0
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	f7fe fd74 	bl	8002ba0 <xQueueGenericSendFromISR>
 80040b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3728      	adds	r7, #40	@ 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000cf8 	.word	0x20000cf8

080040c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <prvProcessExpiredTimer+0x98>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fb27 	bl	8002734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	18d1      	adds	r1, r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f000 f8d5 	bl	80042b0 <prvInsertTimerInActiveList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800410c:	2300      	movs	r3, #0
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	2100      	movs	r1, #0
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff ff88 	bl	800402c <xTimerGenericCommand>
 800411c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	4798      	blx	r3
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000cf0 	.word	0x20000cf0

08004164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f859 	bl	8004228 <prvGetNextExpireTime>
 8004176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4619      	mov	r1, r3
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f805 	bl	800418c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004182:	f000 f8d7 	bl	8004334 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004186:	bf00      	nop
 8004188:	e7f0      	b.n	800416c <prvTimerTask+0x8>
	...

0800418c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004196:	f7ff fa35 	bl	8003604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f866 	bl	8004270 <prvSampleTimeNow>
 80041a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d130      	bne.n	800420e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d806      	bhi.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041ba:	f7ff fa31 	bl	8003620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff81 	bl	80040c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041c6:	e024      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <prvProcessTimerOrBlockTask+0x90>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <prvProcessTimerOrBlockTask+0x50>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <prvProcessTimerOrBlockTask+0x52>
 80041dc:	2300      	movs	r3, #0
 80041de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <prvProcessTimerOrBlockTask+0x94>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fe ff91 	bl	8003114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f7ff fa15 	bl	8003620 <xTaskResumeAll>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <prvProcessTimerOrBlockTask+0x98>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
}
 800420c:	e001      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800420e:	f7ff fa07 	bl	8003620 <xTaskResumeAll>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000cf4 	.word	0x20000cf4
 8004220:	20000cf8 	.word	0x20000cf8
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004230:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <prvGetNextExpireTime+0x44>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <prvGetNextExpireTime+0x16>
 800423a:	2201      	movs	r2, #1
 800423c:	e000      	b.n	8004240 <prvGetNextExpireTime+0x18>
 800423e:	2200      	movs	r2, #0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <prvGetNextExpireTime+0x44>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e001      	b.n	800425c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000cf0 	.word	0x20000cf0

08004270 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004278:	f7ff fa70 	bl	800375c <xTaskGetTickCount>
 800427c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <prvSampleTimeNow+0x3c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	429a      	cmp	r2, r3
 8004286:	d205      	bcs.n	8004294 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004288:	f000 f93a 	bl	8004500 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e002      	b.n	800429a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800429a:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <prvSampleTimeNow+0x3c>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042a0:	68fb      	ldr	r3, [r7, #12]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000d00 	.word	0x20000d00

080042b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d812      	bhi.n	80042fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e01b      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <prvInsertTimerInActiveList+0x7c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe f9e4 	bl	80026c2 <vListInsert>
 80042fa:	e012      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d206      	bcs.n	8004312 <prvInsertTimerInActiveList+0x62>
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e007      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004312:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <prvInsertTimerInActiveList+0x80>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe f9d0 	bl	80026c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004322:	697b      	ldr	r3, [r7, #20]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000cf4 	.word	0x20000cf4
 8004330:	20000cf0 	.word	0x20000cf0

08004334 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	@ 0x38
 8004338:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800433a:	e0ce      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da19      	bge.n	8004376 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	3304      	adds	r3, #4
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	61fb      	str	r3, [r7, #28]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436c:	6850      	ldr	r0, [r2, #4]
 800436e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004370:	6892      	ldr	r2, [r2, #8]
 8004372:	4611      	mov	r1, r2
 8004374:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f2c0 80ae 	blt.w	80044da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe f9d0 	bl	8002734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004394:	463b      	mov	r3, r7
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff6a 	bl	8004270 <prvSampleTimeNow>
 800439c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	f200 8097 	bhi.w	80044d4 <prvProcessReceivedCommands+0x1a0>
 80043a6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <prvProcessReceivedCommands+0x78>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043d5 	.word	0x080043d5
 80043b8:	0800444b 	.word	0x0800444b
 80043bc:	0800445f 	.word	0x0800445f
 80043c0:	080044ab 	.word	0x080044ab
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043d5 	.word	0x080043d5
 80043cc:	0800444b 	.word	0x0800444b
 80043d0:	0800445f 	.word	0x0800445f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f4:	f7ff ff5c 	bl	80042b0 <prvInsertTimerInActiveList>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06c      	beq.n	80044d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004404:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d061      	beq.n	80044d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	441a      	add	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	2100      	movs	r1, #0
 8004424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004426:	f7ff fe01 	bl	800402c <xTimerGenericCommand>
 800442a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d152      	bne.n	80044d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	61bb      	str	r3, [r7, #24]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800445c:	e03d      	b.n	80044da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	18d1      	adds	r1, r2, r3
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a4:	f7ff ff04 	bl	80042b0 <prvInsertTimerInActiveList>
					break;
 80044a8:	e017      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80044b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044ba:	f000 fbe5 	bl	8004c88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044be:	e00c      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80044d2:	e002      	b.n	80044da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
					break;
 80044d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044da:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <prvProcessReceivedCommands+0x1c8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1d39      	adds	r1, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fbfa 	bl	8002cdc <xQueueReceive>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f47f af26 	bne.w	800433c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3730      	adds	r7, #48	@ 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000cf8 	.word	0x20000cf8

08004500 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004506:	e049      	b.n	800459c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004508:	4b2e      	ldr	r3, [pc, #184]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004512:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe f907 	bl	8002734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02f      	beq.n	800459c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d90e      	bls.n	800456c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800455a:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe f8ac 	bl	80026c2 <vListInsert>
 800456a:	e017      	b.n	800459c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800456c:	2300      	movs	r3, #0
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2300      	movs	r3, #0
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	2100      	movs	r1, #0
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fd58 	bl	800402c <xTimerGenericCommand>
 800457c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	603b      	str	r3, [r7, #0]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800459c:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1b0      	bne.n	8004508 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <prvSwitchTimerLists+0xc8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 80045b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <prvSwitchTimerLists+0xc8>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000cf0 	.word	0x20000cf0
 80045c8:	20000cf4 	.word	0x20000cf4

080045cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045d2:	f000 f969 	bl	80048a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d120      	bne.n	8004620 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045de:	4814      	ldr	r0, [pc, #80]	@ (8004630 <prvCheckForValidListAndQueue+0x64>)
 80045e0:	f7fe f81e 	bl	8002620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045e4:	4813      	ldr	r0, [pc, #76]	@ (8004634 <prvCheckForValidListAndQueue+0x68>)
 80045e6:	f7fe f81b 	bl	8002620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045ea:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <prvCheckForValidListAndQueue+0x6c>)
 80045ec:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <prvCheckForValidListAndQueue+0x64>)
 80045ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045f0:	4b12      	ldr	r3, [pc, #72]	@ (800463c <prvCheckForValidListAndQueue+0x70>)
 80045f2:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <prvCheckForValidListAndQueue+0x68>)
 80045f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <prvCheckForValidListAndQueue+0x74>)
 80045fc:	4a11      	ldr	r2, [pc, #68]	@ (8004644 <prvCheckForValidListAndQueue+0x78>)
 80045fe:	2110      	movs	r1, #16
 8004600:	200a      	movs	r0, #10
 8004602:	f7fe f92b 	bl	800285c <xQueueGenericCreateStatic>
 8004606:	4603      	mov	r3, r0
 8004608:	4a08      	ldr	r2, [pc, #32]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 800460a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	490b      	ldr	r1, [pc, #44]	@ (8004648 <prvCheckForValidListAndQueue+0x7c>)
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fd50 	bl	80030c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004620:	f000 f974 	bl	800490c <vPortExitCritical>
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000cf8 	.word	0x20000cf8
 8004630:	20000cc8 	.word	0x20000cc8
 8004634:	20000cdc 	.word	0x20000cdc
 8004638:	20000cf0 	.word	0x20000cf0
 800463c:	20000cf4 	.word	0x20000cf4
 8004640:	20000da4 	.word	0x20000da4
 8004644:	20000d04 	.word	0x20000d04
 8004648:	08004fa4 	.word	0x08004fa4

0800464c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b04      	subs	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800467c:	4a0c      	ldr	r2, [pc, #48]	@ (80046b0 <pxPortInitialiseStack+0x64>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b14      	subs	r3, #20
 8004686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b04      	subs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f06f 0202 	mvn.w	r2, #2
 800469a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b20      	subs	r3, #32
 80046a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	080046b5 	.word	0x080046b5

080046b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <prvTaskExitError+0x58>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d00b      	beq.n	80046e0 <prvTaskExitError+0x2c>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	60fb      	str	r3, [r7, #12]
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <prvTaskExitError+0x28>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60bb      	str	r3, [r7, #8]
}
 80046f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046f4:	bf00      	nop
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0fc      	beq.n	80046f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	2000000c 	.word	0x2000000c

08004710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <pxCurrentTCBConst2>)
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	f380 8809 	msr	PSP, r0
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	4770      	bx	lr
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst2>:
 8004730:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004738:	4808      	ldr	r0, [pc, #32]	@ (800475c <prvPortStartFirstTask+0x24>)
 800473a:	6800      	ldr	r0, [r0, #0]
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f380 8808 	msr	MSP, r0
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8814 	msr	CONTROL, r0
 800474a:	b662      	cpsie	i
 800474c:	b661      	cpsie	f
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	df00      	svc	0
 8004758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800475a:	bf00      	nop
 800475c:	e000ed08 	.word	0xe000ed08

08004760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <xPortStartScheduler+0x124>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a47      	ldr	r2, [pc, #284]	@ (8004888 <xPortStartScheduler+0x128>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10b      	bne.n	8004788 <xPortStartScheduler+0x28>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60fb      	str	r3, [r7, #12]
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004788:	4b3e      	ldr	r3, [pc, #248]	@ (8004884 <xPortStartScheduler+0x124>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3f      	ldr	r2, [pc, #252]	@ (800488c <xPortStartScheduler+0x12c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d10b      	bne.n	80047aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	613b      	str	r3, [r7, #16]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047aa:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <xPortStartScheduler+0x130>)
 80047ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	22ff      	movs	r2, #255	@ 0xff
 80047ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <xPortStartScheduler+0x134>)
 80047d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047d2:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <xPortStartScheduler+0x138>)
 80047d4:	2207      	movs	r2, #7
 80047d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d8:	e009      	b.n	80047ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80047da:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <xPortStartScheduler+0x138>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <xPortStartScheduler+0x138>)
 80047e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b80      	cmp	r3, #128	@ 0x80
 80047f8:	d0ef      	beq.n	80047da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047fa:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <xPortStartScheduler+0x138>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1c3 0307 	rsb	r3, r3, #7
 8004802:	2b04      	cmp	r3, #4
 8004804:	d00b      	beq.n	800481e <xPortStartScheduler+0xbe>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60bb      	str	r3, [r7, #8]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800481e:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <xPortStartScheduler+0x138>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	4a1c      	ldr	r2, [pc, #112]	@ (8004898 <xPortStartScheduler+0x138>)
 8004826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004828:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <xPortStartScheduler+0x138>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004830:	4a19      	ldr	r2, [pc, #100]	@ (8004898 <xPortStartScheduler+0x138>)
 8004832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800483c:	4b17      	ldr	r3, [pc, #92]	@ (800489c <xPortStartScheduler+0x13c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a16      	ldr	r2, [pc, #88]	@ (800489c <xPortStartScheduler+0x13c>)
 8004842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004848:	4b14      	ldr	r3, [pc, #80]	@ (800489c <xPortStartScheduler+0x13c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a13      	ldr	r2, [pc, #76]	@ (800489c <xPortStartScheduler+0x13c>)
 800484e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004854:	f000 f8da 	bl	8004a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004858:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <xPortStartScheduler+0x140>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800485e:	f000 f8f9 	bl	8004a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <xPortStartScheduler+0x144>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a0f      	ldr	r2, [pc, #60]	@ (80048a4 <xPortStartScheduler+0x144>)
 8004868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800486c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800486e:	f7ff ff63 	bl	8004738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004872:	f7ff f83d 	bl	80038f0 <vTaskSwitchContext>
	prvTaskExitError();
 8004876:	f7ff ff1d 	bl	80046b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed00 	.word	0xe000ed00
 8004888:	410fc271 	.word	0x410fc271
 800488c:	410fc270 	.word	0x410fc270
 8004890:	e000e400 	.word	0xe000e400
 8004894:	20000df4 	.word	0x20000df4
 8004898:	20000df8 	.word	0x20000df8
 800489c:	e000ed20 	.word	0xe000ed20
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	e000ef34 	.word	0xe000ef34

080048a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
}
 80048c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <vPortEnterCritical+0x5c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <vPortEnterCritical+0x5c>)
 80048ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <vPortEnterCritical+0x5c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d110      	bne.n	80048f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <vPortEnterCritical+0x60>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	603b      	str	r3, [r7, #0]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <vPortEnterCritical+0x4a>
	}
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <vPortExitCritical+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <vPortExitCritical+0x26>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	607b      	str	r3, [r7, #4]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a08      	ldr	r2, [pc, #32]	@ (800495c <vPortExitCritical+0x50>)
 800493a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800493c:	4b07      	ldr	r3, [pc, #28]	@ (800495c <vPortExitCritical+0x50>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <vPortExitCritical+0x44>
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	2000000c 	.word	0x2000000c

08004960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004960:	f3ef 8009 	mrs	r0, PSP
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <pxCurrentTCBConst>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f01e 0f10 	tst.w	lr, #16
 8004970:	bf08      	it	eq
 8004972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	6010      	str	r0, [r2, #0]
 800497c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004984:	f380 8811 	msr	BASEPRI, r0
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f7fe ffae 	bl	80038f0 <vTaskSwitchContext>
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f380 8811 	msr	BASEPRI, r0
 800499c:	bc09      	pop	{r0, r3}
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a6:	f01e 0f10 	tst.w	lr, #16
 80049aa:	bf08      	it	eq
 80049ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049b0:	f380 8809 	msr	PSP, r0
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w

080049c0 <pxCurrentTCBConst>:
 80049c0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f7fe fecb 	bl	800377c <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <xPortSysTickHandler+0x40>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f383 8811 	msr	BASEPRI, r3
}
 80049fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <vPortSetupTimerInterrupt+0x38>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <vPortSetupTimerInterrupt+0x3c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <vPortSetupTimerInterrupt+0x40>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <vPortSetupTimerInterrupt+0x44>)
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a2e:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e010 	.word	0xe000e010
 8004a44:	e000e018 	.word	0xe000e018
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	10624dd3 	.word	0x10624dd3
 8004a50:	e000e014 	.word	0xe000e014

08004a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a64 <vPortEnableVFP+0x10>
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a5e:	6001      	str	r1, [r0, #0]
 8004a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a62:	bf00      	nop
 8004a64:	e000ed88 	.word	0xe000ed88

08004a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a6e:	f3ef 8305 	mrs	r3, IPSR
 8004a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	d915      	bls.n	8004aa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a7a:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <vPortValidateInterruptPriority+0x74>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a84:	4b16      	ldr	r3, [pc, #88]	@ (8004ae0 <vPortValidateInterruptPriority+0x78>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	7afa      	ldrb	r2, [r7, #11]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d20b      	bcs.n	8004aa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <vPortValidateInterruptPriority+0x7c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <vPortValidateInterruptPriority+0x80>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d90b      	bls.n	8004ace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	603b      	str	r3, [r7, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <vPortValidateInterruptPriority+0x62>
	}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000e3f0 	.word	0xe000e3f0
 8004ae0:	20000df4 	.word	0x20000df4
 8004ae4:	e000ed0c 	.word	0xe000ed0c
 8004ae8:	20000df8 	.word	0x20000df8

08004aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	@ 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004af8:	f7fe fd84 	bl	8003604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004afc:	4b5c      	ldr	r3, [pc, #368]	@ (8004c70 <pvPortMalloc+0x184>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b04:	f000 f924 	bl	8004d50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b08:	4b5a      	ldr	r3, [pc, #360]	@ (8004c74 <pvPortMalloc+0x188>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 8095 	bne.w	8004c40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01e      	beq.n	8004b5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d015      	beq.n	8004b5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <pvPortMalloc+0x6e>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617b      	str	r3, [r7, #20]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d06f      	beq.n	8004c40 <pvPortMalloc+0x154>
 8004b60:	4b45      	ldr	r3, [pc, #276]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d86a      	bhi.n	8004c40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b6a:	4b44      	ldr	r3, [pc, #272]	@ (8004c7c <pvPortMalloc+0x190>)
 8004b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <pvPortMalloc+0x190>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b74:	e004      	b.n	8004b80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d903      	bls.n	8004b92 <pvPortMalloc+0xa6>
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b92:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <pvPortMalloc+0x184>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d051      	beq.n	8004c40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4413      	add	r3, r2
 8004ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d920      	bls.n	8004c00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <pvPortMalloc+0xfc>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	613b      	str	r3, [r7, #16]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bfa:	69b8      	ldr	r0, [r7, #24]
 8004bfc:	f000 f90a 	bl	8004e14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <pvPortMalloc+0x194>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d203      	bcs.n	8004c22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c1a:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	@ (8004c80 <pvPortMalloc+0x194>)
 8004c20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <pvPortMalloc+0x188>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c36:	4b13      	ldr	r3, [pc, #76]	@ (8004c84 <pvPortMalloc+0x198>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4a11      	ldr	r2, [pc, #68]	@ (8004c84 <pvPortMalloc+0x198>)
 8004c3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c40:	f7fe fcee 	bl	8003620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <pvPortMalloc+0x17a>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <pvPortMalloc+0x176>
	return pvReturn;
 8004c66:	69fb      	ldr	r3, [r7, #28]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20004a04 	.word	0x20004a04
 8004c74:	20004a18 	.word	0x20004a18
 8004c78:	20004a08 	.word	0x20004a08
 8004c7c:	200049fc 	.word	0x200049fc
 8004c80:	20004a0c 	.word	0x20004a0c
 8004c84:	20004a10 	.word	0x20004a10

08004c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04f      	beq.n	8004d3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <vPortFree+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <vPortFree+0x46>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60fb      	str	r3, [r7, #12]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <vPortFree+0x66>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4b14      	ldr	r3, [pc, #80]	@ (8004d44 <vPortFree+0xbc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01e      	beq.n	8004d3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11a      	bne.n	8004d3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <vPortFree+0xbc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	401a      	ands	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d14:	f7fe fc76 	bl	8003604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <vPortFree+0xc0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	4a09      	ldr	r2, [pc, #36]	@ (8004d48 <vPortFree+0xc0>)
 8004d24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d26:	6938      	ldr	r0, [r7, #16]
 8004d28:	f000 f874 	bl	8004e14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <vPortFree+0xc4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	4a06      	ldr	r2, [pc, #24]	@ (8004d4c <vPortFree+0xc4>)
 8004d34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d36:	f7fe fc73 	bl	8003620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20004a18 	.word	0x20004a18
 8004d48:	20004a08 	.word	0x20004a08
 8004d4c:	20004a14 	.word	0x20004a14

08004d50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004d5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d5c:	4b27      	ldr	r3, [pc, #156]	@ (8004dfc <prvHeapInit+0xac>)
 8004d5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dfc <prvHeapInit+0xac>)
 8004d80:	4413      	add	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <prvHeapInit+0xb0>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e00 <prvHeapInit+0xb0>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0307 	bic.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a15      	ldr	r2, [pc, #84]	@ (8004e04 <prvHeapInit+0xb4>)
 8004db0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004db2:	4b14      	ldr	r3, [pc, #80]	@ (8004e04 <prvHeapInit+0xb4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dba:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <prvHeapInit+0xb4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <prvHeapInit+0xb4>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <prvHeapInit+0xb8>)
 8004dde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a09      	ldr	r2, [pc, #36]	@ (8004e0c <prvHeapInit+0xbc>)
 8004de6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004de8:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <prvHeapInit+0xc0>)
 8004dea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004dee:	601a      	str	r2, [r3, #0]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	20000dfc 	.word	0x20000dfc
 8004e00:	200049fc 	.word	0x200049fc
 8004e04:	20004a04 	.word	0x20004a04
 8004e08:	20004a0c 	.word	0x20004a0c
 8004e0c:	20004a08 	.word	0x20004a08
 8004e10:	20004a18 	.word	0x20004a18

08004e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e1c:	4b28      	ldr	r3, [pc, #160]	@ (8004ec0 <prvInsertBlockIntoFreeList+0xac>)
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e002      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x14>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d8f7      	bhi.n	8004e22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d108      	bne.n	8004e56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	441a      	add	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d118      	bne.n	8004e9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d00d      	beq.n	8004e92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	441a      	add	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e008      	b.n	8004ea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e003      	b.n	8004ea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d002      	beq.n	8004eb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	200049fc 	.word	0x200049fc
 8004ec4:	20004a04 	.word	0x20004a04

08004ec8 <memset>:
 8004ec8:	4402      	add	r2, r0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d100      	bne.n	8004ed2 <memset+0xa>
 8004ed0:	4770      	bx	lr
 8004ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed6:	e7f9      	b.n	8004ecc <memset+0x4>

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4d0d      	ldr	r5, [pc, #52]	@ (8004f10 <__libc_init_array+0x38>)
 8004edc:	4c0d      	ldr	r4, [pc, #52]	@ (8004f14 <__libc_init_array+0x3c>)
 8004ede:	1b64      	subs	r4, r4, r5
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	42a6      	cmp	r6, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8004f18 <__libc_init_array+0x40>)
 8004eea:	4c0c      	ldr	r4, [pc, #48]	@ (8004f1c <__libc_init_array+0x44>)
 8004eec:	f000 f826 	bl	8004f3c <_init>
 8004ef0:	1b64      	subs	r4, r4, r5
 8004ef2:	10a4      	asrs	r4, r4, #2
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	42a6      	cmp	r6, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f00:	4798      	blx	r3
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0a:	4798      	blx	r3
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	08004fcc 	.word	0x08004fcc
 8004f14:	08004fcc 	.word	0x08004fcc
 8004f18:	08004fcc 	.word	0x08004fcc
 8004f1c:	08004fd0 	.word	0x08004fd0

08004f20 <memcpy>:
 8004f20:	440a      	add	r2, r1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	4770      	bx	lr
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f36:	4291      	cmp	r1, r2
 8004f38:	d1f9      	bne.n	8004f2e <memcpy+0xe>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <_init>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr

08004f48 <_fini>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr
