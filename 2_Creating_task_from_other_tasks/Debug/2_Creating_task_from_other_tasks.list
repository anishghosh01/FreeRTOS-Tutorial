
2_Creating_task_from_other_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004ea4  08004ea4  00005ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004f24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  08004f34  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  08004f34  00006a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a8f  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003221  00000000  00000000  0001cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0001fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbe  00000000  00000000  00021128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c20  00000000  00000000  000220e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166f9  00000000  00000000  00025d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db29d  00000000  00000000  0003c3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011769c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  001176e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011cc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e8c 	.word	0x08004e8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004e8c 	.word	0x08004e8c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
void vBlueLedControllerTask(void *pvParameters);
void vRedLedControllerTask(void *pvParameters);
void vGreenLedControllerTask(void *pvParameters);

int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8


  HAL_Init();
 8000542:	f000 fa5d 	bl	8000a00 <HAL_Init>
  SystemClock_Config();
 8000546:	f000 f857 	bl	80005f8 <SystemClock_Config>
  MX_GPIO_Init();
 800054a:	f000 f8df 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8b3 	bl	80006b8 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2264      	movs	r2, #100	@ 0x64
 800055e:	4904      	ldr	r1, [pc, #16]	@ (8000570 <main+0x34>)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <main+0x38>)
 8000562:	f002 fe4b 	bl	80031fc <xTaskCreate>
		  NULL);




  vTaskStartScheduler();
 8000566:	f002 ff8f 	bl	8003488 <vTaskStartScheduler>

  while (1)
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <main+0x2e>
 800056e:	bf00      	nop
 8000570:	08004ea4 	.word	0x08004ea4
 8000574:	08000579 	.word	0x08000579

08000578 <vBlueLedControllerTask>:
  }

}

void vBlueLedControllerTask(void *pvParameters)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	  xTaskCreate(vRedLedControllerTask,
 8000580:	2300      	movs	r3, #0
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2301      	movs	r3, #1
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2264      	movs	r2, #100	@ 0x64
 800058c:	4909      	ldr	r1, [pc, #36]	@ (80005b4 <vBlueLedControllerTask+0x3c>)
 800058e:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <vBlueLedControllerTask+0x40>)
 8000590:	f002 fe34 	bl	80031fc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  NULL);

	  xTaskCreate(vGreenLedControllerTask,
 8000594:	2300      	movs	r3, #0
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2301      	movs	r3, #1
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2264      	movs	r2, #100	@ 0x64
 80005a0:	4906      	ldr	r1, [pc, #24]	@ (80005bc <vBlueLedControllerTask+0x44>)
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <vBlueLedControllerTask+0x48>)
 80005a4:	f002 fe2a 	bl	80031fc <xTaskCreate>
			  1,
			  NULL);

	while(1)
	{
		BlueTaskProfiler++;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <vBlueLedControllerTask+0x4c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <vBlueLedControllerTask+0x4c>)
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	e7f9      	b.n	80005a8 <vBlueLedControllerTask+0x30>
 80005b4:	08004eb8 	.word	0x08004eb8
 80005b8:	080005c9 	.word	0x080005c9
 80005bc:	08004ecc 	.word	0x08004ecc
 80005c0:	080005e1 	.word	0x080005e1
 80005c4:	20000074 	.word	0x20000074

080005c8 <vRedLedControllerTask>:
	};
}

void vRedLedControllerTask(void *pvParameters)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 80005d0:	4b02      	ldr	r3, [pc, #8]	@ (80005dc <vRedLedControllerTask+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a01      	ldr	r2, [pc, #4]	@ (80005dc <vRedLedControllerTask+0x14>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	e7f9      	b.n	80005d0 <vRedLedControllerTask+0x8>
 80005dc:	20000078 	.word	0x20000078

080005e0 <vGreenLedControllerTask>:
	};
}

void vGreenLedControllerTask(void *pvParameters)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 80005e8:	4b02      	ldr	r3, [pc, #8]	@ (80005f4 <vGreenLedControllerTask+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a01      	ldr	r2, [pc, #4]	@ (80005f4 <vGreenLedControllerTask+0x14>)
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	e7f9      	b.n	80005e8 <vGreenLedControllerTask+0x8>
 80005f4:	2000007c 	.word	0x2000007c

080005f8 <SystemClock_Config>:
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	@ 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fc06 	bl	8004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <SystemClock_Config+0xb8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <SystemClock_Config+0xb8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <SystemClock_Config+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <SystemClock_Config+0xbc>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <SystemClock_Config+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff75 	bl	800155c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000678:	f000 f874 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fc6a 	bl	8000f70 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f85f 	bl	8000764 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fc6e 	bl	8001fd0 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f833 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_GPIO_Init+0x30>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <MX_GPIO_Init+0x30>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_GPIO_Init+0x30>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d101      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000752:	f000 f977 	bl	8000a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010000 	.word	0x40010000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a11      	ldr	r2, [pc, #68]	@ (80007c4 <HAL_MspInit+0x54>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <HAL_MspInit+0x54>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	f06f 0001 	mvn.w	r0, #1
 80007b6:	f000 fa1d 	bl	8000bf4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a19      	ldr	r2, [pc, #100]	@ (800084c <HAL_UART_MspInit+0x84>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d12b      	bne.n	8000842 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <HAL_UART_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <HAL_UART_MspInit+0x88>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HAL_UART_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <HAL_UART_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <HAL_UART_MspInit+0x88>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_UART_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000822:	230c      	movs	r3, #12
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000832:	2307      	movs	r3, #7
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <HAL_UART_MspInit+0x8c>)
 800083e:	f000 fa03 	bl	8000c48 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	@ 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40004400 	.word	0x40004400
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000

08000858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <HAL_InitTick+0xd0>)
 800086e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000870:	4a2d      	ldr	r2, [pc, #180]	@ (8000928 <HAL_InitTick+0xd0>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6453      	str	r3, [r2, #68]	@ 0x44
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <HAL_InitTick+0xd0>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000884:	f107 020c 	add.w	r2, r7, #12
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fc88 	bl	80011a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000894:	f000 fc72 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8000898:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089c:	4a23      	ldr	r2, [pc, #140]	@ (800092c <HAL_InitTick+0xd4>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	0c9b      	lsrs	r3, r3, #18
 80008a4:	3b01      	subs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <HAL_InitTick+0xd8>)
 80008aa:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <HAL_InitTick+0xdc>)
 80008ac:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <HAL_InitTick+0xd8>)
 80008b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <HAL_InitTick+0xd8>)
 80008b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <HAL_InitTick+0xd8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <HAL_InitTick+0xd8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_InitTick+0xd8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008ce:	4818      	ldr	r0, [pc, #96]	@ (8000930 <HAL_InitTick+0xd8>)
 80008d0:	f001 f8e2 	bl	8001a98 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d11b      	bne.n	800091a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008e2:	4813      	ldr	r0, [pc, #76]	@ (8000930 <HAL_InitTick+0xd8>)
 80008e4:	f001 f932 	bl	8001b4c <HAL_TIM_Base_Start_IT>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d111      	bne.n	800091a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008f6:	2019      	movs	r0, #25
 80008f8:	f000 f998 	bl	8000c2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d808      	bhi.n	8000914 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000902:	2200      	movs	r2, #0
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	2019      	movs	r0, #25
 8000908:	f000 f974 	bl	8000bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_InitTick+0xe0>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e002      	b.n	800091a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800091e:	4618      	mov	r0, r3
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	431bde83 	.word	0x431bde83
 8000930:	20000080 	.word	0x20000080
 8000934:	40010000 	.word	0x40010000
 8000938:	20000004 	.word	0x20000004

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800097a:	f001 f957 	bl	8001c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000080 	.word	0x20000080

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009da:	f004 fa25 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fdad 	bl	800053c <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f0:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 80009f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f8:	20004a18 	.word	0x20004a18

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f8d8 	bl	8000bde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f7ff ff12 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fe9c 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000c8 	.word	0x200000c8

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000c8 	.word	0x200000c8

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	@ (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	@ 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff4c 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c06:	f7ff ff61 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f7ff ffb1 	bl	8000b78 <NVIC_EncodePriority>
 8000c16:	4602      	mov	r2, r0
 8000c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff80 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff54 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e165      	b.n	8000f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8154 	bne.w	8000f2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d005      	beq.n	8000c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d130      	bne.n	8000cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 0201 	and.w	r2, r3, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d017      	beq.n	8000d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d123      	bne.n	8000d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0203 	and.w	r2, r3, #3
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80ae 	beq.w	8000f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f48 <HAL_GPIO_Init+0x300>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f48 <HAL_GPIO_Init+0x300>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dde:	4b5a      	ldr	r3, [pc, #360]	@ (8000f48 <HAL_GPIO_Init+0x300>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a58      	ldr	r2, [pc, #352]	@ (8000f4c <HAL_GPIO_Init+0x304>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4f      	ldr	r2, [pc, #316]	@ (8000f50 <HAL_GPIO_Init+0x308>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d025      	beq.n	8000e62 <HAL_GPIO_Init+0x21a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4e      	ldr	r2, [pc, #312]	@ (8000f54 <HAL_GPIO_Init+0x30c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01f      	beq.n	8000e5e <HAL_GPIO_Init+0x216>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <HAL_GPIO_Init+0x310>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4c      	ldr	r2, [pc, #304]	@ (8000f5c <HAL_GPIO_Init+0x314>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x20e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4b      	ldr	r2, [pc, #300]	@ (8000f60 <HAL_GPIO_Init+0x318>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x20a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4a      	ldr	r2, [pc, #296]	@ (8000f64 <HAL_GPIO_Init+0x31c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a49      	ldr	r2, [pc, #292]	@ (8000f68 <HAL_GPIO_Init+0x320>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x202>
 8000e46:	2306      	movs	r3, #6
 8000e48:	e00c      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e00a      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x21c>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	@ (8000f4c <HAL_GPIO_Init+0x304>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b3a      	ldr	r3, [pc, #232]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a31      	ldr	r2, [pc, #196]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f24:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <HAL_GPIO_Init+0x324>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f ae96 	bls.w	8000c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40021800 	.word	0x40021800
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0cc      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f84:	4b68      	ldr	r3, [pc, #416]	@ (8001128 <HAL_RCC_ClockConfig+0x1b8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d90c      	bls.n	8000fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f92:	4b65      	ldr	r3, [pc, #404]	@ (8001128 <HAL_RCC_ClockConfig+0x1b8>)
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9a:	4b63      	ldr	r3, [pc, #396]	@ (8001128 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d001      	beq.n	8000fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0b8      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d020      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a58      	ldr	r2, [pc, #352]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fdc:	4b53      	ldr	r3, [pc, #332]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8000fe2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe8:	4b50      	ldr	r3, [pc, #320]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	494d      	ldr	r1, [pc, #308]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d044      	beq.n	8001090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d107      	bne.n	800101e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b47      	ldr	r3, [pc, #284]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d119      	bne.n	800104e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e07f      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d003      	beq.n	800102e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102a:	2b03      	cmp	r3, #3
 800102c:	d107      	bne.n	800103e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102e:	4b3f      	ldr	r3, [pc, #252]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d109      	bne.n	800104e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e06f      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e067      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800104e:	4b37      	ldr	r3, [pc, #220]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f023 0203 	bic.w	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4934      	ldr	r1, [pc, #208]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 800105c:	4313      	orrs	r3, r2
 800105e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001060:	f7ff fd04 	bl	8000a6c <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001066:	e00a      	b.n	800107e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001068:	f7ff fd00 	bl	8000a6c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001076:	4293      	cmp	r3, r2
 8001078:	d901      	bls.n	800107e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e04f      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107e:	4b2b      	ldr	r3, [pc, #172]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 020c 	and.w	r2, r3, #12
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	429a      	cmp	r2, r3
 800108e:	d1eb      	bne.n	8001068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d20c      	bcs.n	80010b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <HAL_RCC_ClockConfig+0x1b8>)
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <HAL_RCC_ClockConfig+0x1b8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e032      	b.n	800111e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4916      	ldr	r1, [pc, #88]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d009      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	490e      	ldr	r1, [pc, #56]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010f6:	f000 f887 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80010fa:	4602      	mov	r2, r0
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	490a      	ldr	r1, [pc, #40]	@ (8001130 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	5ccb      	ldrb	r3, [r1, r3]
 800110a:	fa22 f303 	lsr.w	r3, r2, r3
 800110e:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <HAL_RCC_ClockConfig+0x1c8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fb9e 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00
 800112c:	40023800 	.word	0x40023800
 8001130:	08004efc 	.word	0x08004efc
 8001134:	20000000 	.word	0x20000000
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_RCC_GetHCLKFreq+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001158:	f7ff fff0 	bl	800113c <HAL_RCC_GetHCLKFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	0a9b      	lsrs	r3, r3, #10
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	4903      	ldr	r1, [pc, #12]	@ (8001178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001170:	4618      	mov	r0, r3
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	08004f0c 	.word	0x08004f0c

0800117c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001180:	f7ff ffdc 	bl	800113c <HAL_RCC_GetHCLKFreq>
 8001184:	4602      	mov	r2, r0
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	0b5b      	lsrs	r3, r3, #13
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	4903      	ldr	r1, [pc, #12]	@ (80011a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001198:	4618      	mov	r0, r3
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	08004f0c 	.word	0x08004f0c

080011a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	220f      	movs	r2, #15
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_RCC_GetClockConfig+0x5c>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_RCC_GetClockConfig+0x5c>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <HAL_RCC_GetClockConfig+0x5c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <HAL_RCC_GetClockConfig+0x5c>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <HAL_RCC_GetClockConfig+0x60>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 020f 	and.w	r2, r3, #15
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800120c:	b0a6      	sub	sp, #152	@ 0x98
 800120e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122e:	4bc8      	ldr	r3, [pc, #800]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b0c      	cmp	r3, #12
 8001238:	f200 817e 	bhi.w	8001538 <HAL_RCC_GetSysClockFreq+0x330>
 800123c:	a201      	add	r2, pc, #4	@ (adr r2, 8001244 <HAL_RCC_GetSysClockFreq+0x3c>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001279 	.word	0x08001279
 8001248:	08001539 	.word	0x08001539
 800124c:	08001539 	.word	0x08001539
 8001250:	08001539 	.word	0x08001539
 8001254:	08001281 	.word	0x08001281
 8001258:	08001539 	.word	0x08001539
 800125c:	08001539 	.word	0x08001539
 8001260:	08001539 	.word	0x08001539
 8001264:	08001289 	.word	0x08001289
 8001268:	08001539 	.word	0x08001539
 800126c:	08001539 	.word	0x08001539
 8001270:	08001539 	.word	0x08001539
 8001274:	080013f3 	.word	0x080013f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001278:	4bb6      	ldr	r3, [pc, #728]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x34c>)
 800127a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800127e:	e15f      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001280:	4bb5      	ldr	r3, [pc, #724]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x350>)
 8001282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001286:	e15b      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001288:	4bb1      	ldr	r3, [pc, #708]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001294:	4bae      	ldr	r3, [pc, #696]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d031      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a0:	4bab      	ldr	r3, [pc, #684]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	2200      	movs	r2, #0
 80012a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80012ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80012b4:	2300      	movs	r3, #0
 80012b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80012b8:	4ba7      	ldr	r3, [pc, #668]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x350>)
 80012ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80012be:	462a      	mov	r2, r5
 80012c0:	fb03 f202 	mul.w	r2, r3, r2
 80012c4:	2300      	movs	r3, #0
 80012c6:	4621      	mov	r1, r4
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	4aa2      	ldr	r2, [pc, #648]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x350>)
 80012d0:	4621      	mov	r1, r4
 80012d2:	fba1 1202 	umull	r1, r2, r1, r2
 80012d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80012d8:	460a      	mov	r2, r1
 80012da:	67ba      	str	r2, [r7, #120]	@ 0x78
 80012dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80012de:	4413      	add	r3, r2
 80012e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80012e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012e6:	2200      	movs	r2, #0
 80012e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80012ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80012ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80012f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80012f4:	f7fe ff8c 	bl	8000210 <__aeabi_uldivmod>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4613      	mov	r3, r2
 80012fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001302:	e064      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001304:	4b92      	ldr	r3, [pc, #584]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	2200      	movs	r2, #0
 800130c:	653b      	str	r3, [r7, #80]	@ 0x50
 800130e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001318:	2300      	movs	r3, #0
 800131a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800131c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001320:	4622      	mov	r2, r4
 8001322:	462b      	mov	r3, r5
 8001324:	f04f 0000 	mov.w	r0, #0
 8001328:	f04f 0100 	mov.w	r1, #0
 800132c:	0159      	lsls	r1, r3, #5
 800132e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001332:	0150      	lsls	r0, r2, #5
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4621      	mov	r1, r4
 800133a:	1a51      	subs	r1, r2, r1
 800133c:	6139      	str	r1, [r7, #16]
 800133e:	4629      	mov	r1, r5
 8001340:	eb63 0301 	sbc.w	r3, r3, r1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001352:	4659      	mov	r1, fp
 8001354:	018b      	lsls	r3, r1, #6
 8001356:	4651      	mov	r1, sl
 8001358:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800135c:	4651      	mov	r1, sl
 800135e:	018a      	lsls	r2, r1, #6
 8001360:	4651      	mov	r1, sl
 8001362:	ebb2 0801 	subs.w	r8, r2, r1
 8001366:	4659      	mov	r1, fp
 8001368:	eb63 0901 	sbc.w	r9, r3, r1
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800137c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001380:	4690      	mov	r8, r2
 8001382:	4699      	mov	r9, r3
 8001384:	4623      	mov	r3, r4
 8001386:	eb18 0303 	adds.w	r3, r8, r3
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	462b      	mov	r3, r5
 800138e:	eb49 0303 	adc.w	r3, r9, r3
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013a0:	4629      	mov	r1, r5
 80013a2:	028b      	lsls	r3, r1, #10
 80013a4:	4621      	mov	r1, r4
 80013a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013aa:	4621      	mov	r1, r4
 80013ac:	028a      	lsls	r2, r1, #10
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013b6:	2200      	movs	r2, #0
 80013b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80013ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80013bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80013c0:	f7fe ff26 	bl	8000210 <__aeabi_uldivmod>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4613      	mov	r3, r2
 80013ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013ce:	4b60      	ldr	r3, [pc, #384]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	0c1b      	lsrs	r3, r3, #16
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	3301      	adds	r3, #1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80013e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80013e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80013f0:	e0a6      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f2:	4b57      	ldr	r3, [pc, #348]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013fe:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d02a      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140a:	4b51      	ldr	r3, [pc, #324]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	099b      	lsrs	r3, r3, #6
 8001410:	2200      	movs	r2, #0
 8001412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001414:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001418:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800141c:	2100      	movs	r1, #0
 800141e:	4b4e      	ldr	r3, [pc, #312]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x350>)
 8001420:	fb03 f201 	mul.w	r2, r3, r1
 8001424:	2300      	movs	r3, #0
 8001426:	fb00 f303 	mul.w	r3, r0, r3
 800142a:	4413      	add	r3, r2
 800142c:	4a4a      	ldr	r2, [pc, #296]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x350>)
 800142e:	fba0 1202 	umull	r1, r2, r0, r2
 8001432:	677a      	str	r2, [r7, #116]	@ 0x74
 8001434:	460a      	mov	r2, r1
 8001436:	673a      	str	r2, [r7, #112]	@ 0x70
 8001438:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800143a:	4413      	add	r3, r2
 800143c:	677b      	str	r3, [r7, #116]	@ 0x74
 800143e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001442:	2200      	movs	r2, #0
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
 8001446:	637a      	str	r2, [r7, #52]	@ 0x34
 8001448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800144c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001450:	f7fe fede 	bl	8000210 <__aeabi_uldivmod>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4613      	mov	r3, r2
 800145a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800145e:	e05b      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001460:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	2200      	movs	r2, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800146a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800146c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
 8001478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800147c:	4642      	mov	r2, r8
 800147e:	464b      	mov	r3, r9
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	0159      	lsls	r1, r3, #5
 800148a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800148e:	0150      	lsls	r0, r2, #5
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4641      	mov	r1, r8
 8001496:	ebb2 0a01 	subs.w	sl, r2, r1
 800149a:	4649      	mov	r1, r9
 800149c:	eb63 0b01 	sbc.w	fp, r3, r1
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014b4:	ebb2 040a 	subs.w	r4, r2, sl
 80014b8:	eb63 050b 	sbc.w	r5, r3, fp
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	00eb      	lsls	r3, r5, #3
 80014c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014ca:	00e2      	lsls	r2, r4, #3
 80014cc:	4614      	mov	r4, r2
 80014ce:	461d      	mov	r5, r3
 80014d0:	4643      	mov	r3, r8
 80014d2:	18e3      	adds	r3, r4, r3
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	464b      	mov	r3, r9
 80014d8:	eb45 0303 	adc.w	r3, r5, r3
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014ea:	4629      	mov	r1, r5
 80014ec:	028b      	lsls	r3, r1, #10
 80014ee:	4621      	mov	r1, r4
 80014f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014f4:	4621      	mov	r1, r4
 80014f6:	028a      	lsls	r2, r1, #10
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001500:	2200      	movs	r2, #0
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	61fa      	str	r2, [r7, #28]
 8001506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800150a:	f7fe fe81 	bl	8000210 <__aeabi_uldivmod>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4613      	mov	r3, r2
 8001514:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x348>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	0f1b      	lsrs	r3, r3, #28
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800152a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001536:	e003      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x34c>)
 800153a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800153e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001540:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001544:	4618      	mov	r0, r3
 8001546:	3798      	adds	r7, #152	@ 0x98
 8001548:	46bd      	mov	sp, r7
 800154a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	00f42400 	.word	0x00f42400
 8001558:	017d7840 	.word	0x017d7840

0800155c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e28d      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8083 	beq.w	8001682 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800157c:	4b94      	ldr	r3, [pc, #592]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b04      	cmp	r3, #4
 8001586:	d019      	beq.n	80015bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001588:	4b91      	ldr	r3, [pc, #580]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001590:	2b08      	cmp	r3, #8
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001594:	4b8e      	ldr	r3, [pc, #568]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015a0:	d00c      	beq.n	80015bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a2:	4b8b      	ldr	r3, [pc, #556]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4b84      	ldr	r3, [pc, #528]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d05b      	beq.n	8001680 <HAL_RCC_OscConfig+0x124>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d157      	bne.n	8001680 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e25a      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x90>
 80015de:	4b7c      	ldr	r3, [pc, #496]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7b      	ldr	r2, [pc, #492]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xcc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0xb4>
 80015f6:	4b76      	ldr	r3, [pc, #472]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a75      	ldr	r2, [pc, #468]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b73      	ldr	r3, [pc, #460]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a72      	ldr	r2, [pc, #456]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xcc>
 8001610:	4b6f      	ldr	r3, [pc, #444]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6e      	ldr	r2, [pc, #440]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b6c      	ldr	r3, [pc, #432]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6b      	ldr	r2, [pc, #428]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fa1c 	bl	8000a6c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fa18 	bl	8000a6c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	@ 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e21f      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b61      	ldr	r3, [pc, #388]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xdc>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fa08 	bl	8000a6c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fa04 	bl	8000a6c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e20b      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b57      	ldr	r3, [pc, #348]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x104>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d06f      	beq.n	800176e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800168e:	4b50      	ldr	r3, [pc, #320]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d017      	beq.n	80016ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800169a:	4b4d      	ldr	r3, [pc, #308]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
        || \
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d105      	bne.n	80016b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80016a6:	4b4a      	ldr	r3, [pc, #296]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d11c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b44      	ldr	r3, [pc, #272]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x186>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e1d3      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4937      	ldr	r1, [pc, #220]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	e03a      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <HAL_RCC_OscConfig+0x278>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff f9b1 	bl	8000a6c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff f9ad 	bl	8000a6c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1b4      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4925      	ldr	r1, [pc, #148]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <HAL_RCC_OscConfig+0x278>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff f990 	bl	8000a6c <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff f98c 	bl	8000a6c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e193      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d036      	beq.n	80017e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d016      	beq.n	80017b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff f970 	bl	8000a6c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff f96c 	bl	8000a6c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e173      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x234>
 80017ae:	e01b      	b.n	80017e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff f959 	bl	8000a6c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	e00e      	b.n	80017dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff f955 	bl	8000a6c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d907      	bls.n	80017dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e15c      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	42470000 	.word	0x42470000
 80017d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	4b8a      	ldr	r3, [pc, #552]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80017de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ea      	bne.n	80017be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8097 	beq.w	8001924 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4b83      	ldr	r3, [pc, #524]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	@ 0x40
 8001816:	4b7c      	ldr	r3, [pc, #496]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b79      	ldr	r3, [pc, #484]	@ (8001a0c <HAL_RCC_OscConfig+0x4b0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d118      	bne.n	8001864 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001832:	4b76      	ldr	r3, [pc, #472]	@ (8001a0c <HAL_RCC_OscConfig+0x4b0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a75      	ldr	r2, [pc, #468]	@ (8001a0c <HAL_RCC_OscConfig+0x4b0>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff f915 	bl	8000a6c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff f911 	bl	8000a6c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e118      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b6c      	ldr	r3, [pc, #432]	@ (8001a0c <HAL_RCC_OscConfig+0x4b0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x31e>
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001870:	4a65      	ldr	r2, [pc, #404]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	@ 0x70
 8001878:	e01c      	b.n	80018b4 <HAL_RCC_OscConfig+0x358>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x340>
 8001882:	4b61      	ldr	r3, [pc, #388]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001886:	4a60      	ldr	r2, [pc, #384]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	@ 0x70
 800188e:	4b5e      	ldr	r3, [pc, #376]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001892:	4a5d      	ldr	r2, [pc, #372]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6713      	str	r3, [r2, #112]	@ 0x70
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x358>
 800189c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a0:	4a59      	ldr	r2, [pc, #356]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a8:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ac:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d015      	beq.n	80018e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f8d6 	bl	8000a6c <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff f8d2 	bl	8000a6c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0d7      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ee      	beq.n	80018c4 <HAL_RCC_OscConfig+0x368>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff f8c0 	bl	8000a6c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff f8bc 	bl	8000a6c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0c1      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001906:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80ad 	beq.w	8001a88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	d060      	beq.n	80019fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d145      	bne.n	80019ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b33      	ldr	r3, [pc, #204]	@ (8001a10 <HAL_RCC_OscConfig+0x4b4>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff f890 	bl	8000a6c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff f88c 	bl	8000a6c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e093      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	3b01      	subs	r3, #1
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	071b      	lsls	r3, r3, #28
 800199a:	491b      	ldr	r1, [pc, #108]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_RCC_OscConfig+0x4b4>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff f861 	bl	8000a6c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff f85d 	bl	8000a6c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e064      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x452>
 80019cc:	e05c      	b.n	8001a88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <HAL_RCC_OscConfig+0x4b4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f84a 	bl	8000a6c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f846 	bl	8000a6c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e04d      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x4ac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x480>
 80019fa:	e045      	b.n	8001a88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e040      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <HAL_RCC_OscConfig+0x538>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d030      	beq.n	8001a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d129      	bne.n	8001a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d122      	bne.n	8001a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d119      	bne.n	8001a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d10f      	bne.n	8001a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e041      	b.n	8001b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f839 	bl	8001b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f000 f9c0 	bl	8001e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d001      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e04e      	b.n	8001c02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d022      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b8e:	d01d      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	@ (8001c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d018      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00e      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x80>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d111      	bne.n	8001bf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d010      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	e007      	b.n	8001c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	40010400 	.word	0x40010400
 8001c24:	40014000 	.word	0x40014000
 8001c28:	40001800 	.word	0x40001800

08001c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d020      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01b      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0202 	mvn.w	r2, #2
 8001c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8d2 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8c4 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8d5 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d020      	beq.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0204 	mvn.w	r2, #4
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8ac 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f89e 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8af 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d020      	beq.n	8001d28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01b      	beq.n	8001d28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0208 	mvn.w	r2, #8
 8001cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f886 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f878 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f889 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d020      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0210 	mvn.w	r2, #16
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f860 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f852 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f863 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0201 	mvn.w	r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fcd4 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f900 	bl	8001fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f834 	bl	8001e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0220 	mvn.w	r2, #32
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8d2 	bl	8001fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a43      	ldr	r2, [pc, #268]	@ (8001f7c <TIM_Base_SetConfig+0x120>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <TIM_Base_SetConfig+0x40>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7a:	d00f      	beq.n	8001e9c <TIM_Base_SetConfig+0x40>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <TIM_Base_SetConfig+0x124>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00b      	beq.n	8001e9c <TIM_Base_SetConfig+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <TIM_Base_SetConfig+0x128>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f88 <TIM_Base_SetConfig+0x12c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	@ (8001f8c <TIM_Base_SetConfig+0x130>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a32      	ldr	r2, [pc, #200]	@ (8001f7c <TIM_Base_SetConfig+0x120>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebc:	d027      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <TIM_Base_SetConfig+0x124>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d023      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8001f84 <TIM_Base_SetConfig+0x128>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f88 <TIM_Base_SetConfig+0x12c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01b      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <TIM_Base_SetConfig+0x130>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d017      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f90 <TIM_Base_SetConfig+0x134>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f94 <TIM_Base_SetConfig+0x138>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00f      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <TIM_Base_SetConfig+0x13c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a28      	ldr	r2, [pc, #160]	@ (8001f9c <TIM_Base_SetConfig+0x140>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a27      	ldr	r2, [pc, #156]	@ (8001fa0 <TIM_Base_SetConfig+0x144>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d003      	beq.n	8001f0e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <TIM_Base_SetConfig+0x148>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d108      	bne.n	8001f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <TIM_Base_SetConfig+0x120>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0xf2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <TIM_Base_SetConfig+0x130>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d103      	bne.n	8001f56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f043 0204 	orr.w	r2, r3, #4
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	601a      	str	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	40001800 	.word	0x40001800
 8001fa0:	40001c00 	.word	0x40001c00
 8001fa4:	40002000 	.word	0x40002000

08001fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e042      	b.n	8002068 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fbe6 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	@ 0x24
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f82b 	bl	8002070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b0c0      	sub	sp, #256	@ 0x100
 8002076:	af00      	add	r7, sp, #0
 8002078:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	ea40 0301 	orr.w	r3, r0, r1
 8002098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80020c8:	f021 010c 	bic.w	r1, r1, #12
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80020d6:	430b      	orrs	r3, r1
 80020d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80020e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ea:	6999      	ldr	r1, [r3, #24]
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	ea40 0301 	orr.w	r3, r0, r1
 80020f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <UART_SetConfig+0x2cc>)
 8002100:	429a      	cmp	r2, r3
 8002102:	d005      	beq.n	8002110 <UART_SetConfig+0xa0>
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b8d      	ldr	r3, [pc, #564]	@ (8002340 <UART_SetConfig+0x2d0>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d104      	bne.n	800211a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002110:	f7ff f834 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8002114:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002118:	e003      	b.n	8002122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800211a:	f7ff f81b 	bl	8001154 <HAL_RCC_GetPCLK1Freq>
 800211e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800212c:	f040 810c 	bne.w	8002348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002134:	2200      	movs	r2, #0
 8002136:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800213a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800213e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002142:	4622      	mov	r2, r4
 8002144:	462b      	mov	r3, r5
 8002146:	1891      	adds	r1, r2, r2
 8002148:	65b9      	str	r1, [r7, #88]	@ 0x58
 800214a:	415b      	adcs	r3, r3
 800214c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800214e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002152:	4621      	mov	r1, r4
 8002154:	eb12 0801 	adds.w	r8, r2, r1
 8002158:	4629      	mov	r1, r5
 800215a:	eb43 0901 	adc.w	r9, r3, r1
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800216a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800216e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002172:	4690      	mov	r8, r2
 8002174:	4699      	mov	r9, r3
 8002176:	4623      	mov	r3, r4
 8002178:	eb18 0303 	adds.w	r3, r8, r3
 800217c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002180:	462b      	mov	r3, r5
 8002182:	eb49 0303 	adc.w	r3, r9, r3
 8002186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002196:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800219a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800219e:	460b      	mov	r3, r1
 80021a0:	18db      	adds	r3, r3, r3
 80021a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80021a4:	4613      	mov	r3, r2
 80021a6:	eb42 0303 	adc.w	r3, r2, r3
 80021aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80021ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021b4:	f7fe f82c 	bl	8000210 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <UART_SetConfig+0x2d4>)
 80021be:	fba3 2302 	umull	r2, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	011c      	lsls	r4, r3, #4
 80021c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80021d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80021d8:	4642      	mov	r2, r8
 80021da:	464b      	mov	r3, r9
 80021dc:	1891      	adds	r1, r2, r2
 80021de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80021e0:	415b      	adcs	r3, r3
 80021e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021e8:	4641      	mov	r1, r8
 80021ea:	eb12 0a01 	adds.w	sl, r2, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	eb43 0b01 	adc.w	fp, r3, r1
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002208:	4692      	mov	sl, r2
 800220a:	469b      	mov	fp, r3
 800220c:	4643      	mov	r3, r8
 800220e:	eb1a 0303 	adds.w	r3, sl, r3
 8002212:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002216:	464b      	mov	r3, r9
 8002218:	eb4b 0303 	adc.w	r3, fp, r3
 800221c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800222c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002234:	460b      	mov	r3, r1
 8002236:	18db      	adds	r3, r3, r3
 8002238:	643b      	str	r3, [r7, #64]	@ 0x40
 800223a:	4613      	mov	r3, r2
 800223c:	eb42 0303 	adc.w	r3, r2, r3
 8002240:	647b      	str	r3, [r7, #68]	@ 0x44
 8002242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800224a:	f7fd ffe1 	bl	8000210 <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4611      	mov	r1, r2
 8002254:	4b3b      	ldr	r3, [pc, #236]	@ (8002344 <UART_SetConfig+0x2d4>)
 8002256:	fba3 2301 	umull	r2, r3, r3, r1
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2264      	movs	r2, #100	@ 0x64
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	1acb      	subs	r3, r1, r3
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800226a:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <UART_SetConfig+0x2d4>)
 800226c:	fba3 2302 	umull	r2, r3, r3, r2
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002278:	441c      	add	r4, r3
 800227a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002284:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	1891      	adds	r1, r2, r2
 8002292:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002294:	415b      	adcs	r3, r3
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800229c:	4641      	mov	r1, r8
 800229e:	1851      	adds	r1, r2, r1
 80022a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80022a2:	4649      	mov	r1, r9
 80022a4:	414b      	adcs	r3, r1
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022b4:	4659      	mov	r1, fp
 80022b6:	00cb      	lsls	r3, r1, #3
 80022b8:	4651      	mov	r1, sl
 80022ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022be:	4651      	mov	r1, sl
 80022c0:	00ca      	lsls	r2, r1, #3
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	4642      	mov	r2, r8
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022d0:	464b      	mov	r3, r9
 80022d2:	460a      	mov	r2, r1
 80022d4:	eb42 0303 	adc.w	r3, r2, r3
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80022e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80022ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80022f0:	460b      	mov	r3, r1
 80022f2:	18db      	adds	r3, r3, r3
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f6:	4613      	mov	r3, r2
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002306:	f7fd ff83 	bl	8000210 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <UART_SetConfig+0x2d4>)
 8002310:	fba3 1302 	umull	r1, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2164      	movs	r1, #100	@ 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	3332      	adds	r3, #50	@ 0x32
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <UART_SetConfig+0x2d4>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 0207 	and.w	r2, r3, #7
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4422      	add	r2, r4
 8002336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002338:	e106      	b.n	8002548 <UART_SetConfig+0x4d8>
 800233a:	bf00      	nop
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800234c:	2200      	movs	r2, #0
 800234e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002352:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800235a:	4642      	mov	r2, r8
 800235c:	464b      	mov	r3, r9
 800235e:	1891      	adds	r1, r2, r2
 8002360:	6239      	str	r1, [r7, #32]
 8002362:	415b      	adcs	r3, r3
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
 8002366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800236a:	4641      	mov	r1, r8
 800236c:	1854      	adds	r4, r2, r1
 800236e:	4649      	mov	r1, r9
 8002370:	eb43 0501 	adc.w	r5, r3, r1
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	00eb      	lsls	r3, r5, #3
 800237e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002382:	00e2      	lsls	r2, r4, #3
 8002384:	4614      	mov	r4, r2
 8002386:	461d      	mov	r5, r3
 8002388:	4643      	mov	r3, r8
 800238a:	18e3      	adds	r3, r4, r3
 800238c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002390:	464b      	mov	r3, r9
 8002392:	eb45 0303 	adc.w	r3, r5, r3
 8002396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800239a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023b6:	4629      	mov	r1, r5
 80023b8:	008b      	lsls	r3, r1, #2
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023c0:	4621      	mov	r1, r4
 80023c2:	008a      	lsls	r2, r1, #2
 80023c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80023c8:	f7fd ff22 	bl	8000210 <__aeabi_uldivmod>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4b60      	ldr	r3, [pc, #384]	@ (8002554 <UART_SetConfig+0x4e4>)
 80023d2:	fba3 2302 	umull	r2, r3, r3, r2
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	011c      	lsls	r4, r3, #4
 80023da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80023ec:	4642      	mov	r2, r8
 80023ee:	464b      	mov	r3, r9
 80023f0:	1891      	adds	r1, r2, r2
 80023f2:	61b9      	str	r1, [r7, #24]
 80023f4:	415b      	adcs	r3, r3
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fc:	4641      	mov	r1, r8
 80023fe:	1851      	adds	r1, r2, r1
 8002400:	6139      	str	r1, [r7, #16]
 8002402:	4649      	mov	r1, r9
 8002404:	414b      	adcs	r3, r1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002414:	4659      	mov	r1, fp
 8002416:	00cb      	lsls	r3, r1, #3
 8002418:	4651      	mov	r1, sl
 800241a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241e:	4651      	mov	r1, sl
 8002420:	00ca      	lsls	r2, r1, #3
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	4603      	mov	r3, r0
 8002428:	4642      	mov	r2, r8
 800242a:	189b      	adds	r3, r3, r2
 800242c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002430:	464b      	mov	r3, r9
 8002432:	460a      	mov	r2, r1
 8002434:	eb42 0303 	adc.w	r3, r2, r3
 8002438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002446:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002454:	4649      	mov	r1, r9
 8002456:	008b      	lsls	r3, r1, #2
 8002458:	4641      	mov	r1, r8
 800245a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800245e:	4641      	mov	r1, r8
 8002460:	008a      	lsls	r2, r1, #2
 8002462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002466:	f7fd fed3 	bl	8000210 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4611      	mov	r1, r2
 8002470:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <UART_SetConfig+0x4e4>)
 8002472:	fba3 2301 	umull	r2, r3, r3, r1
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2264      	movs	r2, #100	@ 0x64
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	1acb      	subs	r3, r1, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	3332      	adds	r3, #50	@ 0x32
 8002484:	4a33      	ldr	r2, [pc, #204]	@ (8002554 <UART_SetConfig+0x4e4>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002490:	441c      	add	r4, r3
 8002492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002496:	2200      	movs	r2, #0
 8002498:	673b      	str	r3, [r7, #112]	@ 0x70
 800249a:	677a      	str	r2, [r7, #116]	@ 0x74
 800249c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80024a0:	4642      	mov	r2, r8
 80024a2:	464b      	mov	r3, r9
 80024a4:	1891      	adds	r1, r2, r2
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	415b      	adcs	r3, r3
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b0:	4641      	mov	r1, r8
 80024b2:	1851      	adds	r1, r2, r1
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	4649      	mov	r1, r9
 80024b8:	414b      	adcs	r3, r1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024c8:	4659      	mov	r1, fp
 80024ca:	00cb      	lsls	r3, r1, #3
 80024cc:	4651      	mov	r1, sl
 80024ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d2:	4651      	mov	r1, sl
 80024d4:	00ca      	lsls	r2, r1, #3
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	4642      	mov	r2, r8
 80024de:	189b      	adds	r3, r3, r2
 80024e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024e2:	464b      	mov	r3, r9
 80024e4:	460a      	mov	r2, r1
 80024e6:	eb42 0303 	adc.w	r3, r2, r3
 80024ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80024f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002504:	4649      	mov	r1, r9
 8002506:	008b      	lsls	r3, r1, #2
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800250e:	4641      	mov	r1, r8
 8002510:	008a      	lsls	r2, r1, #2
 8002512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002516:	f7fd fe7b 	bl	8000210 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <UART_SetConfig+0x4e4>)
 8002520:	fba3 1302 	umull	r1, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2164      	movs	r1, #100	@ 0x64
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	3332      	adds	r3, #50	@ 0x32
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <UART_SetConfig+0x4e4>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4422      	add	r2, r4
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800254e:	46bd      	mov	sp, r7
 8002550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002554:	51eb851f 	.word	0x51eb851f

08002558 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <SysTick_Handler+0x1c>)
 800255e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002560:	f001 fbe0 	bl	8003d24 <xTaskGetSchedulerState>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800256a:	f002 f9d5 	bl	8004918 <xPortSysTickHandler>
  }
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000e010 	.word	0xe000e010

08002578 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a06      	ldr	r2, [pc, #24]	@ (80025a8 <vApplicationGetIdleTaskMemory+0x30>)
 800258e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	@ 0x80
 8002594:	601a      	str	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	200000cc 	.word	0x200000cc
 80025a8:	20000128 	.word	0x20000128

080025ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80025bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4a06      	ldr	r2, [pc, #24]	@ (80025dc <vApplicationGetTimerTaskMemory+0x30>)
 80025c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ca:	601a      	str	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20000328 	.word	0x20000328
 80025dc:	20000384 	.word	0x20000384

080025e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f103 0208 	add.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f103 0208 	add.w	r2, r3, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f103 0208 	add.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d103      	bne.n	80026a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e00c      	b.n	80026bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3308      	adds	r3, #8
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e002      	b.n	80026b0 <vListInsert+0x2e>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d2f6      	bcs.n	80026aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	601a      	str	r2, [r3, #0]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6852      	ldr	r2, [r2, #4]
 8002714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	d103      	bne.n	8002728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002774:	f002 f840 	bl	80047f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	68f9      	ldr	r1, [r7, #12]
 8002782:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	441a      	add	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	3b01      	subs	r3, #1
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	441a      	add	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	22ff      	movs	r2, #255	@ 0xff
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	22ff      	movs	r2, #255	@ 0xff
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d114      	bne.n	80027f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01a      	beq.n	8002808 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3310      	adds	r3, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 f8e4 	bl	80039a4 <xTaskRemoveFromEventList>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <xQueueGenericReset+0xd0>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	e009      	b.n	8002808 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3310      	adds	r3, #16
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fef1 	bl	80025e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3324      	adds	r3, #36	@ 0x24
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff feec 	bl	80025e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002808:	f002 f828 	bl	800485c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000ed04 	.word	0xe000ed04

0800281c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08e      	sub	sp, #56	@ 0x38
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10b      	bne.n	8002866 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	e7fd      	b.n	8002862 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <xQueueGenericCreateStatic+0x56>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <xQueueGenericCreateStatic+0x5a>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueGenericCreateStatic+0x5c>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	623b      	str	r3, [r7, #32]
}
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <xQueueGenericCreateStatic+0x84>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <xQueueGenericCreateStatic+0x88>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <xQueueGenericCreateStatic+0x8a>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	61fb      	str	r3, [r7, #28]
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028c2:	2350      	movs	r3, #80	@ 0x50
 80028c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b50      	cmp	r3, #80	@ 0x50
 80028ca:	d00b      	beq.n	80028e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	61bb      	str	r3, [r7, #24]
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f805 	bl	8002916 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800290e:	4618      	mov	r0, r3
 8002910:	3730      	adds	r7, #48	@ 0x30
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e002      	b.n	8002938 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002944:	2101      	movs	r1, #1
 8002946:	69b8      	ldr	r0, [r7, #24]
 8002948:	f7ff fefe 	bl	8002748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	@ 0x38
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <xQueueGenericSend+0x34>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <xQueueGenericSend+0x42>
 8002996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <xQueueGenericSend+0x46>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <xQueueGenericSend+0x48>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <xQueueGenericSend+0x64>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d103      	bne.n	80029ce <xQueueGenericSend+0x72>
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <xQueueGenericSend+0x76>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <xQueueGenericSend+0x78>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <xQueueGenericSend+0x94>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	623b      	str	r3, [r7, #32]
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029f0:	f001 f998 	bl	8003d24 <xTaskGetSchedulerState>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <xQueueGenericSend+0xa4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <xQueueGenericSend+0xa8>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <xQueueGenericSend+0xaa>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <xQueueGenericSend+0xc6>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	61fb      	str	r3, [r7, #28]
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a22:	f001 fee9 	bl	80047f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <xQueueGenericSend+0xdc>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d129      	bne.n	8002a8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a3e:	f000 fa0f 	bl	8002e60 <prvCopyDataToQueue>
 8002a42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	3324      	adds	r3, #36	@ 0x24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 ffa7 	bl	80039a4 <xTaskRemoveFromEventList>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <xQueueGenericSend+0x200>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	e00a      	b.n	8002a84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <xQueueGenericSend+0x200>)
 8002a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a84:	f001 feea 	bl	800485c <vPortExitCritical>
				return pdPASS;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e063      	b.n	8002b54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a92:	f001 fee3 	bl	800485c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e05c      	b.n	8002b54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ffe1 	bl	8003a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aae:	f001 fed5 	bl	800485c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ab2:	f000 fd51 	bl	8003558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ab6:	f001 fe9f 	bl	80047f8 <vPortEnterCritical>
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d103      	bne.n	8002ad0 <xQueueGenericSend+0x174>
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d103      	bne.n	8002ae6 <xQueueGenericSend+0x18a>
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ae6:	f001 feb9 	bl	800485c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002aea:	1d3a      	adds	r2, r7, #4
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ffd0 	bl	8003a98 <xTaskCheckForTimeOut>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d124      	bne.n	8002b48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b00:	f000 faa6 	bl	8003050 <prvIsQueueFull>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fef4 	bl	8003900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b1a:	f000 fa31 	bl	8002f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b1e:	f000 fd29 	bl	8003574 <xTaskResumeAll>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f af7c 	bne.w	8002a22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <xQueueGenericSend+0x200>)
 8002b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	e772      	b.n	8002a22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b3e:	f000 fa1f 	bl	8002f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b42:	f000 fd17 	bl	8003574 <xTaskResumeAll>
 8002b46:	e76c      	b.n	8002a22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b4a:	f000 fa19 	bl	8002f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b4e:	f000 fd11 	bl	8003574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3738      	adds	r7, #56	@ 0x38
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	e000ed04 	.word	0xe000ed04

08002b60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	@ 0x40
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <xQueueGenericSendFromISR+0x3e>
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x42>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericSendFromISR+0x44>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d103      	bne.n	8002bce <xQueueGenericSendFromISR+0x6e>
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x72>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <xQueueGenericSendFromISR+0x74>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	623b      	str	r3, [r7, #32]
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf0:	f001 fee2 	bl	80049b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bf4:	f3ef 8211 	mrs	r2, BASEPRI
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61fa      	str	r2, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <xQueueGenericSendFromISR+0xc2>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d12f      	bne.n	8002c82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c38:	f000 f912 	bl	8002e60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d112      	bne.n	8002c6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	3324      	adds	r3, #36	@ 0x24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fea6 	bl	80039a4 <xTaskRemoveFromEventList>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002c80:	e001      	b.n	8002c86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3740      	adds	r7, #64	@ 0x40
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	@ 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <xQueueReceive+0x32>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	623b      	str	r3, [r7, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <xQueueReceive+0x40>
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueReceive+0x44>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <xQueueReceive+0x46>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <xQueueReceive+0x62>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	61fb      	str	r3, [r7, #28]
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cfe:	f001 f811 	bl	8003d24 <xTaskGetSchedulerState>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <xQueueReceive+0x72>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xQueueReceive+0x76>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueReceive+0x78>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xQueueReceive+0x94>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61bb      	str	r3, [r7, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d30:	f001 fd62 	bl	80047f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01f      	beq.n	8002d80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d44:	f000 f8f6 	bl	8002f34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00f      	beq.n	8002d78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fe21 	bl	80039a4 <xTaskRemoveFromEventList>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d68:	4b3c      	ldr	r3, [pc, #240]	@ (8002e5c <xQueueReceive+0x1c0>)
 8002d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d78:	f001 fd70 	bl	800485c <vPortExitCritical>
				return pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e069      	b.n	8002e54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d86:	f001 fd69 	bl	800485c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e062      	b.n	8002e54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fe67 	bl	8003a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da2:	f001 fd5b 	bl	800485c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da6:	f000 fbd7 	bl	8003558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002daa:	f001 fd25 	bl	80047f8 <vPortEnterCritical>
 8002dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d103      	bne.n	8002dc4 <xQueueReceive+0x128>
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d103      	bne.n	8002dda <xQueueReceive+0x13e>
 8002dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dda:	f001 fd3f 	bl	800485c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dde:	1d3a      	adds	r2, r7, #4
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fe56 	bl	8003a98 <xTaskCheckForTimeOut>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d123      	bne.n	8002e3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002df4:	f000 f916 	bl	8003024 <prvIsQueueEmpty>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	3324      	adds	r3, #36	@ 0x24
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fd7a 	bl	8003900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e0e:	f000 f8b7 	bl	8002f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e12:	f000 fbaf 	bl	8003574 <xTaskResumeAll>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d189      	bne.n	8002d30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <xQueueReceive+0x1c0>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	e780      	b.n	8002d30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e30:	f000 f8a6 	bl	8002f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e34:	f000 fb9e 	bl	8003574 <xTaskResumeAll>
 8002e38:	e77a      	b.n	8002d30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e3c:	f000 f8a0 	bl	8002f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e40:	f000 fb98 	bl	8003574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e46:	f000 f8ed 	bl	8003024 <prvIsQueueEmpty>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f43f af6f 	beq.w	8002d30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3730      	adds	r7, #48	@ 0x30
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d14d      	bne.n	8002f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff68 	bl	8003d60 <xTaskPriorityDisinherit>
 8002e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e043      	b.n	8002f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d119      	bne.n	8002ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6858      	ldr	r0, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	f001 ffe0 	bl	8004e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d32b      	bcc.n	8002f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	e026      	b.n	8002f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68d8      	ldr	r0, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	461a      	mov	r2, r3
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	f001 ffc6 	bl	8004e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	425b      	negs	r3, r3
 8002eee:	441a      	add	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d207      	bcs.n	8002f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	425b      	negs	r3, r3
 8002f0a:	441a      	add	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d105      	bne.n	8002f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d303      	bcc.n	8002f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	6838      	ldr	r0, [r7, #0]
 8002f74:	f001 ff7c 	bl	8004e70 <memcpy>
	}
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f88:	f001 fc36 	bl	80047f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f94:	e011      	b.n	8002fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3324      	adds	r3, #36	@ 0x24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fcfe 	bl	80039a4 <xTaskRemoveFromEventList>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fae:	f000 fdd7 	bl	8003b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dce9      	bgt.n	8002f96 <prvUnlockQueue+0x16>
 8002fc2:	e000      	b.n	8002fc6 <prvUnlockQueue+0x46>
					break;
 8002fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	22ff      	movs	r2, #255	@ 0xff
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002fce:	f001 fc45 	bl	800485c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fd2:	f001 fc11 	bl	80047f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fde:	e011      	b.n	8003004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d012      	beq.n	800300e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3310      	adds	r3, #16
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fcd9 	bl	80039a4 <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff8:	f000 fdb2 	bl	8003b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ffc:	7bbb      	ldrb	r3, [r7, #14]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003008:	2b00      	cmp	r3, #0
 800300a:	dce9      	bgt.n	8002fe0 <prvUnlockQueue+0x60>
 800300c:	e000      	b.n	8003010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800300e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	22ff      	movs	r2, #255	@ 0xff
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003018:	f001 fc20 	bl	800485c <vPortExitCritical>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800302c:	f001 fbe4 	bl	80047f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003038:	2301      	movs	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e001      	b.n	8003042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003042:	f001 fc0b 	bl	800485c <vPortExitCritical>

	return xReturn;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003058:	f001 fbce 	bl	80047f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	429a      	cmp	r2, r3
 8003066:	d102      	bne.n	800306e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e001      	b.n	8003072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003072:	f001 fbf3 	bl	800485c <vPortExitCritical>

	return xReturn;
 8003076:	68fb      	ldr	r3, [r7, #12]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e014      	b.n	80030ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003090:	4a0f      	ldr	r2, [pc, #60]	@ (80030d0 <vQueueAddToRegistry+0x50>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <vQueueAddToRegistry+0x50>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030a6:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <vQueueAddToRegistry+0x50>)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030b2:	e006      	b.n	80030c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b07      	cmp	r3, #7
 80030be:	d9e7      	bls.n	8003090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000784 	.word	0x20000784

080030d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030e4:	f001 fb88 	bl	80047f8 <vPortEnterCritical>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d103      	bne.n	80030fe <vQueueWaitForMessageRestricted+0x2a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <vQueueWaitForMessageRestricted+0x40>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003114:	f001 fba2 	bl	800485c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3324      	adds	r3, #36	@ 0x24
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fc0f 	bl	800394c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff26 	bl	8002f80 <prvUnlockQueue>
	}
 8003134:	bf00      	nop
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	@ 0x38
 8003140:	af04      	add	r7, sp, #16
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800314a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	623b      	str	r3, [r7, #32]
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <xTaskCreateStatic+0x4a>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	61fb      	str	r3, [r7, #28]
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003186:	235c      	movs	r3, #92	@ 0x5c
 8003188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b5c      	cmp	r3, #92	@ 0x5c
 800318e:	d00b      	beq.n	80031a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	61bb      	str	r3, [r7, #24]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01e      	beq.n	80031ee <xTaskCreateStatic+0xb2>
 80031b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01b      	beq.n	80031ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031c8:	2300      	movs	r3, #0
 80031ca:	9303      	str	r3, [sp, #12]
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f850 	bl	8003286 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031e8:	f000 f8de 	bl	80033a8 <prvAddNewTaskToReadyList>
 80031ec:	e001      	b.n	80031f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031f2:	697b      	ldr	r3, [r7, #20]
	}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	@ 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	@ 0x30
 8003200:	af04      	add	r7, sp, #16
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fc13 	bl	8004a3c <pvPortMalloc>
 8003216:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00e      	beq.n	800323c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800321e:	205c      	movs	r0, #92	@ 0x5c
 8003220:	f001 fc0c 	bl	8004a3c <pvPortMalloc>
 8003224:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	631a      	str	r2, [r3, #48]	@ 0x30
 8003232:	e005      	b.n	8003240 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003234:	6978      	ldr	r0, [r7, #20]
 8003236:	f001 fccf 	bl	8004bd8 <vPortFree>
 800323a:	e001      	b.n	8003240 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d017      	beq.n	8003276 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	2300      	movs	r3, #0
 8003252:	9303      	str	r3, [sp, #12]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	9302      	str	r3, [sp, #8]
 8003258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f80e 	bl	8003286 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800326a:	69f8      	ldr	r0, [r7, #28]
 800326c:	f000 f89c 	bl	80033a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003270:	2301      	movs	r3, #1
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	e002      	b.n	800327c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800327c:	69bb      	ldr	r3, [r7, #24]
	}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b088      	sub	sp, #32
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	461a      	mov	r2, r3
 800329e:	21a5      	movs	r1, #165	@ 0xa5
 80032a0:	f001 fdba 	bl	8004e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032ae:	3b01      	subs	r3, #1
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f023 0307 	bic.w	r3, r3, #7
 80032bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	617b      	str	r3, [r7, #20]
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01f      	beq.n	8003326 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e012      	b.n	8003312 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	7819      	ldrb	r1, [r3, #0]
 80032f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	3334      	adds	r3, #52	@ 0x34
 80032fc:	460a      	mov	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d9e9      	bls.n	80032ec <prvInitialiseNewTask+0x66>
 8003318:	e000      	b.n	800331c <prvInitialiseNewTask+0x96>
			{
				break;
 800331a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003324:	e003      	b.n	800332e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	2b37      	cmp	r3, #55	@ 0x37
 8003332:	d901      	bls.n	8003338 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003334:	2337      	movs	r3, #55	@ 0x37
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003342:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	2200      	movs	r2, #0
 8003348:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334c:	3304      	adds	r3, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f966 	bl	8002620 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f961 	bl	8002620 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003376:	2200      	movs	r2, #0
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	69b8      	ldr	r0, [r7, #24]
 8003388:	f001 f908 	bl	800459c <pxPortInitialiseStack>
 800338c:	4602      	mov	r2, r0
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800339c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033b0:	f001 fa22 	bl	80047f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a2c      	ldr	r2, [pc, #176]	@ (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033be:	4b2c      	ldr	r3, [pc, #176]	@ (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d110      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033d4:	f000 fbe8 	bl	8003ba8 <prvInitialiseTaskLists>
 80033d8:	e00d      	b.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033da:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <prvAddNewTaskToReadyList+0xcc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033e2:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d802      	bhi.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <prvAddNewTaskToReadyList+0xd0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003478 <prvAddNewTaskToReadyList+0xd0>)
 80033fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <prvAddNewTaskToReadyList+0xd0>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340c:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <prvAddNewTaskToReadyList+0xd4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d903      	bls.n	800341c <prvAddNewTaskToReadyList+0x74>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	4a18      	ldr	r2, [pc, #96]	@ (800347c <prvAddNewTaskToReadyList+0xd4>)
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <prvAddNewTaskToReadyList+0xd8>)
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f7ff f901 	bl	800263a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003438:	f001 fa10 	bl	800485c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <prvAddNewTaskToReadyList+0xcc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <prvAddNewTaskToReadyList+0xc8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d207      	bcs.n	8003462 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <prvAddNewTaskToReadyList+0xdc>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000c98 	.word	0x20000c98
 8003470:	200007c4 	.word	0x200007c4
 8003474:	20000ca4 	.word	0x20000ca4
 8003478:	20000cb4 	.word	0x20000cb4
 800347c:	20000ca0 	.word	0x20000ca0
 8003480:	200007c8 	.word	0x200007c8
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003496:	463a      	mov	r2, r7
 8003498:	1d39      	adds	r1, r7, #4
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f86a 	bl	8002578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	9202      	str	r2, [sp, #8]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	460a      	mov	r2, r1
 80034b6:	4922      	ldr	r1, [pc, #136]	@ (8003540 <vTaskStartScheduler+0xb8>)
 80034b8:	4822      	ldr	r0, [pc, #136]	@ (8003544 <vTaskStartScheduler+0xbc>)
 80034ba:	f7ff fe3f 	bl	800313c <xTaskCreateStatic>
 80034be:	4603      	mov	r3, r0
 80034c0:	4a21      	ldr	r2, [pc, #132]	@ (8003548 <vTaskStartScheduler+0xc0>)
 80034c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034c4:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <vTaskStartScheduler+0xc0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034cc:	2301      	movs	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e001      	b.n	80034d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034dc:	f000 fd04 	bl	8003ee8 <xTimerCreateTimerTask>
 80034e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d116      	bne.n	8003516 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	613b      	str	r3, [r7, #16]
}
 80034fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034fc:	4b13      	ldr	r3, [pc, #76]	@ (800354c <vTaskStartScheduler+0xc4>)
 80034fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <vTaskStartScheduler+0xc8>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <vTaskStartScheduler+0xcc>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003510:	f001 f8ce 	bl	80046b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003514:	e00f      	b.n	8003536 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d10b      	bne.n	8003536 <vTaskStartScheduler+0xae>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60fb      	str	r3, [r7, #12]
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	e7fd      	b.n	8003532 <vTaskStartScheduler+0xaa>
}
 8003536:	bf00      	nop
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08004ee4 	.word	0x08004ee4
 8003544:	08003b79 	.word	0x08003b79
 8003548:	20000cbc 	.word	0x20000cbc
 800354c:	20000cb8 	.word	0x20000cb8
 8003550:	20000ca4 	.word	0x20000ca4
 8003554:	20000c9c 	.word	0x20000c9c

08003558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <vTaskSuspendAll+0x18>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a03      	ldr	r2, [pc, #12]	@ (8003570 <vTaskSuspendAll+0x18>)
 8003564:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	20000cc0 	.word	0x20000cc0

08003574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003582:	4b42      	ldr	r3, [pc, #264]	@ (800368c <xTaskResumeAll+0x118>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	603b      	str	r3, [r7, #0]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035a2:	f001 f929 	bl	80047f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035a6:	4b39      	ldr	r3, [pc, #228]	@ (800368c <xTaskResumeAll+0x118>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	4a37      	ldr	r2, [pc, #220]	@ (800368c <xTaskResumeAll+0x118>)
 80035ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b0:	4b36      	ldr	r3, [pc, #216]	@ (800368c <xTaskResumeAll+0x118>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d162      	bne.n	800367e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035b8:	4b35      	ldr	r3, [pc, #212]	@ (8003690 <xTaskResumeAll+0x11c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05e      	beq.n	800367e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c0:	e02f      	b.n	8003622 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c2:	4b34      	ldr	r3, [pc, #208]	@ (8003694 <xTaskResumeAll+0x120>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3318      	adds	r3, #24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff f890 	bl	80026f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f88b 	bl	80026f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003698 <xTaskResumeAll+0x124>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d903      	bls.n	80035f2 <xTaskResumeAll+0x7e>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003698 <xTaskResumeAll+0x124>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a27      	ldr	r2, [pc, #156]	@ (800369c <xTaskResumeAll+0x128>)
 8003600:	441a      	add	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7ff f816 	bl	800263a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003612:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <xTaskResumeAll+0x12c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800361c:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <xTaskResumeAll+0x130>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003622:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <xTaskResumeAll+0x120>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1cb      	bne.n	80035c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003630:	f000 fb58 	bl	8003ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003634:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <xTaskResumeAll+0x134>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003640:	f000 f846 	bl	80036d0 <xTaskIncrementTick>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800364a:	4b16      	ldr	r3, [pc, #88]	@ (80036a4 <xTaskResumeAll+0x130>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f1      	bne.n	8003640 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800365c:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <xTaskResumeAll+0x134>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <xTaskResumeAll+0x130>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800366e:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <xTaskResumeAll+0x138>)
 8003670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800367e:	f001 f8ed 	bl	800485c <vPortExitCritical>

	return xAlreadyYielded;
 8003682:	68bb      	ldr	r3, [r7, #8]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000cc0 	.word	0x20000cc0
 8003690:	20000c98 	.word	0x20000c98
 8003694:	20000c58 	.word	0x20000c58
 8003698:	20000ca0 	.word	0x20000ca0
 800369c:	200007c8 	.word	0x200007c8
 80036a0:	200007c4 	.word	0x200007c4
 80036a4:	20000cac 	.word	0x20000cac
 80036a8:	20000ca8 	.word	0x20000ca8
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036b6:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <xTaskGetTickCount+0x1c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036bc:	687b      	ldr	r3, [r7, #4]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000c9c 	.word	0x20000c9c

080036d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036da:	4b4f      	ldr	r3, [pc, #316]	@ (8003818 <xTaskIncrementTick+0x148>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 8090 	bne.w	8003804 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036e4:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <xTaskIncrementTick+0x14c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036ec:	4a4b      	ldr	r2, [pc, #300]	@ (800381c <xTaskIncrementTick+0x14c>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d121      	bne.n	800373c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80036f8:	4b49      	ldr	r3, [pc, #292]	@ (8003820 <xTaskIncrementTick+0x150>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	603b      	str	r3, [r7, #0]
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	e7fd      	b.n	8003716 <xTaskIncrementTick+0x46>
 800371a:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <xTaskIncrementTick+0x150>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	4b40      	ldr	r3, [pc, #256]	@ (8003824 <xTaskIncrementTick+0x154>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3e      	ldr	r2, [pc, #248]	@ (8003820 <xTaskIncrementTick+0x150>)
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4a3e      	ldr	r2, [pc, #248]	@ (8003824 <xTaskIncrementTick+0x154>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b3e      	ldr	r3, [pc, #248]	@ (8003828 <xTaskIncrementTick+0x158>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	4a3c      	ldr	r2, [pc, #240]	@ (8003828 <xTaskIncrementTick+0x158>)
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	f000 fad4 	bl	8003ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800373c:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <xTaskIncrementTick+0x15c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	429a      	cmp	r2, r3
 8003744:	d349      	bcc.n	80037da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003746:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <xTaskIncrementTick+0x150>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003750:	4b36      	ldr	r3, [pc, #216]	@ (800382c <xTaskIncrementTick+0x15c>)
 8003752:	f04f 32ff 	mov.w	r2, #4294967295
 8003756:	601a      	str	r2, [r3, #0]
					break;
 8003758:	e03f      	b.n	80037da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375a:	4b31      	ldr	r3, [pc, #196]	@ (8003820 <xTaskIncrementTick+0x150>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d203      	bcs.n	800377a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003772:	4a2e      	ldr	r2, [pc, #184]	@ (800382c <xTaskIncrementTick+0x15c>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003778:	e02f      	b.n	80037da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ffb8 	bl	80026f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	3318      	adds	r3, #24
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe ffaf 	bl	80026f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379a:	4b25      	ldr	r3, [pc, #148]	@ (8003830 <xTaskIncrementTick+0x160>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d903      	bls.n	80037aa <xTaskIncrementTick+0xda>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <xTaskIncrementTick+0x160>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <xTaskIncrementTick+0x164>)
 80037b8:	441a      	add	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f7fe ff3a 	bl	800263a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <xTaskIncrementTick+0x168>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3b8      	bcc.n	8003746 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d8:	e7b5      	b.n	8003746 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037da:	4b17      	ldr	r3, [pc, #92]	@ (8003838 <xTaskIncrementTick+0x168>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e0:	4914      	ldr	r1, [pc, #80]	@ (8003834 <xTaskIncrementTick+0x164>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d901      	bls.n	80037f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80037f2:	2301      	movs	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037f6:	4b11      	ldr	r3, [pc, #68]	@ (800383c <xTaskIncrementTick+0x16c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80037fe:	2301      	movs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e004      	b.n	800380e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <xTaskIncrementTick+0x170>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <xTaskIncrementTick+0x170>)
 800380c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800380e:	697b      	ldr	r3, [r7, #20]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000cc0 	.word	0x20000cc0
 800381c:	20000c9c 	.word	0x20000c9c
 8003820:	20000c50 	.word	0x20000c50
 8003824:	20000c54 	.word	0x20000c54
 8003828:	20000cb0 	.word	0x20000cb0
 800382c:	20000cb8 	.word	0x20000cb8
 8003830:	20000ca0 	.word	0x20000ca0
 8003834:	200007c8 	.word	0x200007c8
 8003838:	200007c4 	.word	0x200007c4
 800383c:	20000cac 	.word	0x20000cac
 8003840:	20000ca8 	.word	0x20000ca8

08003844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800384a:	4b28      	ldr	r3, [pc, #160]	@ (80038ec <vTaskSwitchContext+0xa8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003852:	4b27      	ldr	r3, [pc, #156]	@ (80038f0 <vTaskSwitchContext+0xac>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003858:	e042      	b.n	80038e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800385a:	4b25      	ldr	r3, [pc, #148]	@ (80038f0 <vTaskSwitchContext+0xac>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003860:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <vTaskSwitchContext+0xb0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e011      	b.n	800388c <vTaskSwitchContext+0x48>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <vTaskSwitchContext+0x42>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	607b      	str	r3, [r7, #4]
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <vTaskSwitchContext+0x3e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3b01      	subs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	491a      	ldr	r1, [pc, #104]	@ (80038f8 <vTaskSwitchContext+0xb4>)
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0e3      	beq.n	8003868 <vTaskSwitchContext+0x24>
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <vTaskSwitchContext+0xb4>)
 80038ac:	4413      	add	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3308      	adds	r3, #8
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d104      	bne.n	80038d0 <vTaskSwitchContext+0x8c>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <vTaskSwitchContext+0xb8>)
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4a06      	ldr	r2, [pc, #24]	@ (80038f4 <vTaskSwitchContext+0xb0>)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000cc0 	.word	0x20000cc0
 80038f0:	20000cac 	.word	0x20000cac
 80038f4:	20000ca0 	.word	0x20000ca0
 80038f8:	200007c8 	.word	0x200007c8
 80038fc:	200007c4 	.word	0x200007c4

08003900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60fb      	str	r3, [r7, #12]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003928:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <vTaskPlaceOnEventList+0x48>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3318      	adds	r3, #24
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fe fea6 	bl	8002682 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003936:	2101      	movs	r1, #1
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f000 fa81 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200007c4 	.word	0x200007c4

0800394c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	617b      	str	r3, [r7, #20]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003976:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3318      	adds	r3, #24
 800397c:	4619      	mov	r1, r3
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7fe fe5b 	bl	800263a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800398a:	f04f 33ff 	mov.w	r3, #4294967295
 800398e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	68b8      	ldr	r0, [r7, #8]
 8003994:	f000 fa54 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
	}
 8003998:	bf00      	nop
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200007c4 	.word	0x200007c4

080039a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60fb      	str	r3, [r7, #12]
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	e7fd      	b.n	80039ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3318      	adds	r3, #24
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fe8c 	bl	80026f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <xTaskRemoveFromEventList+0xb0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11d      	bne.n	8003a20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fe83 	bl	80026f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f2:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <xTaskRemoveFromEventList+0xb4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d903      	bls.n	8003a02 <xTaskRemoveFromEventList+0x5e>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	4a16      	ldr	r2, [pc, #88]	@ (8003a58 <xTaskRemoveFromEventList+0xb4>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <xTaskRemoveFromEventList+0xb8>)
 8003a10:	441a      	add	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7fe fe0e 	bl	800263a <vListInsertEnd>
 8003a1e:	e005      	b.n	8003a2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3318      	adds	r3, #24
 8003a24:	4619      	mov	r1, r3
 8003a26:	480e      	ldr	r0, [pc, #56]	@ (8003a60 <xTaskRemoveFromEventList+0xbc>)
 8003a28:	f7fe fe07 	bl	800263a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <xTaskRemoveFromEventList+0xc0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d905      	bls.n	8003a46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <xTaskRemoveFromEventList+0xc4>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e001      	b.n	8003a4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a4a:	697b      	ldr	r3, [r7, #20]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000cc0 	.word	0x20000cc0
 8003a58:	20000ca0 	.word	0x20000ca0
 8003a5c:	200007c8 	.word	0x200007c8
 8003a60:	20000c58 	.word	0x20000c58
 8003a64:	200007c4 	.word	0x200007c4
 8003a68:	20000cac 	.word	0x20000cac

08003a6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <vTaskInternalSetTimeOutState+0x24>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <vTaskInternalSetTimeOutState+0x28>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000cb0 	.word	0x20000cb0
 8003a94:	20000c9c 	.word	0x20000c9c

08003a98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	613b      	str	r3, [r7, #16]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	60fb      	str	r3, [r7, #12]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ade:	f000 fe8b 	bl	80047f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <xTaskCheckForTimeOut+0xc0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d102      	bne.n	8003b02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e023      	b.n	8003b4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <xTaskCheckForTimeOut+0xc4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d007      	beq.n	8003b1e <xTaskCheckForTimeOut+0x86>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e015      	b.n	8003b4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d20b      	bcs.n	8003b40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff99 	bl	8003a6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e004      	b.n	8003b4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b4a:	f000 fe87 	bl	800485c <vPortExitCritical>

	return xReturn;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000c9c 	.word	0x20000c9c
 8003b5c:	20000cb0 	.word	0x20000cb0

08003b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b64:	4b03      	ldr	r3, [pc, #12]	@ (8003b74 <vTaskMissedYield+0x14>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000cac 	.word	0x20000cac

08003b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b80:	f000 f852 	bl	8003c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <prvIdleTask+0x28>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d9f9      	bls.n	8003b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <prvIdleTask+0x2c>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b9c:	e7f0      	b.n	8003b80 <prvIdleTask+0x8>
 8003b9e:	bf00      	nop
 8003ba0:	200007c8 	.word	0x200007c8
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a12      	ldr	r2, [pc, #72]	@ (8003c08 <prvInitialiseTaskLists+0x60>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fd0c 	bl	80025e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b37      	cmp	r3, #55	@ 0x37
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bd4:	480d      	ldr	r0, [pc, #52]	@ (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bd6:	f7fe fd03 	bl	80025e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bda:	480d      	ldr	r0, [pc, #52]	@ (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bdc:	f7fe fd00 	bl	80025e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003be0:	480c      	ldr	r0, [pc, #48]	@ (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003be2:	f7fe fcfd 	bl	80025e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003be6:	480c      	ldr	r0, [pc, #48]	@ (8003c18 <prvInitialiseTaskLists+0x70>)
 8003be8:	f7fe fcfa 	bl	80025e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bec:	480b      	ldr	r0, [pc, #44]	@ (8003c1c <prvInitialiseTaskLists+0x74>)
 8003bee:	f7fe fcf7 	bl	80025e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	@ (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bfa:	4a05      	ldr	r2, [pc, #20]	@ (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200007c8 	.word	0x200007c8
 8003c0c:	20000c28 	.word	0x20000c28
 8003c10:	20000c3c 	.word	0x20000c3c
 8003c14:	20000c58 	.word	0x20000c58
 8003c18:	20000c6c 	.word	0x20000c6c
 8003c1c:	20000c84 	.word	0x20000c84
 8003c20:	20000c50 	.word	0x20000c50
 8003c24:	20000c54 	.word	0x20000c54

08003c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c2e:	e019      	b.n	8003c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c30:	f000 fde2 	bl	80047f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <prvCheckTasksWaitingTermination+0x50>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fd57 	bl	80026f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c5a:	f000 fdff 	bl	800485c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f810 	bl	8003c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000c6c 	.word	0x20000c6c
 8003c7c:	20000c98 	.word	0x20000c98
 8003c80:	20000c80 	.word	0x20000c80

08003c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff9c 	bl	8004bd8 <vPortFree>
				vPortFree( pxTCB );
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 ff99 	bl	8004bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ca6:	e019      	b.n	8003cdc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d103      	bne.n	8003cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 ff90 	bl	8004bd8 <vPortFree>
	}
 8003cb8:	e010      	b.n	8003cdc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d00b      	beq.n	8003cdc <prvDeleteTCB+0x58>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <prvDeleteTCB+0x54>
	}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cea:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <prvResetNextTaskUnblockTime+0x38>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <prvResetNextTaskUnblockTime+0x3c>)
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cfc:	e008      	b.n	8003d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <prvResetNextTaskUnblockTime+0x38>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	@ (8003d20 <prvResetNextTaskUnblockTime+0x3c>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	20000c50 	.word	0x20000c50
 8003d20:	20000cb8 	.word	0x20000cb8

08003d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <xTaskGetSchedulerState+0x34>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d32:	2301      	movs	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e008      	b.n	8003d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d38:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <xTaskGetSchedulerState+0x38>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d40:	2302      	movs	r3, #2
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	e001      	b.n	8003d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d4a:	687b      	ldr	r3, [r7, #4]
	}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20000ca4 	.word	0x20000ca4
 8003d5c:	20000cc0 	.word	0x20000cc0

08003d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d058      	beq.n	8003e28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d76:	4b2f      	ldr	r3, [pc, #188]	@ (8003e34 <xTaskPriorityDisinherit+0xd4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d00b      	beq.n	8003d98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60fb      	str	r3, [r7, #12]
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60bb      	str	r3, [r7, #8]
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d02c      	beq.n	8003e28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d128      	bne.n	8003e28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fc8a 	bl	80026f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e38 <xTaskPriorityDisinherit+0xd8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d903      	bls.n	8003e08 <xTaskPriorityDisinherit+0xa8>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	4a0c      	ldr	r2, [pc, #48]	@ (8003e38 <xTaskPriorityDisinherit+0xd8>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <xTaskPriorityDisinherit+0xdc>)
 8003e16:	441a      	add	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fe fc0b 	bl	800263a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e28:	697b      	ldr	r3, [r7, #20]
	}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200007c4 	.word	0x200007c4
 8003e38:	20000ca0 	.word	0x20000ca0
 8003e3c:	200007c8 	.word	0x200007c8

08003e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e4a:	4b21      	ldr	r3, [pc, #132]	@ (8003ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e50:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fc4c 	bl	80026f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d10a      	bne.n	8003e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4819      	ldr	r0, [pc, #100]	@ (8003ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e74:	f7fe fbe1 	bl	800263a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e78:	e026      	b.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d209      	bcs.n	8003ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7fe fbef 	bl	8002682 <vListInsert>
}
 8003ea4:	e010      	b.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe fbe5 	bl	8002682 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d202      	bcs.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ec2:	4a08      	ldr	r2, [pc, #32]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000c9c 	.word	0x20000c9c
 8003ed4:	200007c4 	.word	0x200007c4
 8003ed8:	20000c84 	.word	0x20000c84
 8003edc:	20000c54 	.word	0x20000c54
 8003ee0:	20000c50 	.word	0x20000c50
 8003ee4:	20000cb8 	.word	0x20000cb8

08003ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	@ 0x28
 8003eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ef2:	f000 fb13 	bl	800451c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f6c <xTimerCreateTimerTask+0x84>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d021      	beq.n	8003f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f06:	1d3a      	adds	r2, r7, #4
 8003f08:	f107 0108 	add.w	r1, r7, #8
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fb4b 	bl	80025ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	9202      	str	r2, [sp, #8]
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	2302      	movs	r3, #2
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	460a      	mov	r2, r1
 8003f28:	4911      	ldr	r1, [pc, #68]	@ (8003f70 <xTimerCreateTimerTask+0x88>)
 8003f2a:	4812      	ldr	r0, [pc, #72]	@ (8003f74 <xTimerCreateTimerTask+0x8c>)
 8003f2c:	f7ff f906 	bl	800313c <xTaskCreateStatic>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4a11      	ldr	r2, [pc, #68]	@ (8003f78 <xTimerCreateTimerTask+0x90>)
 8003f34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <xTimerCreateTimerTask+0x90>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	613b      	str	r3, [r7, #16]
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f60:	697b      	ldr	r3, [r7, #20]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000cf4 	.word	0x20000cf4
 8003f70:	08004eec 	.word	0x08004eec
 8003f74:	080040b5 	.word	0x080040b5
 8003f78:	20000cf8 	.word	0x20000cf8

08003f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <xTimerGenericCommand+0x30>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	623b      	str	r3, [r7, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <xTimerGenericCommand+0x98>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02a      	beq.n	800400a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	dc18      	bgt.n	8003ff8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fc6:	f7ff fead 	bl	8003d24 <xTaskGetSchedulerState>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d109      	bne.n	8003fe4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fd0:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <xTimerGenericCommand+0x98>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	f107 0110 	add.w	r1, r7, #16
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fdc:	f7fe fcbe 	bl	800295c <xQueueGenericSend>
 8003fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fe2:	e012      	b.n	800400a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <xTimerGenericCommand+0x98>)
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	f107 0110 	add.w	r1, r7, #16
 8003fec:	2300      	movs	r3, #0
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f7fe fcb4 	bl	800295c <xQueueGenericSend>
 8003ff4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ff6:	e008      	b.n	800400a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <xTimerGenericCommand+0x98>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	f107 0110 	add.w	r1, r7, #16
 8004000:	2300      	movs	r3, #0
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	f7fe fdac 	bl	8002b60 <xQueueGenericSendFromISR>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800400c:	4618      	mov	r0, r3
 800400e:	3728      	adds	r7, #40	@ 0x28
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000cf4 	.word	0x20000cf4

08004018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004022:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <prvProcessExpiredTimer+0x98>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3304      	adds	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fb5f 	bl	80026f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	18d1      	adds	r1, r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	6978      	ldr	r0, [r7, #20]
 8004052:	f000 f8d5 	bl	8004200 <prvInsertTimerInActiveList>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800405c:	2300      	movs	r3, #0
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2300      	movs	r3, #0
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	2100      	movs	r1, #0
 8004066:	6978      	ldr	r0, [r7, #20]
 8004068:	f7ff ff88 	bl	8003f7c <xTimerGenericCommand>
 800406c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d114      	bne.n	800409e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	60fb      	str	r3, [r7, #12]
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	4798      	blx	r3
}
 80040a6:	bf00      	nop
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000cec 	.word	0x20000cec

080040b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040bc:	f107 0308 	add.w	r3, r7, #8
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f859 	bl	8004178 <prvGetNextExpireTime>
 80040c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4619      	mov	r1, r3
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f805 	bl	80040dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040d2:	f000 f8d7 	bl	8004284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040d6:	bf00      	nop
 80040d8:	e7f0      	b.n	80040bc <prvTimerTask+0x8>
	...

080040dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040e6:	f7ff fa37 	bl	8003558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ea:	f107 0308 	add.w	r3, r7, #8
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f866 	bl	80041c0 <prvSampleTimeNow>
 80040f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d130      	bne.n	800415e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <prvProcessTimerOrBlockTask+0x3c>
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	429a      	cmp	r2, r3
 8004108:	d806      	bhi.n	8004118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800410a:	f7ff fa33 	bl	8003574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff81 	bl	8004018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004116:	e024      	b.n	8004162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800411e:	4b13      	ldr	r3, [pc, #76]	@ (800416c <prvProcessTimerOrBlockTask+0x90>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <prvProcessTimerOrBlockTask+0x50>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <prvProcessTimerOrBlockTask+0x52>
 800412c:	2300      	movs	r3, #0
 800412e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004130:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <prvProcessTimerOrBlockTask+0x94>)
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	f7fe ffc9 	bl	80030d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004142:	f7ff fa17 	bl	8003574 <xTaskResumeAll>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800414c:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <prvProcessTimerOrBlockTask+0x98>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
}
 800415c:	e001      	b.n	8004162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800415e:	f7ff fa09 	bl	8003574 <xTaskResumeAll>
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000cf0 	.word	0x20000cf0
 8004170:	20000cf4 	.word	0x20000cf4
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004180:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <prvGetNextExpireTime+0x44>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <prvGetNextExpireTime+0x16>
 800418a:	2201      	movs	r2, #1
 800418c:	e000      	b.n	8004190 <prvGetNextExpireTime+0x18>
 800418e:	2200      	movs	r2, #0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <prvGetNextExpireTime+0x44>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e001      	b.n	80041ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000cec 	.word	0x20000cec

080041c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041c8:	f7ff fa72 	bl	80036b0 <xTaskGetTickCount>
 80041cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <prvSampleTimeNow+0x3c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d205      	bcs.n	80041e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041d8:	f000 f93a 	bl	8004450 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e002      	b.n	80041ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041ea:	4a04      	ldr	r2, [pc, #16]	@ (80041fc <prvSampleTimeNow+0x3c>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000cfc 	.word	0x20000cfc

08004200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d812      	bhi.n	800424c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e01b      	b.n	8004272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <prvInsertTimerInActiveList+0x7c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe fa1c 	bl	8002682 <vListInsert>
 800424a:	e012      	b.n	8004272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d206      	bcs.n	8004262 <prvInsertTimerInActiveList+0x62>
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e007      	b.n	8004272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004262:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <prvInsertTimerInActiveList+0x80>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe fa08 	bl	8002682 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004272:	697b      	ldr	r3, [r7, #20]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000cf0 	.word	0x20000cf0
 8004280:	20000cec 	.word	0x20000cec

08004284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08e      	sub	sp, #56	@ 0x38
 8004288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800428a:	e0ce      	b.n	800442a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da19      	bge.n	80042c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	3304      	adds	r3, #4
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	61fb      	str	r3, [r7, #28]
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	e7fd      	b.n	80042b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042bc:	6850      	ldr	r0, [r2, #4]
 80042be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c0:	6892      	ldr	r2, [r2, #8]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f2c0 80ae 	blt.w	800442a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fa08 	bl	80026f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042e4:	463b      	mov	r3, r7
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ff6a 	bl	80041c0 <prvSampleTimeNow>
 80042ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	f200 8097 	bhi.w	8004424 <prvProcessReceivedCommands+0x1a0>
 80042f6:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <prvProcessReceivedCommands+0x78>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004325 	.word	0x08004325
 8004300:	08004325 	.word	0x08004325
 8004304:	08004325 	.word	0x08004325
 8004308:	0800439b 	.word	0x0800439b
 800430c:	080043af 	.word	0x080043af
 8004310:	080043fb 	.word	0x080043fb
 8004314:	08004325 	.word	0x08004325
 8004318:	08004325 	.word	0x08004325
 800431c:	0800439b 	.word	0x0800439b
 8004320:	080043af 	.word	0x080043af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	18d1      	adds	r1, r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004344:	f7ff ff5c 	bl	8004200 <prvInsertTimerInActiveList>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06c      	beq.n	8004428 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d061      	beq.n	8004428 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	441a      	add	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2300      	movs	r3, #0
 8004372:	2100      	movs	r1, #0
 8004374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004376:	f7ff fe01 	bl	8003f7c <xTimerGenericCommand>
 800437a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d152      	bne.n	8004428 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	61bb      	str	r3, [r7, #24]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80043ac:	e03d      	b.n	800442a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	617b      	str	r3, [r7, #20]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f4:	f7ff ff04 	bl	8004200 <prvInsertTimerInActiveList>
					break;
 80043f8:	e017      	b.n	800442a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800440a:	f000 fbe5 	bl	8004bd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800440e:	e00c      	b.n	800442a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004422:	e002      	b.n	800442a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <prvProcessReceivedCommands+0x1a6>
					break;
 8004428:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <prvProcessReceivedCommands+0x1c8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	1d39      	adds	r1, r7, #4
 8004430:	2200      	movs	r2, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fc32 	bl	8002c9c <xQueueReceive>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f47f af26 	bne.w	800428c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3730      	adds	r7, #48	@ 0x30
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000cf4 	.word	0x20000cf4

08004450 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004456:	e049      	b.n	80044ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004458:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <prvSwitchTimerLists+0xc4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004462:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <prvSwitchTimerLists+0xc4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3304      	adds	r3, #4
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe f93f 	bl	80026f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02f      	beq.n	80044ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d90e      	bls.n	80044bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <prvSwitchTimerLists+0xc4>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fe f8e4 	bl	8002682 <vListInsert>
 80044ba:	e017      	b.n	80044ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	2100      	movs	r1, #0
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff fd58 	bl	8003f7c <xTimerGenericCommand>
 80044cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	603b      	str	r3, [r7, #0]
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044ec:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <prvSwitchTimerLists+0xc4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1b0      	bne.n	8004458 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <prvSwitchTimerLists+0xc4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <prvSwitchTimerLists+0xc8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <prvSwitchTimerLists+0xc4>)
 8004502:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004504:	4a04      	ldr	r2, [pc, #16]	@ (8004518 <prvSwitchTimerLists+0xc8>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000cec 	.word	0x20000cec
 8004518:	20000cf0 	.word	0x20000cf0

0800451c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004522:	f000 f969 	bl	80047f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <prvCheckForValidListAndQueue+0x60>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d120      	bne.n	8004570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800452e:	4814      	ldr	r0, [pc, #80]	@ (8004580 <prvCheckForValidListAndQueue+0x64>)
 8004530:	f7fe f856 	bl	80025e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004534:	4813      	ldr	r0, [pc, #76]	@ (8004584 <prvCheckForValidListAndQueue+0x68>)
 8004536:	f7fe f853 	bl	80025e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800453a:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <prvCheckForValidListAndQueue+0x6c>)
 800453c:	4a10      	ldr	r2, [pc, #64]	@ (8004580 <prvCheckForValidListAndQueue+0x64>)
 800453e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004540:	4b12      	ldr	r3, [pc, #72]	@ (800458c <prvCheckForValidListAndQueue+0x70>)
 8004542:	4a10      	ldr	r2, [pc, #64]	@ (8004584 <prvCheckForValidListAndQueue+0x68>)
 8004544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004546:	2300      	movs	r3, #0
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <prvCheckForValidListAndQueue+0x74>)
 800454c:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <prvCheckForValidListAndQueue+0x78>)
 800454e:	2110      	movs	r1, #16
 8004550:	200a      	movs	r0, #10
 8004552:	f7fe f963 	bl	800281c <xQueueGenericCreateStatic>
 8004556:	4603      	mov	r3, r0
 8004558:	4a08      	ldr	r2, [pc, #32]	@ (800457c <prvCheckForValidListAndQueue+0x60>)
 800455a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <prvCheckForValidListAndQueue+0x60>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <prvCheckForValidListAndQueue+0x60>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	490b      	ldr	r1, [pc, #44]	@ (8004598 <prvCheckForValidListAndQueue+0x7c>)
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fd88 	bl	8003080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004570:	f000 f974 	bl	800485c <vPortExitCritical>
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000cf4 	.word	0x20000cf4
 8004580:	20000cc4 	.word	0x20000cc4
 8004584:	20000cd8 	.word	0x20000cd8
 8004588:	20000cec 	.word	0x20000cec
 800458c:	20000cf0 	.word	0x20000cf0
 8004590:	20000da0 	.word	0x20000da0
 8004594:	20000d00 	.word	0x20000d00
 8004598:	08004ef4 	.word	0x08004ef4

0800459c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b04      	subs	r3, #4
 80045ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b04      	subs	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b04      	subs	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <pxPortInitialiseStack+0x64>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b14      	subs	r3, #20
 80045d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b04      	subs	r3, #4
 80045e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f06f 0202 	mvn.w	r2, #2
 80045ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3b20      	subs	r3, #32
 80045f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	08004605 	.word	0x08004605

08004604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800460e:	4b13      	ldr	r3, [pc, #76]	@ (800465c <prvTaskExitError+0x58>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d00b      	beq.n	8004630 <prvTaskExitError+0x2c>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60fb      	str	r3, [r7, #12]
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <prvTaskExitError+0x28>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60bb      	str	r3, [r7, #8]
}
 8004642:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004644:	bf00      	nop
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0fc      	beq.n	8004646 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	2000000c 	.word	0x2000000c

08004660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004660:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <pxCurrentTCBConst2>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	f380 8809 	msr	PSP, r0
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	4770      	bx	lr
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst2>:
 8004680:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004688:	4808      	ldr	r0, [pc, #32]	@ (80046ac <prvPortStartFirstTask+0x24>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8814 	msr	CONTROL, r0
 800469a:	b662      	cpsie	i
 800469c:	b661      	cpsie	f
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	df00      	svc	0
 80046a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046aa:	bf00      	nop
 80046ac:	e000ed08 	.word	0xe000ed08

080046b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046b6:	4b47      	ldr	r3, [pc, #284]	@ (80047d4 <xPortStartScheduler+0x124>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a47      	ldr	r2, [pc, #284]	@ (80047d8 <xPortStartScheduler+0x128>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10b      	bne.n	80046d8 <xPortStartScheduler+0x28>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60fb      	str	r3, [r7, #12]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046d8:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <xPortStartScheduler+0x124>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3f      	ldr	r2, [pc, #252]	@ (80047dc <xPortStartScheduler+0x12c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10b      	bne.n	80046fa <xPortStartScheduler+0x4a>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	613b      	str	r3, [r7, #16]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046fa:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <xPortStartScheduler+0x130>)
 80046fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	22ff      	movs	r2, #255	@ 0xff
 800470a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <xPortStartScheduler+0x134>)
 8004720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004722:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004728:	e009      	b.n	800473e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <xPortStartScheduler+0x138>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	4a2d      	ldr	r2, [pc, #180]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004746:	2b80      	cmp	r3, #128	@ 0x80
 8004748:	d0ef      	beq.n	800472a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800474a:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <xPortStartScheduler+0x138>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1c3 0307 	rsb	r3, r3, #7
 8004752:	2b04      	cmp	r3, #4
 8004754:	d00b      	beq.n	800476e <xPortStartScheduler+0xbe>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60bb      	str	r3, [r7, #8]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800476e:	4b1e      	ldr	r3, [pc, #120]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <xPortStartScheduler+0x138>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <xPortStartScheduler+0x13c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <xPortStartScheduler+0x13c>)
 8004792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004798:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <xPortStartScheduler+0x13c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <xPortStartScheduler+0x13c>)
 800479e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047a4:	f000 f8da 	bl	800495c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <xPortStartScheduler+0x140>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047ae:	f000 f8f9 	bl	80049a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047b2:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <xPortStartScheduler+0x144>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a0f      	ldr	r2, [pc, #60]	@ (80047f4 <xPortStartScheduler+0x144>)
 80047b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80047bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047be:	f7ff ff63 	bl	8004688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047c2:	f7ff f83f 	bl	8003844 <vTaskSwitchContext>
	prvTaskExitError();
 80047c6:	f7ff ff1d 	bl	8004604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	e000ed00 	.word	0xe000ed00
 80047d8:	410fc271 	.word	0x410fc271
 80047dc:	410fc270 	.word	0x410fc270
 80047e0:	e000e400 	.word	0xe000e400
 80047e4:	20000df0 	.word	0x20000df0
 80047e8:	20000df4 	.word	0x20000df4
 80047ec:	e000ed20 	.word	0xe000ed20
 80047f0:	2000000c 	.word	0x2000000c
 80047f4:	e000ef34 	.word	0xe000ef34

080047f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <vPortEnterCritical+0x5c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	4a0e      	ldr	r2, [pc, #56]	@ (8004854 <vPortEnterCritical+0x5c>)
 800481a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800481c:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <vPortEnterCritical+0x5c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d110      	bne.n	8004846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004824:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <vPortEnterCritical+0x60>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <vPortEnterCritical+0x4e>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	603b      	str	r3, [r7, #0]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vPortEnterCritical+0x4a>
	}
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000000c 	.word	0x2000000c
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <vPortExitCritical+0x26>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	607b      	str	r3, [r7, #4]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004882:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <vPortExitCritical+0x50>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <vPortExitCritical+0x50>)
 800488a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800488c:	4b07      	ldr	r3, [pc, #28]	@ (80048ac <vPortExitCritical+0x50>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <vPortExitCritical+0x44>
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	2000000c 	.word	0x2000000c

080048b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048b0:	f3ef 8009 	mrs	r0, PSP
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <pxCurrentTCBConst>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f01e 0f10 	tst.w	lr, #16
 80048c0:	bf08      	it	eq
 80048c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	6010      	str	r0, [r2, #0]
 80048cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048d4:	f380 8811 	msr	BASEPRI, r0
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f7fe ffb0 	bl	8003844 <vTaskSwitchContext>
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f380 8811 	msr	BASEPRI, r0
 80048ec:	bc09      	pop	{r0, r3}
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f6:	f01e 0f10 	tst.w	lr, #16
 80048fa:	bf08      	it	eq
 80048fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004900:	f380 8809 	msr	PSP, r0
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst>:
 8004910:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004932:	f7fe fecd 	bl	80036d0 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800493c:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <xPortSysTickHandler+0x40>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <vPortSetupTimerInterrupt+0x38>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800496c:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <vPortSetupTimerInterrupt+0x3c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0a      	ldr	r2, [pc, #40]	@ (800499c <vPortSetupTimerInterrupt+0x40>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <vPortSetupTimerInterrupt+0x44>)
 800497a:	3b01      	subs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800497e:	4b04      	ldr	r3, [pc, #16]	@ (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010
 8004994:	e000e018 	.word	0xe000e018
 8004998:	20000000 	.word	0x20000000
 800499c:	10624dd3 	.word	0x10624dd3
 80049a0:	e000e014 	.word	0xe000e014

080049a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80049b4 <vPortEnableVFP+0x10>
 80049a8:	6801      	ldr	r1, [r0, #0]
 80049aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80049ae:	6001      	str	r1, [r0, #0]
 80049b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049b2:	bf00      	nop
 80049b4:	e000ed88 	.word	0xe000ed88

080049b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049be:	f3ef 8305 	mrs	r3, IPSR
 80049c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d915      	bls.n	80049f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ca:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <vPortValidateInterruptPriority+0x74>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049d4:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <vPortValidateInterruptPriority+0x78>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	7afa      	ldrb	r2, [r7, #11]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d20b      	bcs.n	80049f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	e7fd      	b.n	80049f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <vPortValidateInterruptPriority+0x7c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <vPortValidateInterruptPriority+0x80>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d90b      	bls.n	8004a1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	603b      	str	r3, [r7, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	e7fd      	b.n	8004a1a <vPortValidateInterruptPriority+0x62>
	}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000e3f0 	.word	0xe000e3f0
 8004a30:	20000df0 	.word	0x20000df0
 8004a34:	e000ed0c 	.word	0xe000ed0c
 8004a38:	20000df4 	.word	0x20000df4

08004a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	@ 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a48:	f7fe fd86 	bl	8003558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc0 <pvPortMalloc+0x184>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a54:	f000 f924 	bl	8004ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a58:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc4 <pvPortMalloc+0x188>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 8095 	bne.w	8004b90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d015      	beq.n	8004aaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f023 0307 	bic.w	r3, r3, #7
 8004a84:	3308      	adds	r3, #8
 8004a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <pvPortMalloc+0x6e>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	617b      	str	r3, [r7, #20]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d06f      	beq.n	8004b90 <pvPortMalloc+0x154>
 8004ab0:	4b45      	ldr	r3, [pc, #276]	@ (8004bc8 <pvPortMalloc+0x18c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d86a      	bhi.n	8004b90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aba:	4b44      	ldr	r3, [pc, #272]	@ (8004bcc <pvPortMalloc+0x190>)
 8004abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004abe:	4b43      	ldr	r3, [pc, #268]	@ (8004bcc <pvPortMalloc+0x190>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ac4:	e004      	b.n	8004ad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d903      	bls.n	8004ae2 <pvPortMalloc+0xa6>
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f1      	bne.n	8004ac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ae2:	4b37      	ldr	r3, [pc, #220]	@ (8004bc0 <pvPortMalloc+0x184>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d051      	beq.n	8004b90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2208      	movs	r2, #8
 8004af2:	4413      	add	r3, r2
 8004af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1ad2      	subs	r2, r2, r3
 8004b06:	2308      	movs	r3, #8
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d920      	bls.n	8004b50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <pvPortMalloc+0xfc>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b4a:	69b8      	ldr	r0, [r7, #24]
 8004b4c:	f000 f90a 	bl	8004d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b50:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <pvPortMalloc+0x18c>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <pvPortMalloc+0x18c>)
 8004b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <pvPortMalloc+0x18c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <pvPortMalloc+0x194>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d203      	bcs.n	8004b72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b6a:	4b17      	ldr	r3, [pc, #92]	@ (8004bc8 <pvPortMalloc+0x18c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a18      	ldr	r2, [pc, #96]	@ (8004bd0 <pvPortMalloc+0x194>)
 8004b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4b13      	ldr	r3, [pc, #76]	@ (8004bc4 <pvPortMalloc+0x188>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b86:	4b13      	ldr	r3, [pc, #76]	@ (8004bd4 <pvPortMalloc+0x198>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a11      	ldr	r2, [pc, #68]	@ (8004bd4 <pvPortMalloc+0x198>)
 8004b8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b90:	f7fe fcf0 	bl	8003574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <pvPortMalloc+0x17a>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60fb      	str	r3, [r7, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	e7fd      	b.n	8004bb2 <pvPortMalloc+0x176>
	return pvReturn;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	@ 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20004a00 	.word	0x20004a00
 8004bc4:	20004a14 	.word	0x20004a14
 8004bc8:	20004a04 	.word	0x20004a04
 8004bcc:	200049f8 	.word	0x200049f8
 8004bd0:	20004a08 	.word	0x20004a08
 8004bd4:	20004a0c 	.word	0x20004a0c

08004bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04f      	beq.n	8004c8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bea:	2308      	movs	r3, #8
 8004bec:	425b      	negs	r3, r3
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <vPortFree+0xbc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <vPortFree+0x46>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60fb      	str	r3, [r7, #12]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <vPortFree+0x66>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60bb      	str	r3, [r7, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <vPortFree+0xbc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01e      	beq.n	8004c8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d11a      	bne.n	8004c8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <vPortFree+0xbc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c64:	f7fe fc78 	bl	8003558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <vPortFree+0xc0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4413      	add	r3, r2
 8004c72:	4a09      	ldr	r2, [pc, #36]	@ (8004c98 <vPortFree+0xc0>)
 8004c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c76:	6938      	ldr	r0, [r7, #16]
 8004c78:	f000 f874 	bl	8004d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <vPortFree+0xc4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	4a06      	ldr	r2, [pc, #24]	@ (8004c9c <vPortFree+0xc4>)
 8004c84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c86:	f7fe fc75 	bl	8003574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20004a14 	.word	0x20004a14
 8004c98:	20004a04 	.word	0x20004a04
 8004c9c:	20004a10 	.word	0x20004a10

08004ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ca6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cac:	4b27      	ldr	r3, [pc, #156]	@ (8004d4c <prvHeapInit+0xac>)
 8004cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <prvHeapInit+0xac>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d50 <prvHeapInit+0xb0>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cde:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <prvHeapInit+0xb0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cec:	2208      	movs	r2, #8
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0307 	bic.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	@ (8004d54 <prvHeapInit+0xb4>)
 8004d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d02:	4b14      	ldr	r3, [pc, #80]	@ (8004d54 <prvHeapInit+0xb4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d0a:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <prvHeapInit+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <prvHeapInit+0xb4>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d58 <prvHeapInit+0xb8>)
 8004d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <prvHeapInit+0xbc>)
 8004d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <prvHeapInit+0xc0>)
 8004d3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d3e:	601a      	str	r2, [r3, #0]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000df8 	.word	0x20000df8
 8004d50:	200049f8 	.word	0x200049f8
 8004d54:	20004a00 	.word	0x20004a00
 8004d58:	20004a08 	.word	0x20004a08
 8004d5c:	20004a04 	.word	0x20004a04
 8004d60:	20004a14 	.word	0x20004a14

08004d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d6c:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <prvInsertBlockIntoFreeList+0xac>)
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e002      	b.n	8004d78 <prvInsertBlockIntoFreeList+0x14>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d8f7      	bhi.n	8004d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d108      	bne.n	8004da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d118      	bne.n	8004dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d00d      	beq.n	8004de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e008      	b.n	8004df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004de2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <prvInsertBlockIntoFreeList+0xb0>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e003      	b.n	8004df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d002      	beq.n	8004e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	200049f8 	.word	0x200049f8
 8004e14:	20004a00 	.word	0x20004a00

08004e18 <memset>:
 8004e18:	4402      	add	r2, r0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <memset+0xa>
 8004e20:	4770      	bx	lr
 8004e22:	f803 1b01 	strb.w	r1, [r3], #1
 8004e26:	e7f9      	b.n	8004e1c <memset+0x4>

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e60 <__libc_init_array+0x38>)
 8004e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004e64 <__libc_init_array+0x3c>)
 8004e2e:	1b64      	subs	r4, r4, r5
 8004e30:	10a4      	asrs	r4, r4, #2
 8004e32:	2600      	movs	r6, #0
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	4d0b      	ldr	r5, [pc, #44]	@ (8004e68 <__libc_init_array+0x40>)
 8004e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004e6c <__libc_init_array+0x44>)
 8004e3c:	f000 f826 	bl	8004e8c <_init>
 8004e40:	1b64      	subs	r4, r4, r5
 8004e42:	10a4      	asrs	r4, r4, #2
 8004e44:	2600      	movs	r6, #0
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	4798      	blx	r3
 8004e52:	3601      	adds	r6, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	4798      	blx	r3
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	08004f1c 	.word	0x08004f1c
 8004e64:	08004f1c 	.word	0x08004f1c
 8004e68:	08004f1c 	.word	0x08004f1c
 8004e6c:	08004f20 	.word	0x08004f20

08004e70 <memcpy>:
 8004e70:	440a      	add	r2, r1
 8004e72:	4291      	cmp	r1, r2
 8004e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e78:	d100      	bne.n	8004e7c <memcpy+0xc>
 8004e7a:	4770      	bx	lr
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e86:	4291      	cmp	r1, r2
 8004e88:	d1f9      	bne.n	8004e7e <memcpy+0xe>
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
